{"version":3,"sources":["components/Context/DiagramManager.ts","components/Diagram/DiagramCanvas.tsx","hooks/useDrag.ts","components/NodeTypes/NodeTypeHeader.tsx","components/NodeTypes/NodeTypeInput.tsx","components/NodeTypes/NodeTypeSelect.tsx","components/NodeTypes/NodeTypeButton.tsx","components/NodeTypes/config.ts","utils/index.ts","components/Diagram/Port.tsx","components/Diagram/DiagramNodePorts.tsx","components/Diagram/DiagramNode.tsx","components/Diagram/NodesCanvas.tsx","utils/makeSvgPath.ts","components/Diagram/LinkDelete.tsx","components/Diagram/Link.tsx","components/Diagram/LinksCanvas.tsx","components/Diagram/Segment.tsx","components/Diagram/index.tsx","hooks/useHistory.ts","components/Toolbar/Toolbar.tsx","components/NodeList/NodeListItem.tsx","components/NodeList/NodeList.tsx","DiagramPanel.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultValue","canvasRef","portRefs","nodeRefs","scale","DiagramManagerContext","createContext","DiagramManagerProvider","Provider","useScale","useContext","DiagramCanvas","React","memo","props","children","transform","translateX","translateY","useState","canvasDom","setBoundingBox","useRef","useEffect","current","id","className","ref","style","value","displayName","DISABLED_DRAG_TAGS","defaultOptions","throttleBy","getEventCoordinates","event","clientX","clientY","CreateCallbackRef","useCallback","callback","useDrag","options","targetRef","dragStartHandlerRef","dragHandlerRef","dragEndHandlerRef","isDragging","start","end","offset","info","onDragStart","targetTagName","target","tagName","contains","includes","onDrag","throttle","onDragEnd","_onDragStart","e","_onDrag","_onDragEnd","addEventListener","document","removeEventListener","NodeTypeHeader","icon","label","createElement","NodeTypeInput","onChange","nodesConfig","nodeTypeInput","inputValue","placeholder","NodeTypeSelect","nodeTypeSelect","width","selectValue","Option","disabled","NodeTypeButton","nodeTypeButton","buttonList","map","button","index","text","component","AppleOutlined","defaultData","WindowsOutlined","nodesList","Object","entries","key","type","findEventTargetParentNodeId","dom","nodeId","isNodeDom","classList","parentElement","Port","isLinked","onDragNewSegment","onSegmentFail","onSegmentConnect","onPortMount","startCoordinatesRef","classnames","stopImmediatePropagation","stopPropagation","getBoundingClientRect","canvasX","x","canvasY","y","height","to","diagramDom","diagramDomRect","calculatingCoordinates","targetDom","targetNode","top","DiagramNodePorts","inputs","port","DiagramNode","nodeInfo","onNodeValueChange","onNodePositionChange","onNodeMount","onAddHistory","activeNodeIds","coordinates","data","outputs","nodeItemProps","nextNodeData","dragStartPoint","nextCoords","isEqual","useMemo","active","left","NodesCanvas","nodes","node","roundPoint","point","Math","floor","getCubicBezierPath","from","points","controlPointForStart","controlPointForEnd","item","join","getAdvancedCubicBezierPath","midX","midY","makeSvgPath","startPoint","endPoint","roundedStart","roundedEnd","abs","LinkDelete","position","getEntityCoordinates","entity","nodeEl","offsetHeight","portDom","parentNodeCoordinates","offsetLeft","offsetWidth","offsetTop","Link","input","output","link","onDelete","pathRef","labelPosition","setLabelPosition","inputPoint","outputPoint","path","pathElement","getTotalLength","getPointAtLength","midpoint","getPathMidpoint","onDoubleClick","d","findPortParentNodeInfo","entityId","i","length","j","k","LinksCanvas","links","removeFromLinksArray","nextLinks","filter","Segment","segment","r","cx","cy","Diagram","setSegment","portId","undefined","portEl","nextCoordinates","nextNodes","findIndex","nextNodeValue","cloneDeep","initialState","past","present","future","reducer","state","action","newPresent","previous","slice","next","newFuture","initialPresent","scaleList","Toolbar","undo","redo","canUndo","canRedo","scaleContent","onClick","placement","content","overlayClassName","NodeListItem","handleDragStart","dataTransfer","setData","draggable","NodeList","SCALE_STEP","DRAG_STATE","CURSOR_MAP","DiagramPanel","useReducer","dispatch","set","setWithHistory","addAHistory","clear","useHistory","setTransform","selectionArea","setSelectionArea","dragState","setDragState","mouseDownStartPosition","setActiveNodeIds","scaleRef","panelRef","selectionAreaRef","handleChange","newValue","notAddHistory","handleAddHistory","handleDrop","window","nodeType","getData","diagramCanvasRect","getElementById","newNode","uuidv4","createNode","handleDrag","preventDefault","handleWheel","wheelDelta","nativeEvent","newScale","mouseX","mouseY","Number","toFixed","handleMouseDown","panelDom","firstChild","checkMouseDownTargetIsDrawPanel","handleThrottleSetSelectionArea","panelRect","min","selectAreaDom","v","dom1","dom2","rect1","rect2","maxX","max","maxY","minX","minY","collideCheck","handleMouseUp","handleThrottleSetTransform","handleMouseMove","handleKeyDown","keyCode","handleKeyUp","cursor","hideSelectionArea","selectionAreaStyled","onDrop","onDragEnter","onDragOver","tabIndex","onWheel","onMouseDown","onMouseMove","onMouseUp","onKeyDown","onKeyUp","hidden","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qRAUMA,EAA+B,CAAEC,UAAW,KAAMC,SAAU,GAAIC,SAAU,GAAIC,MAAO,GAErFC,EAAwBC,wBAAcN,GAE/BO,EAAyBF,EAAsBG,SA0B/CC,EAAW,WAEtB,OADkBC,qBAAWL,GAArBD,OC/BGO,EAA8CC,IAAMC,MAAK,SAACC,GAAW,IACxEC,EAA4CD,EAA5CC,SAAUb,EAAkCY,EAAlCZ,SAAUC,EAAwBW,EAAxBX,SAAUa,EAAcF,EAAdE,UAC9BZ,EAAkCY,EAAlCZ,MAAOa,EAA2BD,EAA3BC,WAAYC,EAAeF,EAAfE,WAFoD,EAI3CC,mBAAgC,MAJW,mBAIxEC,EAJwE,KAI7DC,EAJ6D,KAKzEpB,EAAYqB,iBAAuB,MAOzC,OAJAC,qBAAU,WACRF,EAAepB,EAAUuB,WACxB,IAGD,qBACEC,GAAG,iBACHC,UAAU,iBACVC,IAAK1B,EAEL2B,MAAO,CAAEZ,UAAU,UAAD,OAAYZ,EAAZ,gBAAyBA,EAAzB,YAAkCa,EAAlC,YAAgDC,EAAhD,MALpB,SAOE,cAACX,EAAD,CAAwBsB,MAAO,CAAE5B,UAAWmB,EAAWlB,WAAUC,WAAUC,SAA3E,SACGW,SAMTJ,EAAcmB,YAAc,gB,aCjCtBC,EAAqB,CAAC,QAAS,YAc/BC,EAAiC,CACrCL,IAAK,KACLM,WAAY,GAGRC,EAAsB,SAACC,GAAD,MAAwC,CAACA,EAAMC,QAASD,EAAME,UAOpFC,EAAoB,SAACX,GAAD,OACxBY,uBACE,SAACC,GACMb,EAAIH,SAAWgB,IAAab,EAAIH,UACnCG,EAAIH,QAAUgB,KAGlB,CAACb,KAqGUc,EAlGC,WAA+B,IAA9BC,EAA6B,uDAAnBV,EACnBW,EAAYD,EAAQf,IACpBiB,EAAsBtB,mBACtBuB,EAAiBvB,mBACjBwB,EAAoBxB,mBAJkB,EAMpBA,iBAAiB,CAACyB,YAAY,EAAOC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,GAAIC,OAAQ,CAAC,EAAG,KAArFC,EAN4B,EAMrC3B,QAKD4B,EAAcb,uBAClB,SAACJ,GACC,IAAMkB,EAAgBlB,EAAMmB,OAAOC,QAEhCJ,EAAKJ,cAAN,OACAJ,QADA,IACAA,OADA,EACAA,EAAWnB,QAAQgC,SAASrB,EAAMmB,UACjCvB,EAAmB0B,SAASJ,KAE7BF,EAAKJ,YAAa,EAClBI,EAAKF,IAAM,CAAC,EAAG,GACfE,EAAKD,OAAS,CAAC,EAAG,GAClBC,EAAKH,MAAQd,EAAoBC,GAE7BS,EAAoBpB,SACtBoB,EAAoBpB,QAAQW,EAA5B,eAAuCgB,OAI7C,CAACR,EAAWQ,EAAMP,IAOdc,EAASnB,sBACboB,aAAS,SAACxB,GACJgB,EAAKJ,aACPI,EAAKD,OAAS,CAACC,EAAKH,MAAM,GAAKb,EAAMC,QAASe,EAAKH,MAAM,GAAKb,EAAME,SAEhEQ,EAAerB,SACjBqB,EAAerB,QAAQW,EAAvB,eAAkCgB,OAGrCT,EAAQT,YACX,CAACU,EAAWQ,EAAMN,IAMde,EAAYrB,uBAChB,SAACJ,GACKgB,EAAKJ,aACPI,EAAKJ,YAAa,EAClBI,EAAKF,IAAMf,EAAoBC,GAE3BW,EAAkBtB,SACpBsB,EAAkBtB,QAAQW,EAA1B,eAAqCgB,OAI3C,CAACA,EAAML,IA2BT,OArBAvB,qBAAU,WACR,IAAMsC,EAAe,SAACC,GAAD,OAAYV,EAAYU,IACvCC,EAAU,SAACD,GAAD,OAAYJ,EAAOI,IAC7BE,EAAa,SAACF,GAAD,OAAYF,EAAUE,IAQzC,OANA,OAAInB,QAAJ,IAAIA,OAAJ,EAAIA,EAAWnB,WACbmB,EAAUnB,QAAQyC,iBAAiB,YAAaJ,GAChDK,SAASD,iBAAiB,YAAaF,GACvCG,SAASD,iBAAiB,UAAWD,IAGhC,YACL,OAAIrB,QAAJ,IAAIA,OAAJ,EAAIA,EAAWnB,WAEbmB,EAAUnB,QAAQ2C,oBAAoB,YAAaN,GACnDK,SAASC,oBAAoB,YAAaJ,GAC1CG,SAASC,oBAAoB,UAAWH,OAG3C,CAACrB,EAAWS,EAAaM,EAAQE,IAE7B,CACLjC,IAAKgB,EACLS,YAAad,EAAkBM,GAC/Bc,OAAQpB,EAAkBO,GAC1Be,UAAWtB,EAAkBQ,K,SC3HpBsB,G,MAAgD,SAACtD,GAAW,IAChEuD,EAAevD,EAAfuD,KAAMC,EAASxD,EAATwD,MAEb,OACE,qBAAI5C,UAAU,cAAd,UACG2C,GAAQ,qBAAK3C,UAAU,mBAAf,SACNd,IAAM2D,cAAcF,KAEvB,qBAAK3C,UAAU,mBAAf,SAAmC4C,SAKzCF,EAAetC,YAAc,iBCZtB,IAAM0C,EAA8C,SAAC1D,GAAW,IAE9De,EAAmBf,EAAnBe,MAAO4C,EAAY3D,EAAZ2D,SAQd,OACE,qCACE,cAAC,EAAD,CAAgBJ,KAAMK,EAAYC,cAAcN,KAAMC,MAAOI,EAAYC,cAAcL,QACvF,cAAC,IAAD,CAAOzC,MAAOA,EAAM+C,WAAYH,SAVV,SAACX,GACzBW,EAAS,2BACJ5C,GADG,IAEN+C,WAAYd,EAAER,OAAOzB,UAOwCgD,YAAY,oBAK/EL,EAAc1C,YAAc,gB,aChBfgD,EAAgD,SAAC,GAAuB,IAAtBjD,EAAqB,EAArBA,MAAO4C,EAAc,EAAdA,SAOpE,OACE,qCACE,cAAC,EAAD,CAAgBJ,KAAMK,EAAYK,eAAeV,KAAMC,MAAOI,EAAYK,eAAeT,QACzF,eAAC,IAAD,CAAQ1C,MAAO,CAACoD,MAAO,KAAMnD,MAAOA,EAAMoD,YAAaR,SAR3D,SAAsBX,GACpBW,EAAS,2BAAI5C,GAAL,IAAYoD,YAAanB,MAO/B,UACE,cAAC,IAAOoB,OAAR,CAAerD,MAAM,OAArB,kBACA,cAAC,IAAOqD,OAAR,CAAerD,MAAM,OAArB,kBACA,cAAC,IAAOqD,OAAR,CAAerD,MAAM,WAAWsD,UAAQ,EAAxC,sBAGA,cAAC,IAAOD,OAAR,CAAerD,MAAM,WAArB,6BAMRiD,EAAehD,YAAc,iB,aCzBhBsD,EAAgD,SAACtE,GAAW,IAChEe,EAASf,EAATe,MAQP,OACE,qCACE,cAAC,EAAD,CAAgBwC,KAAMK,EAAYW,eAAehB,KAAMC,MAAOI,EAAYW,eAAef,QACxFzC,EAAMyD,WAAWC,KAAI,SAACC,EAAaC,GAAd,OACpB,8BACE,cAAC,IAAD,CAAQ7D,MAAO,CAACoD,MAAO,QAAvB,SAAiCQ,EAAOE,QADhCD,UAQlBL,EAAetD,YAAc,iB,+BC1BhB4C,EAAc,CACzBC,cAAe,CACbgB,UAAWnB,EACXF,MAAO,qBACPD,KAAMuB,IACNC,YAAa,CACXjB,WAAY,SAGhBG,eAAgB,CACdY,UAAWb,EACXR,MAAO,sBACPD,KAAMyB,IACND,YAAa,CACXZ,YAAa,KAGjBI,eAAgB,CACdM,UAAWP,EACXd,MAAO,sBACPD,KAAMyB,IACND,YAAa,CACXZ,YAAa,MAKNc,EAAYC,OAAOC,QAAQvB,GAAaa,KAAI,YAAmB,IAAD,mBAAhBW,EAAgB,KAAXrE,EAAW,KACzE,OAAO,2BACFA,GADL,IAEEsE,KAAMD,O,SCxBGE,EAA8B,SAA9BA,EAA+BC,GAC1C,IAAKA,EACH,OAAO,KAET,IAAMC,EAASD,EAAI5E,GACb8E,EAAYF,EAAIG,UAAUhD,SAAS,gBACzC,OAAI8C,GAAUC,EACLD,EAELC,EACK,KAEFH,EAA4BC,EAAII,gB,gBCP5BC,EAA4B9F,IAAMC,MAAK,SAACC,GAAW,IACtDW,EAAsGX,EAAtGW,GAAIkF,EAAkG7F,EAAlG6F,SAAUlB,EAAwF3E,EAAxF2E,MAAOa,EAAiFxF,EAAjFwF,OAAQM,EAAyE9F,EAAzE8F,iBAAkBC,EAAuD/F,EAAvD+F,cAAeC,EAAwChG,EAAxCgG,iBAAkBC,EAAsBjG,EAAtBiG,YAAaZ,EAASrF,EAATqF,KAC/FlG,ETIgBS,qBAAWL,GAAzBJ,USHFG,EAAQK,IACRkB,EAAWL,iBAAqC,MAChD0F,EAAsB1F,mBAEtBI,EAAYuF,IAAW,eAAgB,CAC3C,aAAuB,UAATd,EACd,cAAwB,WAATA,EACf,YAAaQ,IAV8C,EAalBlE,EAAQ,CAAEd,MAAKM,WAAY,KAA9DmB,EAbqD,EAarDA,YAAaM,EAbwC,EAaxCA,OAAQE,EAbgC,EAahCA,UA6C7B,OA3CAR,GAAY,SAACjB,GAGX,GAFAA,EAAM+E,2BACN/E,EAAMgF,kBACFlH,GAAa0B,EAAIH,QAAS,CAAC,IAAD,EACOvB,EAAUmH,wBAAlCC,EADiB,EACpBC,EAAeC,EADK,EACRC,EADQ,EAEI7F,EAAIH,QAAQ4F,wBAApCE,EAFoB,EAEpBA,EAAGE,EAFiB,EAEjBA,EAAGxC,EAFc,EAEdA,MAAOyC,EAFO,EAEPA,OACrBT,EAAoBxF,QAAU,EAAE8F,EAAID,EAAUrC,EAAQ,GAAK5E,GAAQoH,EAAID,EAAUE,EAAS,GAAKrH,OAInGsD,GAAO,SAACvB,GACN,GAAI6E,EAAoBxF,QAAS,CAC/BW,EAAM+E,2BACN/E,EAAMgF,kBACN,IAAMO,ED3C0B,SACpCvF,EACAwF,EACAvH,GAEA,IAAMwH,GAA2B,OAAVD,QAAU,IAAVA,OAAA,EAAAA,EAAYP,0BAA2B,CAAEE,EAAG,EAAGE,EAAG,GACzE,MAAO,EAAErF,EAAMC,QAAUwF,EAAeN,GAAKlH,GAAQ+B,EAAME,QAAUuF,EAAeJ,GAAKpH,GCqCzDyH,CAAuB1F,EAAOlC,EAAWG,GAErEwG,EAAiBnF,EAAIuF,EAAoBxF,QAASkG,OAItD9D,GAAU,SAACzB,GACT,IAAM2F,EAAY3F,EAAMmB,OAGxB,GAFqBwE,EAAUtB,UAAUhD,SAAS,iBAE9BsE,EAAUrG,KAAOA,EACnCqF,EAAiBrF,EAAIqG,EAAUrG,QADjC,CAMA,IAAMsG,EAAa3B,EAA4BjE,EAAMmB,QACjDyE,GAAcA,IAAezB,EAC/BQ,EAAiBrF,EAAIsG,GAIvBlB,GAAiBA,EAAcpF,EAAI0E,OAGrC5E,qBAAU,WACRwF,EAAYtF,EAAIE,EAAIH,WACnB,CAACC,EAAIsF,IAGN,qBAAKrF,UAAWA,EAAWD,GAAIA,EAAIE,IAAKA,EAAKC,MAAO,CAAEoG,IAAe,IAAVvC,EAAc,MAAd,qBAA4C,GAARA,EAApC,aC9DlDwC,EAAoD,SAACnH,GAAW,IACnEoH,EAAyFpH,EAAzFoH,OAAQnB,EAAiFjG,EAAjFiG,YAAaH,EAAoE9F,EAApE8F,iBAAkBC,EAAkD/F,EAAlD+F,cAAeC,EAAmChG,EAAnCgG,iBAAkBR,EAAiBxF,EAAjBwF,OAAQH,EAASrF,EAATqF,KACxF,OACE,mCACG+B,EAAO3C,KAAI,SAAC4C,EAAM1C,GAAP,OACV,cAACiB,EAAD,CACEK,YAAaA,EACbH,iBAAkBA,EAClBC,cAAeA,EACfC,iBAAkBA,EAClBX,KAAMA,EAEN1E,GAAI0G,EAAK1G,GACTgE,MAAOA,EACPkB,SAAUwB,EAAKxB,SACfL,OAAQA,GAJH6B,EAAK1G,UAWpBwG,EAAiBnG,YAAc,mBCdxB,IAAMsG,EAA0CxH,IAAMC,MAAK,SAACC,GAAW,IAAD,EAEzEuH,EAUEvH,EAVFuH,SACAC,EASExH,EATFwH,kBACAC,EAQEzH,EARFyH,qBACAxB,EAOEjG,EAPFiG,YACAH,EAME9F,EANF8F,iBACA4B,EAKE1H,EALF0H,YACA3B,EAIE/F,EAJF+F,cACAC,EAGEhG,EAHFgG,iBACA2B,EAEE3H,EAFF2H,aACAC,EACE5H,EADF4H,cAGMjH,EAAiD4G,EAAjD5G,GAAIkH,EAA6CN,EAA7CM,YAAaxC,EAAgCkC,EAAhClC,KAAM+B,EAA0BG,EAA1BH,OAAQU,EAAkBP,EAAlBO,KAAMC,EAAYR,EAAZQ,QAEvCzI,EAAQK,IAGRkF,EAAS,UAAGjB,EAAYyB,UAAf,aAAG,EAAmBR,UAO/BmD,EAAgB,CACpBjH,MAAO+G,EACPnE,SAP2B,SAACsE,GAC5BT,EAAkB7G,EAAIsH,KASlBpH,EAAWL,iBAAO,MA/BmD,EAiChCmB,EAAQ,CAAER,WAAY,GAAIN,QAA7DyB,EAjCmE,EAiCnEA,YAAaM,EAjCsD,EAiCtDA,OAAQE,EAjC8C,EAiC9CA,UACvBoF,EAAiB1H,iBAAOqH,GAG9BvF,GAAY,WACV4F,EAAexH,QAAUmH,KAI3BjF,GAAO,SAACvB,EAAmBgB,GACzBhB,EAAM+E,2BACN/E,EAAMgF,kBACN,IAAM8B,EAA8B,CAClCD,EAAexH,QAAQ,GAAK2B,EAAKD,OAAO,GAAK9C,EAC7C4I,EAAexH,QAAQ,GAAK2B,EAAKD,OAAO,GAAK9C,GAE/CmI,EAAqB9G,EAAIwH,MAG3BrF,GAAU,SAACzB,GACJ+G,YAAQF,EAAexH,QAASmH,IACnCF,EAAahH,EAAIuH,EAAexH,YAIpC,IAAMkB,EAAU,CAAE4D,OAAQ7E,EAAIsF,cAAaH,mBAAkBC,gBAAeC,oBAE5EvF,qBAAU,WACRiH,EAAY/G,EAAIE,EAAIH,WACnB,CAACC,EAAI+G,IAER,IAAM9G,EAAYyH,mBAAQ,WACxB,OAAOlC,IAAW,eAAgB,CAChCmC,OAAQV,EAAcjF,SAAShC,OAEhC,CAACiH,EAAejH,IAEnB,OACE,sBAAKA,GAAIA,EAAIC,UAAWA,EAAWC,IAAKA,EAAKC,MAAO,CAAEyH,KAAMV,EAAY,GAAIX,IAAKW,EAAY,IAA7F,UACGhD,GAAa/E,IAAM2D,cAAcoB,EAAWmD,GAC7C,cAAC,EAAD,yBAAkBZ,OAAQA,GAAYxF,GAAtC,IAA+CyD,KAAK,WACpD,cAAC,EAAD,yBAAkB+B,OAAQW,GAAanG,GAAvC,IAAgDyD,KAAK,kBAK3DiC,EAAYtG,YAAc,cCpFnB,IAAMwH,EAA0C1I,IAAMC,MAAK,SAACC,GAAW,IACpEyI,EAAUzI,EAAVyI,MAER,OACE,mCACGA,EAAMhE,KAAI,SAACiE,GAAD,OACT,cAACpB,EAAD,aAAaC,SAAUmB,GAAwB1I,GAAb0I,EAAK/H,YAM/C6H,EAAYxH,YAAc,cC1B1B,IAAM2H,EAAa,SAACC,GAAD,MAA6C,CAACC,KAAKC,MAAMF,EAAM,IAAKC,KAAKC,MAAMF,EAAM,MAgBlGG,EAAqB,SAACC,EAAuBpC,GACjD,IANuBqC,EAMjBC,EAAwC,EAAEtC,EAAG,GAAKoC,EAAK,IAAM,EAAGA,EAAK,IACrEG,EAAsC,EAAEvC,EAAG,GAAKoC,EAAK,IAAM,EAAGpC,EAAG,IAEvE,MAAM,KAAN,OAAYoC,EAAK,GAAjB,YAAuBA,EAAK,GAA5B,eATuBC,EAS6B,CAACC,EAAsBC,GARpEF,EAAOxE,KAAI,SAAC2E,GAAD,gBAAaA,EAAK,GAAlB,YAAwBA,EAAK,OAAMC,KAAK,MAQ1D,YAAmGzC,EAAG,GAAtG,YAA4GA,EAAG,KAI3G0C,EAA6B,SAACN,EAAuBpC,GACzD,IAAM2C,GAAQP,EAAK,GAAKpC,EAAG,IAAM,EAC3B4C,GAAQR,EAAK,GAAKpC,EAAG,IAAM,EAEjC,MAAM,IAAN,OAAWoC,EAAK,GAAhB,YAAsBA,EAAK,GAA3B,YAAiCA,EAAK,GAAK,GAA3C,YAAiDA,EAAK,GAAtD,cAA8DA,EAAK,GAAK,IAAxE,YAA+EA,EAAK,GAApF,YAA0FA,EAAK,GAAK,IAApG,aAA4GQ,EAAOR,EAAK,IAAM,EAA9H,aAAoIO,EAApI,YAA4IC,EAA5I,cAAsJD,EAAtJ,YAA8JC,EAA9J,YAAsK5C,EAAG,GAAK,IAA9K,aAAsL4C,EAAO5C,EAAG,IAAM,EAAtM,YAA2MA,EAAG,GAAK,EAAnN,YAAwNA,EAAG,GAA3N,cAAmOA,EAAG,GAAK,EAA3O,YAAgPA,EAAG,GAAnP,YAAyPA,EAAG,GAA5P,YAAkQA,EAAG,KAkBxP6C,EAZK,SAACC,EAA8BC,GACjD,IAAKD,IAAeC,EAAU,MAAO,GACrC,IAjCuBX,EAAuBpC,EAiCxCgD,EAAejB,EAAWe,GAC1BG,EAAalB,EAAWgB,GAM9B,OAxCuBX,EAwCAY,GAxCuBhD,EAwCTiD,GAvC9B,IAAMb,EAAK,GAAK,IAAMH,KAAKiB,IAAIlD,EAAG,GAAKoC,EAAK,KAAO,GACjDD,EAAmBC,EAAMpC,GAEzB0C,EAA2BN,EAAMpC,ICF/BmD,EAAwCjK,IAAMC,MAAK,gBAAEiK,EAAF,EAAEA,SAAF,OAC9D,+BAAexD,EAAGwD,EAAS,GAAItD,EAAGsD,EAAS,GAA3C,SACE,qBAAKpJ,UAAU,wBAAf,wBAMJmJ,EAAW/I,YAAc,aCHzB,IAAMiJ,EAAuB,SAC3BC,EACA9K,EACAC,EACAF,GAEA,GAAI+K,GAA0B,SAAhBA,EAAO7E,MAAmBhG,EAAS6K,EAAOvJ,IAAK,CAC3D,IAAMwJ,EAAS9K,EAAS6K,EAAOvJ,IAC/B,MAAO,CAACuJ,EAAOrC,YAAY,GAAIqC,EAAOrC,YAAY,GAAKsC,EAAOC,aAAe,GAG/E,GAAIF,GAAU9K,GAAYA,EAAS8K,EAAOvJ,IAAK,CAC7C,IAAM0J,EAAUjL,EAAS8K,EAAOvJ,IAC1B2J,EAAwBJ,EAAOrC,YAErC,MAAO,CACLyC,EAAsB,GAAKD,EAAQE,WAAaF,EAAQG,YAAc,EACtEF,EAAsB,GAAKD,EAAQI,UAAYJ,EAAQD,aAAe,KAa/DM,EAA4B5K,IAAMC,MAAK,SAACC,GAAW,IACvD2K,EAAiC3K,EAAjC2K,MAAOC,EAA0B5K,EAA1B4K,OAAQC,EAAkB7K,EAAlB6K,KAAMC,EAAY9K,EAAZ8K,SACtBC,EAAUvK,iBAAuB,MAFsB,EAGnBH,qBAHmB,mBAGtD2K,EAHsD,KAGvCC,EAHuC,OfzBtDrL,qBAAWL,Ge6BXJ,EAJsD,EAItDA,UAAWC,EAJ2C,EAI3CA,SAAUC,EAJiC,EAIjCA,SAOtB6L,EAAa7C,mBAAQ,kBAAM4B,EAAqBU,EAAOvL,EAAUC,KAAsB,CAC3FsL,EACAvL,EACAC,EACAF,IAMIgM,EAAc9C,mBAAQ,kBAAM4B,EAAqBW,EAAQxL,EAAUC,KAAsB,CAC7FuL,EACAxL,EACAC,EACAF,IAMIiM,EAAO/C,mBAAQ,kBAAMoB,EAAYyB,EAAYC,KAAc,CAACD,EAAYC,IAE9E1K,qBAAU,WACJyK,GAAcC,GAAeJ,EAAQrK,SACvCuK,EPjCyB,SAACI,GAC9B,GAAIA,EAAYC,gBAAkBD,EAAYE,iBAAkB,CAC9D,IAAMC,EAAWH,EAAYC,iBAAmB,EADc,EAE7CD,EAAYE,iBAAiBC,GAC9C,MAAO,CAHuD,EAEtDhF,EAFsD,EAEnDE,GAIb,MAAO,CAAC,EAAG,GO0BU+E,CAAgBV,EAAQrK,YAE1C,CAACqK,EAASG,EAAYC,IAEzB,IAAMO,EAAgBjK,uBAAY,WAChCqJ,EAASD,KACR,CAACC,EAAUD,IAEd,OACE,oBAAGjK,UAAW,eAAd,UACE,sBAAM+K,EAAGP,EAAMxK,UAAU,gBAAgB8K,cAAeA,IACxD,sBAAMC,EAAGP,EAAMvK,IAAKkK,EAASnK,UAAU,eAAe8K,cAAeA,IACpEV,GAAiB,cAACjB,EAAD,CAAYC,SAAUgB,UCnExCY,EAAyB,SAACnD,EAAoBoD,GAClD,IAAK,IAAIC,EAAI,EAAGA,EAAIrD,EAAMsD,OAAQD,IAAK,CACrC,IAAMpD,EAAOD,EAAMqD,GACnB,GAAIpD,EAAK/H,KAAOkL,EACd,MAAO,CAAExG,KAAM,OAAQwC,YAAaa,EAAKb,YAAalH,GAAIkL,GAE1D,IAAK,IAAIG,EAAI,EAAGA,EAAItD,EAAKtB,OAAO2E,OAAQC,IAAK,CAE3C,GADctD,EAAKtB,OAAO4E,GAChBrL,KAAOkL,EACf,MAAO,CAAExG,KAAM,OAAQwC,YAAaa,EAAKb,YAAalH,GAAIkL,GAI9D,IAAK,IAAII,EAAI,EAAGA,EAAIvD,EAAKX,QAAQgE,OAAQE,IAAK,CAE5C,GADevD,EAAKX,QAAQkE,GACjBtL,KAAOkL,EAChB,MAAO,CAAExG,KAAM,OAAQwC,YAAaa,EAAKb,YAAalH,GAAIkL,MAOvDK,EAAyCpM,IAAMC,MAAK,SAACC,GAAW,IACnEyI,EAA2BzI,EAA3ByI,MAAO9E,EAAoB3D,EAApB2D,SAAUwI,EAAUnM,EAAVmM,MAEnBC,EAAuB3K,uBAC3B,SAACoJ,GACC,GAAIsB,EAAMJ,OAAS,GAAKpI,EAAU,CAChC,IAAM0I,EAAYF,EAAMG,QAAO,SAAClD,GAAD,OAAWhB,YAAQgB,EAAMyB,MACxDlH,EAAS0I,MAGb,CAACF,EAAOxI,IAGV,OACE,qBAAK/C,UAAU,sBAAf,SACGuL,GACCA,EAAM1H,KAAI,SAACoG,GAAD,OACR,cAACH,EAAD,CACEG,KAAMA,EACNF,MAAOiB,EAAuBnD,EAAOoC,EAAKF,OAC1CC,OAAQgB,EAAuBnD,EAAOoC,EAAKD,QAC3CE,SAAUsB,GAJZ,UAKUvB,EAAKF,MALf,YAKwBE,EAAKD,iBAMvCsB,EAAYlL,YAAc,cClEnB,IAAMuL,EAAkCzM,IAAMC,MAAK,YAAgB,IAAdyM,EAAa,EAAbA,QACnDxD,EAAgBwD,EAAhBxD,KAAMpC,EAAU4F,EAAV5F,GAAIjG,EAAM6L,EAAN7L,GACXyK,EAAO/C,mBAAQ,kBAAMoB,EAAYT,EAAMpC,KAAK,CAACoC,EAAMpC,IAEzD,OACE,qBAAKhG,UAAU,yBAAf,SACE,oBAAGA,UAAU,uBAAuBD,GAAIA,EAAxC,UACE,sBAAMgL,EAAGP,IACT,wBAAQqB,EAAE,IAAIC,GAAI9F,EAAG,GAAI+F,GAAI/F,EAAG,aAMxC2F,EAAQvL,YAAc,U,oBCJT4L,GAAkC9M,IAAMC,MAAK,SAACC,GAAW,IAC5De,EAA4Df,EAA5De,MAAO4C,EAAqD3D,EAArD2D,SAAUgE,EAA2C3H,EAA3C2H,aAAczH,EAA6BF,EAA7BE,UAAW0H,EAAkB5H,EAAlB4H,cADiB,EAErCvH,qBAFqC,mBAE5DmM,EAF4D,KAEnDK,EAFmD,KAGlDzN,EAAaoB,iBAAkB,IAAxCE,QACSrB,EAAamB,iBAAkB,IAAxCE,QAqCFoF,EAAmBrE,uBAAY,SAACqL,EAAQ9D,EAAMpC,GAClDiG,EAAW,CAAElM,GAAG,WAAD,OAAamM,GAAU9D,OAAMpC,SAC3C,IAGGb,EAAgBtE,uBAAY,WAChCoL,OAAWE,KACV,IAeH,OACE,eAAClN,EAAD,CAAeT,SAAUA,EAAUC,SAAUA,EAAUa,UAAWA,EAAlE,UACE,cAACsI,EAAD,CACEC,MAAO1H,EAAM0H,MACbf,YAhCiB,SAAClC,EAAgB2E,GAEtC9K,EAASmG,GAAU2E,GA+BflE,YAtCiB,SAAC6G,EAAgBE,GACtC5N,EAAS0N,GAAUE,GAsCflH,iBAAkBA,EAClBC,cAAeA,EACf0B,qBAjE2B,SAACjC,EAAgByH,GAChD,IAAMC,EAAS,YAAOnM,EAAM0H,OACtB9D,EAAQuI,EAAUC,WAAU,SAACzE,GAAD,OAAUA,EAAK/H,KAAO6E,KACxD0H,EAAUvI,GAAOkD,YAAcoF,EAC/BtJ,EAAS,2BAAK5C,GAAN,IAAa0H,MAAOyE,KAAa,IA8DrC1F,kBA3DwB,SAAChC,EAAgB4H,GAE7C,IAAMF,EAAYG,YAAUtM,EAAM0H,OAC5B9D,EAAQuI,EAAUC,WAAU,SAACzE,GAAD,OAAUA,EAAK/H,KAAO6E,KACxD0H,EAAUvI,GAAOmD,KAAOsF,EACxBzJ,EAAS,2BAAK5C,GAAN,IAAa0H,MAAOyE,MAuDxBlH,iBArBmB,SAAC2E,EAAeC,GACvC,IAAMyB,EAAS,sBAAOtL,EAAMoL,OAAb,CAAoB,CAAExB,QAAOC,YAC5CjH,EAAS,2BAAK5C,GAAN,IAAaoL,MAAOE,KAC5BQ,OAAWE,IAmBPpF,aArDmB,SAACnC,EAAgByH,GAExC,IAAMC,EAAYG,YAAUtM,EAAM0H,OAC5B9D,EAAQuI,EAAUC,WAAU,SAACzE,GAAD,OAAUA,EAAK/H,KAAO6E,KACxD0H,EAAUvI,GAAOkD,YAAcoF,EAC/BtF,EAAa,2BAAK5G,GAAN,IAAa0H,MAAOyE,MAiD5BtF,cAAeA,IAEjB,cAACsE,EAAD,CAAazD,MAAO1H,EAAM0H,MAAO0D,MAAOpL,EAAMoL,MAAOxI,SAlBpC,SAAC0I,GACpB1I,EAAS,2BAAK5C,GAAN,IAAaoL,MAAOE,QAkBzBG,GAAW,cAACD,EAAD,CAASC,QAASA,UC5F9Bc,GAAe,CAEnBC,KAAM,GAENC,QAAS,KAETC,OAAQ,IAIJC,GAAU,SAACC,EAAYC,GAAiB,IACrCL,EAAyBI,EAAzBJ,KAAMC,EAAmBG,EAAnBH,QAASC,EAAUE,EAAVF,OACfI,EAAcD,EAAdC,WAEP,OAAQD,EAAOvI,MACb,IAAK,OACH,IAAMyI,EAAWP,EAAKA,EAAKxB,OAAS,GAGpC,MAAO,CACLwB,KAHcA,EAAKQ,MAAM,EAAGR,EAAKxB,OAAS,GAI1CyB,QAASM,EACTL,OAAO,CAAED,GAAH,mBAAeC,KAEzB,IAAK,OACH,IAAMO,EAAOP,EAAO,GACdQ,EAAYR,EAAOM,MAAM,GAE/B,MAAO,CACLR,KAAK,GAAD,mBAAMA,GAAN,CAAYC,IAChBA,QAASQ,EACTP,OAAQQ,GAEZ,IAAK,MACH,MAAO,CACLV,KAAK,YAAKA,GACVC,QAASK,EACTJ,OAAQ,IAGZ,IAAK,oBACH,OAAII,IAAeL,EACVG,EAEF,CACLJ,KAAK,GAAD,mBAAMA,GAAN,CAAYC,IAChBA,QAASK,EACTJ,OAAQ,IAGZ,IAAK,gBACH,OAAII,IAAeL,EACVG,EAEF,CACLJ,KAAK,GAAD,mBAAMA,GAAN,CAAYM,IAChBL,QAASA,EACTC,OAAQ,IAGZ,IAAK,QAAL,IACSS,EAAkBN,EAAlBM,eAEP,OAAO,2BACFZ,IADL,IAEEE,QAASU,M,UCxDXC,I,OAAY,CAChB,CAAEvJ,KAAM,uCAAU7D,MAAO,GACzB,CAAE6D,KAAM,0CAAa7D,MAAO,KAGjBqN,GAAkC,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,QAASlP,EAAY,EAAZA,MACxEmP,EAAepG,mBAAQ,WAC3B,OACE,8BACG8F,GAAU1J,KAAI,SAAC2E,GAAD,OACb,qBAAsBxI,UAAU,aAAhC,SACGwI,EAAKxE,MADEwE,EAAKrI,cAMpB,IAEH,OACE,sBAAKH,UAAU,UAAf,UACE,cAAC,IAAD,CAAQyD,UAAWkK,EAASG,QAASL,EAArC,0BAGA,cAAC,IAAD,CAAQhK,UAAWmK,EAASE,QAASJ,EAArC,0BAGA,cAAC,KAAD,CAASK,UAAU,QAAQC,QAASH,EAAcI,iBAAiB,gBAAnE,SACE,cAAC,IAAD,mCAEF,eAAC,IAAD,WAAiB,IAARvP,EAAT,WC/BOwP,I,MAA4ChP,IAAMC,MAAK,YAA0B,IAAxBwD,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAO6B,EAAU,EAAVA,KAE3E0J,EAAkBtN,uBAAY,SAACJ,GAC/BA,EAAM2N,cACR3N,EAAM2N,aAAaC,QAAQ,WAAY5J,KAExC,CAACA,IACJ,OACE,sBAAKzE,UAAU,iBAAiBsO,WAAS,EAAC5M,YAAayM,EAAvD,UACGxL,GAAQzD,IAAM2D,cAAcF,GAC7B,qBAAK3C,UAAU,iBAAf,SAAiC4C,WAKvCsL,GAAa9N,YAAc,eCjBpB,I,GAAMmO,GAAoC,WAE/C,OACE,qBAAKvO,UAAU,YAAf,SACGqE,EAAUR,KAAI,SAACiE,GAAD,OACb,cAACoG,GAAD,CAA8BvL,KAAMmF,EAAKnF,KAAM8B,KAAMqD,EAAKrD,KAAM7B,MAAOkF,EAAKlF,OAAzDkF,EAAKrD,YAMhC8J,GAASnO,YAAc,WCRvB,IAAM9B,GAA6B,CACjCuJ,MAAO,CACL,CACE9H,GAAI,SACJkH,YAAa,CAAC,IAAK,KACnBT,OAAQ,GACRW,QAAS,CAAC,CAACpH,GAAI,SAAUkF,UAAU,IACnCR,KAAM,gBACNyC,KAAM,CACJhE,WAAY,iBAGhB,CACEnD,GAAI,SACJ0E,KAAM,iBACNwC,YAAa,CAAC,IAAK,KACnBT,OAAQ,CAAC,CAACzG,GAAI,UAAWkF,UAAU,IACnCkC,QAAS,CAAC,CAACpH,GAAI,SAAUkF,UAAU,IACnCiC,KAAM,CACJ3D,YAAa,KAGjB,CACExD,GAAI,SACJ0E,KAAM,iBACNwC,YAAa,CAAC,IAAK,KACnBT,OAAQ,GACRW,QAAS,CACP,CAACpH,GAAI,SAAUkF,UAAU,GACzB,CAAClF,GAAI,SAAUkF,UAAU,IAE3BiC,KAAM,CACJtD,WAAY,CACV,CAACI,KAAM,WAAYjE,GAAI,UACvB,CAACiE,KAAM,WAAYjE,GAAI,cAK/BwL,MAAO,CAAC,CAACxB,MAAO,SAAUC,OAAQ,YAG9BwE,GAAa,GAEbC,GACK,UADLA,GAEG,QAFHA,GAGE,OAHFA,GAKO,YAGPC,IAAU,qBACbD,GAAqB,WADR,eAEbA,GAAuB,WAFV,eAGbA,GAAmB,QAHN,eAIbA,GAAkB,YAJL,IAmPDE,OA5Of,WAAyB,IAAD,EJIE,SAACrB,GAAkC,IAAD,EAChCsB,qBAAW9B,GAAD,YAAC,eAChCJ,IAD+B,IAElCE,QAASU,KAH+C,mBACnDP,EADmD,KAC5C8B,EAD4C,KAMpDlB,EAAgC,IAAtBZ,EAAMJ,KAAKxB,OACrByC,EAAkC,IAAxBb,EAAMF,OAAO1B,OAEvBsC,EAAO5M,uBAAY,WACnB8M,GACFkB,EAAS,CAACpK,KAAM,WAEjB,CAACkJ,EAASkB,IAEPnB,EAAO7M,uBAAY,WACnB+M,GACFiB,EAAS,CAACpK,KAAM,WAEjB,CAACmJ,EAASiB,IAGPC,EAAMjO,uBAAY,SAACoM,GAAD,OAAgB4B,EAAS,CAACpK,KAAM,MAAOwI,iBAAc,CAAC4B,IAGxEE,EAAiBlO,uBAAY,SAACoM,GAAD,OAAgB4B,EAAS,CAACpK,KAAM,oBAAqBwI,iBAAc,CAAC4B,IAGjGG,EAAcnO,uBAAY,SAACoM,GAAD,OAAgB4B,EAAS,CAACpK,KAAM,gBAAiBwI,iBAAc,CAAC4B,IAE1FI,EAAQpO,uBAAY,kBAAMgO,EAAS,CAACpK,KAAM,QAAS6I,qBAAkB,CAACuB,EAAUvB,IAEtF,MAAO,CAACnN,MAAO4M,EAAMH,QAASkC,MAAKC,iBAAgBC,cAAavB,OAAMC,OAAMuB,QAAOtB,UAASC,WInCZsB,CAAW5Q,IAApF6B,EADe,EACfA,MAAO2O,EADQ,EACRA,IAAKC,EADG,EACHA,eAAgBC,EADb,EACaA,YAAavB,EAD1B,EAC0BA,KAAMC,EADhC,EACgCA,KAAMC,EADtC,EACsCA,QAASC,EAD/C,EAC+CA,QAD/C,EAEYnO,mBAAqB,CACrDf,MAAO,EACPa,WAAY,EACZC,WAAY,IALQ,mBAEfF,EAFe,KAEJ6P,EAFI,OAOoB1P,qBAPpB,mBAOf2P,EAPe,KAOAC,EAPA,OAQY5P,mBAAiBgP,IAR7B,mBAQfa,EARe,KAQJC,EARI,KAShBC,EAAyB5P,mBATT,EAUoBH,mBAAmB,IAVvC,mBAUfuH,EAVe,KAUAyI,EAVA,KAYhBC,EAAW9P,iBAAe,GAC1B+P,EAAW/P,iBAAuB,MAClCgQ,EAAmBhQ,iBAAuB,MAE1CiQ,EAAehP,uBACnB,SAACiP,EAAwBC,GACnBA,EACFjB,EAAIgB,GAEJf,EAAee,KAGnB,CAAChB,EAAKC,IAGFiB,EAAmBnP,uBACvB,SAACiP,GACCd,EAAYc,KAEd,CAACd,IAGGiB,EAAapP,uBACjB,SAACJ,GAAgB,IAAD,EACVA,IACFA,EAAQyP,OAAOzP,OAEjB,IAAM0P,EAAW1P,EAAM2N,aAAagC,QAAQ,YACtCxK,EAAInF,EAAMC,QACVoF,EAAIrF,EAAME,QAEV0P,GAAoB,UAAA7N,SAAS8N,eAAe,yBAAxB,eAA2C5K,0BAA2B,CAACE,EAAG,EAAGE,EAAG,GAMpGyK,EhBhFc,SAACJ,GAA4C,IAAD,EAAzBlJ,EAAyB,uDAAX,CAAC,EAAG,GAC7D,MAAO,CACLlH,GAAIyQ,cACJvJ,cACAxC,KAAM0L,EACN3J,OAAQ,GACRW,QAAS,CAAC,CAAEpH,GAAIyQ,cAAU/M,UAAU,IACpCyD,MAAM,UAAClE,EAAoBmN,UAArB,eAAgChM,cAAe,IgByEnCsM,CAAWN,EAJU,EAClCvK,EAAIyK,EAAkBzK,GAAKtG,EAAUZ,OACrCoH,EAAIuK,EAAkBvK,GAAKxG,EAAUZ,QAGxCmR,EAAa,2BAAI1P,GAAL,IAAY0H,MAAM,GAAD,mBAAM1H,EAAM0H,OAAZ,CAAmB0I,SAElD,CAACV,EAAcvQ,EAAWa,IAGtBuQ,EAAa7P,uBAAY,SAACuB,GAC9BA,EAAEuO,mBACD,IAEGC,EAAc/P,uBAClB,SAACJ,GACMA,IAAOA,EAAQyP,OAAOzP,OAC3B,IAAMoQ,EAAapQ,EAAMqQ,YAAYD,WAEhCnS,EAAiCY,EAAjCZ,MAAOa,EAA0BD,EAA1BC,WAAYC,EAAcF,EAAdE,WACpBuR,EAAWrB,EAAS5P,QAElBkR,GAAUvQ,EAAMC,QAAUnB,GAAcb,EACxCuS,GAAUxQ,EAAME,QAAUnB,GAAcd,EAE1CmS,EAAa,IACfE,GAAsBvC,GACtBjP,GAA0ByR,EAASxC,GACnChP,GAA0ByR,EAASzC,IAEjCqC,EAAa,IACfE,GAAsBvC,GACtBjP,GAA0ByR,EAASxC,GACnChP,GAA0ByR,EAASzC,IAGjCuC,EAAW,GAAKA,EAAW,KAC/BrB,EAAS5P,QAAUoR,OAAOH,EAASI,QAAQ,IAE3ChC,EAAa,CACXzQ,MAAOgR,EAAS5P,QAChBP,aACAC,kBAGJ,CAACF,IAGG8R,EAAkBvQ,uBACtB,SAACJ,GACC+O,EAAuB1P,QAAU,CAC/B8F,EAAGnF,EAAMC,QACToF,EAAGrF,EAAME,Sf5I8B,SAACF,EAAY4Q,GAAb,OAC7C5Q,EAAMmB,SAAWyP,GAAY5Q,EAAMmB,UAAN,OAAiByP,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAUC,Ye6IhDC,CAAgC9Q,EAAOkP,EAAS7P,UAEhDyP,EADED,IAAcb,GACHA,GAEAA,MAInB,CAACa,IAIGkC,EAAiC3Q,sBACrCoB,aAAS,SAACG,GACR,GAAIoN,EAAuB1P,SAAW6P,EAAS7P,QAAS,CACtD,IAAM2R,EAAY9B,EAAS7P,QAAQ4F,wBACnC2J,EAAiB,CACf1H,KAAMM,KAAKyJ,IAAItP,EAAE1B,QAAS8O,EAAuB1P,QAAQ8F,GAAK6L,EAAU7L,EACxEU,IAAK2B,KAAKyJ,IAAItP,EAAEzB,QAAS6O,EAAuB1P,QAAQgG,GAAK2L,EAAU3L,EACvExC,MAAO2E,KAAKiB,IAAI9G,EAAE1B,QAAU8O,EAAuB1P,QAAQ8F,GAC3DG,OAAQkC,KAAKiB,IAAI9G,EAAEzB,QAAU6O,EAAuB1P,QAAQgG,KAE9D,IAAM6L,EAAgB/B,EAAiB9P,QACjCkH,EAAiB7G,EAAuB0H,MAC3ChE,KAAI,SAAC+N,GAAD,OAAOA,EAAE7R,MACb2L,QAAO,SAAC3L,GACP,OfpKgB,SAAC8R,EAA0BC,GACrD,GAAID,GAAQC,EAAM,CAChB,IAAMC,EAAQF,EAAKnM,wBACbsM,EAAQF,EAAKpM,wBACbuM,EAAehK,KAAKiK,IAAIH,EAAMnM,EAAImM,EAAMzO,MAAO0O,EAAMpM,EAAIoM,EAAM1O,OAC/D6O,EAAelK,KAAKiK,IAAIH,EAAMjM,EAAIiM,EAAMhM,OAAQiM,EAAMlM,EAAIkM,EAAMjM,QAChEqM,EAAenK,KAAKyJ,IAAIK,EAAMnM,EAAGoM,EAAMpM,GACvCyM,EAAepK,KAAKyJ,IAAIK,EAAMjM,EAAGkM,EAAMlM,GAC7C,OAAOmM,EAAOG,GAAQL,EAAMzO,MAAQ0O,EAAM1O,OAAS6O,EAAOE,GAAQN,EAAMhM,OAASiM,EAAMjM,OAEzF,OAAO,Ee0JUuM,CAAaX,EAAenP,SAAS8N,eAAevQ,OAG/D0P,EAAiBzI,MAElB,IACH,CAAC1H,EAAWa,IAGRoS,EAAgB1R,uBACpB,SAACJ,GAEG8O,EADED,IAAcb,GACHA,GAEAA,IAEfY,OAAiBlD,GACjBqD,EAAuB1P,aAAUqM,IAEnC,CAACmD,IAIGkD,EAA6B3R,sBACjCoB,aAAS,SAACG,GACJoN,EAAuB1P,SACzBqP,EAAa,2BACR7P,GADO,IAEVC,WAAY6C,EAAE1B,QAAU8O,EAAuB1P,QAAQ8F,EAAItG,EAAUC,WACrEC,WAAY4C,EAAEzB,QAAU6O,EAAuB1P,QAAQgG,EAAIxG,EAAUE,gBAGxE,IACH,CAACF,EAAW6P,IAGRsD,EAAkB5R,uBACtB,SAACJ,GACK6O,IAAcb,IAChB+D,EAA2B/R,GAEzB6O,IAAcb,IAChB+C,EAA+B/Q,KAGnC,CAAC6O,EAAWkC,EAAgCgB,IAGxCE,EAAgB7R,uBACpB,SAACJ,GACuB,KAAlBA,EAAMkS,SAAkBrD,IAAcb,IACxCc,EAAad,MAGjB,CAACa,IAGGsD,EAAc/R,uBAAY,SAACJ,GACT,KAAlBA,EAAMkS,SACRpD,EAAad,MAEd,IAEGoE,EAASpL,mBAAQ,WACrB,OAAOiH,GAAWY,KACjB,CAACA,IAEEwD,EAAoBrL,mBAAQ,kBAAM6H,IAAcb,KAAsB,CAACa,IAEvEyD,EAAsBtL,mBAAQ,iBAAO,CACzCE,KAAI,OAAEyH,QAAF,IAAEA,OAAF,EAAEA,EAAezH,KACrBrB,IAAG,OAAE8I,QAAF,IAAEA,OAAF,EAAEA,EAAe9I,IACpBhD,MAAK,OAAE8L,QAAF,IAAEA,OAAF,EAAEA,EAAe9L,MACtByC,OAAM,OAAEqJ,QAAF,IAAEA,OAAF,EAAEA,EAAerJ,UACrB,CAACqJ,IAEL,OACE,sBACEnP,IAAK0P,EACL3P,UAAU,gBACVgT,OAAQ/C,EACRgD,YAAavC,EACbwC,WAAYxC,EACZyC,SAAU,EACVC,QAASxC,EACTyC,YAAajC,EACbkC,YAAab,EACbc,UAAWhB,EACXiB,UAAWd,EACXe,QAASb,EACT1S,MAAO,CAAC2S,UAbV,UAeE,cAAC7G,GAAD,CACE7L,MAAOA,EACPb,UAAWA,EACXyD,SAAU8M,EACV9I,aAAciJ,EACdhJ,cAAeA,IAEjB,cAAC,GAAD,IACA,cAAC,GAAD,CAASyG,KAAMA,EAAMC,KAAMA,EAAMC,QAASA,EAASjP,MAAOY,EAAUZ,MAAOkP,QAASA,IACpF,qBACE3N,IAAK2P,EACL5P,UAAU,yBACV0T,OAAQZ,EACR5S,MAAO6S,QC/RAY,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEF9R,SAAS8N,eAAe,SAM1BqD,M","file":"static/js/main.5e7dbab6.chunk.js","sourcesContent":["import { createContext, useContext } from 'react'\nimport { IPortRefs, INodeRefs } from '../../types'\n\nexport interface DiagramManager {\n  canvasRef: HTMLDivElement | null\n  portRefs: IPortRefs\n  nodeRefs: INodeRefs\n  scale: number\n}\n\nconst defaultValue: DiagramManager = { canvasRef: null, portRefs: {}, nodeRefs: {}, scale: 1 }\n\nconst DiagramManagerContext = createContext(defaultValue)\n\nexport const DiagramManagerProvider = DiagramManagerContext.Provider\n\n// export DiagramManager Context\nexport const useDiagramManager = (): DiagramManager => {\n  return useContext(DiagramManagerContext)\n}\n\n// export DiagramCanvas Context\nexport const useDiagramCanvas = (): HTMLDivElement | null => {\n  const { canvasRef } = useContext(DiagramManagerContext)\n  return canvasRef\n}\n\n// return  DiagramNod dom 节点\nexport const useDiagramNodeRefs = (): INodeRefs => {\n  const { nodeRefs } = useContext(DiagramManagerContext)\n  return nodeRefs\n}\n\n// return  DiagramNodePorts ports 节点\nexport const usePortRefs = (): IPortRefs => {\n  const { portRefs } = useContext(DiagramManagerContext)\n  return portRefs\n}\n\n// return scale\nexport const useScale = (): number => {\n  const { scale } = useContext(DiagramManagerContext)\n  return scale\n}\n","import React, { useEffect, useRef, useState } from 'react'\nimport { DiagramManagerProvider } from '../Context/DiagramManager'\nimport { IPortRefs, INodeRefs, ITransform } from '../../types'\n\ninterface DiagramCanvasProps {\n  portRefs: IPortRefs\n  nodeRefs: INodeRefs\n  transform: ITransform\n}\n\nexport const DiagramCanvas: React.FC<DiagramCanvasProps> = React.memo((props) => {\n  const { children, portRefs, nodeRefs, transform } = props\n  const { scale, translateX, translateY } = transform\n\n  const [canvasDom, setBoundingBox] = useState<HTMLDivElement | null>(null)\n  const canvasRef = useRef<HTMLDivElement>(null)\n\n  // 储存 canvas dom\n  useEffect(() => {\n    setBoundingBox(canvasRef.current)\n  }, [])\n\n  return (\n    <div\n      id=\"diagram-canvas\"\n      className=\"diagram-canvas\"\n      ref={canvasRef}\n      // style={{ transform: `translate(${translate.x}px, ${translate.y}px) scale(${scale})` }}\n      style={{ transform: `matrix(${scale},0,0,${scale},${translateX},${translateY})` }}\n    >\n      <DiagramManagerProvider value={{ canvasRef: canvasDom, portRefs, nodeRefs, scale }}>\n        {children}\n      </DiagramManagerProvider>\n    </div>\n  )\n})\n\nDiagramCanvas.displayName = 'DiagramCanvas'\n","import { throttle } from 'lodash-es'\nimport { useRef, useCallback, useEffect } from 'react'\nimport { ICoordinateType } from '../types'\n\nconst DISABLED_DRAG_TAGS = ['INPUT', 'TEXTAREA']\n\ninterface DefaultOptions {\n  ref: React.RefObject<any> | null\n  throttleBy: number\n}\n\ninterface InfoType {\n  isDragging: boolean\n  start: ICoordinateType\n  end: ICoordinateType\n  offset: ICoordinateType\n}\n\nconst defaultOptions: DefaultOptions = {\n  ref: null,\n  throttleBy: 0\n}\n\nconst getEventCoordinates = (event: MouseEvent): ICoordinateType => [event.clientX, event.clientY]\n\n/**\n * Create a persistent callback reference that will live trough a component lifecycle\n * @param ref\n * @returns {Function}\n */\nconst CreateCallbackRef = (ref: any) =>\n  useCallback(\n    (callback) => {\n      if (!ref.current || callback !== ref.current) {\n        ref.current = callback\n      }\n    },\n    [ref]\n  )\n\nconst useDrag = (options = defaultOptions) => {\n  const targetRef = options.ref // the target draggable element\n  const dragStartHandlerRef = useRef<any>() // a ref to user's onDragStart handler\n  const dragHandlerRef = useRef<any>() // a ref to user's onDrag handler\n  const dragEndHandlerRef = useRef<any>() // a ref to user's onDragEnd handler\n  // the dragging state is created from a useRef rather than a useState to avoid rendering during the dragging process\n  const {current: info} = useRef<InfoType>({isDragging: false, start: [0, 0], end: [0, 0], offset: [0, 0]})\n\n  /**\n   * When the dragging starts, updates the state then perform the user's onDragStart handler if exists\n   */\n  const onDragStart = useCallback(\n    (event) => {\n      const targetTagName = event.target.tagName\n      if (\n        !info.isDragging &&\n        targetRef?.current.contains(event.target) &&\n        !DISABLED_DRAG_TAGS.includes(targetTagName)\n      ) {\n        info.isDragging = true\n        info.end = [0, 0]\n        info.offset = [0, 0]\n        info.start = getEventCoordinates(event)\n\n        if (dragStartHandlerRef.current) {\n          dragStartHandlerRef.current(event, {...info})\n        }\n      }\n    },\n    [targetRef, info, dragStartHandlerRef]\n  )\n\n  /**\n   * Whilst dragging the element, updates the state then perform the user's onDrag handler if exists\n   */\n  // eslint-disable-next-line\n  const onDrag = useCallback(\n    throttle((event) => {\n      if (info.isDragging) {\n        info.offset = [info.start[0] - event.clientX, info.start[1] - event.clientY]\n\n        if (dragHandlerRef.current) {\n          dragHandlerRef.current(event, {...info})\n        }\n      }\n    }, options.throttleBy),\n    [targetRef, info, dragHandlerRef]\n    )\n\n  /**\n   * When the dragging ends, updates the state then perform the user's onDragEnd handler if exists\n   */\n  const onDragEnd = useCallback(\n    (event) => {\n      if (info.isDragging) {\n        info.isDragging = false\n        info.end = getEventCoordinates(event)\n\n        if (dragEndHandlerRef.current) {\n          dragEndHandlerRef.current(event, {...info})\n        }\n      }\n    },\n    [info, dragEndHandlerRef]\n  )\n\n  /**\n   * When the layout renders the target item, assign the dragging events\n   */\n  useEffect(() => {\n    const _onDragStart = (e: any) => onDragStart(e)\n    const _onDrag = (e: any) => onDrag(e)\n    const _onDragEnd = (e: any) => onDragEnd(e)\n\n    if (targetRef?.current) {\n      targetRef.current.addEventListener('mousedown', _onDragStart)\n      document.addEventListener('mousemove', _onDrag)\n      document.addEventListener('mouseup', _onDragEnd)\n    }\n\n    return () => {\n      if (targetRef?.current) {\n        // eslint-disable-next-line\n        targetRef.current.removeEventListener('mousedown', _onDragStart)\n        document.removeEventListener('mousemove', _onDrag)\n        document.removeEventListener('mouseup', _onDragEnd)\n      }\n    }\n  }, [targetRef, onDragStart, onDrag, onDragEnd])\n\n  return {\n    ref: targetRef,\n    onDragStart: CreateCallbackRef(dragStartHandlerRef),\n    onDrag: CreateCallbackRef(dragHandlerRef),\n    onDragEnd: CreateCallbackRef(dragEndHandlerRef)\n  }\n}\n\nexport default useDrag\n","import React from 'react'\n\nimport './style.scss'\n\n\nexport interface NodeTypeHeaderProps {\n  icon: React.FC\n  label: string;\n}\n\n\nexport const NodeTypeHeader: React.FC<NodeTypeHeaderProps> = (props) => {\n  const {icon, label} = props\n\n  return (\n    <h4 className='node-header'>\n      {icon && <div className='node-header-icon'>\n        {React.createElement(icon)}\n      </div>}\n      <div className='node-header-text'>{label}</div>\n    </h4>\n  )\n}\n\nNodeTypeHeader.displayName = 'NodeTypeHeader'\n","import React from 'react'\nimport { Input } from 'antd'\n\nimport './style.scss'\nimport { INodeItemProps } from '../../types'\nimport { NodeTypeHeader } from './NodeTypeHeader'\nimport { nodesConfig } from './config'\n\nexport interface NodeTypeInputProps extends INodeItemProps<any> {\n}\n\n\nexport const NodeTypeInput: React.FC<NodeTypeInputProps> = (props) => {\n\n  const {value, onChange} = props\n  const handleInputChange = (e: any) => {\n    onChange({\n      ...value,\n      inputValue: e.target.value\n    })\n  }\n\n  return (\n    <>\n      <NodeTypeHeader icon={nodesConfig.nodeTypeInput.icon} label={nodesConfig.nodeTypeInput.label}/>\n      <Input value={value.inputValue} onChange={handleInputChange} placeholder=\"Basic usage\"/>\n    </>\n  )\n}\n\nNodeTypeInput.displayName = 'NodeTypeInput'\n","import React from 'react'\nimport { Select } from 'antd'\n\nimport './style.scss'\nimport { INodeItemProps } from '../../types'\nimport { NodeTypeHeader } from './NodeTypeHeader'\nimport { nodesConfig } from './config'\n\n\nexport interface NodeTypeSelectProps extends INodeItemProps<any> {\n\n}\n\n\nexport const NodeTypeSelect: React.FC<NodeTypeSelectProps> = ({value, onChange}) => {\n\n  function handleChange(e: string) {\n    onChange({...value, selectValue: e})\n  }\n\n\n  return (\n    <>\n      <NodeTypeHeader icon={nodesConfig.nodeTypeSelect.icon} label={nodesConfig.nodeTypeSelect.label}/>\n      <Select style={{width: 120}} value={value.selectValue} onChange={handleChange}>\n        <Select.Option value=\"jack\">Jack</Select.Option>\n        <Select.Option value=\"lucy\">Lucy</Select.Option>\n        <Select.Option value=\"disabled\" disabled>\n          Disabled\n        </Select.Option>\n        <Select.Option value=\"Yiminghe\">yiminghe</Select.Option>\n      </Select>\n    </>\n  )\n}\n\nNodeTypeSelect.displayName = 'NodeTypeSelect'\n","import React from 'react'\nimport { Button } from 'antd'\n\nimport './style.scss'\nimport { INodeItemProps } from '../../types'\nimport { NodeTypeHeader } from './NodeTypeHeader'\nimport { nodesConfig } from './config'\n\nexport interface NodeTypeButtonProps extends INodeItemProps<any> {\n}\n\nexport const NodeTypeButton: React.FC<NodeTypeButtonProps> = (props) => {\n  const {value} = props\n  // const handleInputChange = (e: any) => {\n  //   onChange({\n  //     ...value,\n  //     inputValue: e.target.value,\n  //   })\n  // }\n\n  return (\n    <>\n      <NodeTypeHeader icon={nodesConfig.nodeTypeButton.icon} label={nodesConfig.nodeTypeButton.label}/>\n      {value.buttonList.map((button: any, index: number) => (\n        <div key={index}>\n          <Button style={{width: '100%'}}>{button.text as string}</Button>\n        </div>\n      ))}\n    </>\n  )\n}\n\nNodeTypeButton.displayName = 'NodeTypeButton'\n","import { NodeTypeInput } from './NodeTypeInput'\nimport { NodeTypeSelect } from './NodeTypeSelect'\nimport { NodeTypeButton } from './NodeTypeButton'\nimport { AppleOutlined, WindowsOutlined } from '@ant-design/icons'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport const nodesConfig = {\n  nodeTypeInput: {\n    component: NodeTypeInput,\n    label: 'Input 节点',\n    icon: AppleOutlined,\n    defaultData: {\n      inputValue: 'test',\n    },\n  },\n  nodeTypeSelect: {\n    component: NodeTypeSelect,\n    label: 'Select 节点',\n    icon: WindowsOutlined,\n    defaultData: {\n      selectValue: '',\n    },\n  },\n  nodeTypeButton: {\n    component: NodeTypeButton,\n    label: 'Button 节点',\n    icon: WindowsOutlined,\n    defaultData: {\n      selectValue: '',\n    },\n  },\n}\n\nexport const nodesList = Object.entries(nodesConfig).map(([key, value]) => {\n  return {\n    ...value,\n    type: key,\n  }\n})\n\nexport const createNode = (nodeType: string, coordinates = [0, 0]) => {\n  return {\n    id: uuidv4(),\n    coordinates,\n    type: nodeType,\n    inputs: [],\n    outputs: [{ id: uuidv4(), disabled: false }],\n    data: (nodesConfig as any)[nodeType]?.defaultData || {},\n  }\n}\n","import { ICoordinateType } from '../types'\n\n// 计算 鼠标事件 相对在 diagram 画布内的坐标\nexport const calculatingCoordinates = (\n  event: MouseEvent,\n  diagramDom: HTMLDivElement | null,\n  scale: number\n): ICoordinateType => {\n  const diagramDomRect = diagramDom?.getBoundingClientRect() || { x: 0, y: 0 }\n  return [(event.clientX - diagramDomRect.x) / scale, (event.clientY - diagramDomRect.y) / scale]\n}\n\nexport const findEventTargetParentNodeId = (dom: HTMLElement | null): null | string => {\n  if (!dom) {\n    return null\n  }\n  const nodeId = dom.id\n  const isNodeDom = dom.classList.contains('diagram-node')\n  if (nodeId && isNodeDom) {\n    return nodeId\n  }\n  if (isNodeDom) {\n    return null\n  }\n  return findEventTargetParentNodeId(dom.parentElement)\n}\n\n// 检测鼠标按下的时候是否是点击在画布空白区域\nexport const checkMouseDownTargetIsDrawPanel = (event: any, panelDom: HTMLElement | null) =>\n  event.target === panelDom || event.target === panelDom?.firstChild\n\n// 碰撞检测 检测两个div 是否相交\nexport const collideCheck = (dom1: HTMLElement | null, dom2: HTMLElement | null) => {\n  if (dom1 && dom2) {\n    const rect1 = dom1.getBoundingClientRect()\n    const rect2 = dom2.getBoundingClientRect()\n    const maxX: number = Math.max(rect1.x + rect1.width, rect2.x + rect2.width)\n    const maxY: number = Math.max(rect1.y + rect1.height, rect2.y + rect2.height)\n    const minX: number = Math.min(rect1.x, rect2.x)\n    const minY: number = Math.min(rect1.y, rect2.y)\n    return maxX - minX <= rect1.width + rect2.width && maxY - minY <= rect1.height + rect2.height\n  }\n  return false\n}\n\nexport const getPathMidpoint = (pathElement: SVGPathElement): ICoordinateType => {\n  if (pathElement.getTotalLength && pathElement.getPointAtLength) {\n    const midpoint = pathElement.getTotalLength() / 2\n    const { x, y } = pathElement.getPointAtLength(midpoint)\n    return [x, y]\n  }\n\n  return [0, 0]\n}\n","import React, { useEffect, useRef } from 'react'\nimport useDrag from '../../hooks/useDrag'\nimport { ICoordinateType, IPointType } from '../../types'\nimport { calculatingCoordinates, findEventTargetParentNodeId } from '../../utils'\nimport { useDiagramCanvas, useScale } from '../Context/DiagramManager'\nimport classnames from 'classnames'\n\ninterface PortProps extends IPointType {\n  nodeId: string\n  type: 'input' | 'output'\n  index: number\n  onDragNewSegment: (id: string, from: ICoordinateType, to: ICoordinateType) => void\n  onSegmentFail: (id: string, type: string) => void\n  onSegmentConnect: (id: string, targetPort: string) => void\n  onPortMount: (id: string, dom: HTMLElement) => void\n}\n\nexport const Port: React.FC<PortProps> = React.memo((props) => {\n  const { id, isLinked, index, nodeId, onDragNewSegment, onSegmentFail, onSegmentConnect, onPortMount, type } = props\n  const canvasRef = useDiagramCanvas()\n  const scale = useScale()\n  const ref: any = useRef<React.RefObject<HTMLElement>>(null)\n  const startCoordinatesRef = useRef<ICoordinateType | undefined>()\n\n  const className = classnames('diagram-port', {\n    'type-input': type === 'input',\n    'type-output': type === 'output',\n    'is-linked': isLinked,\n  })\n\n  const { onDragStart, onDrag, onDragEnd } = useDrag({ ref, throttleBy: 15 })\n\n  onDragStart((event: MouseEvent) => {\n    event.stopImmediatePropagation()\n    event.stopPropagation()\n    if (canvasRef && ref.current) {\n      const { x: canvasX, y: canvasY } = canvasRef.getBoundingClientRect()\n      const { x, y, width, height } = ref.current.getBoundingClientRect()\n      startCoordinatesRef.current = [(x - canvasX + width / 2) / scale, (y - canvasY + height / 2) / scale]\n    }\n  })\n\n  onDrag((event: MouseEvent) => {\n    if (startCoordinatesRef.current) {\n      event.stopImmediatePropagation()\n      event.stopPropagation()\n      const to: ICoordinateType = calculatingCoordinates(event, canvasRef, scale)\n\n      onDragNewSegment(id, startCoordinatesRef.current, to)\n    }\n  })\n\n  onDragEnd((event: MouseEvent) => {\n    const targetDom = event.target as HTMLElement\n    const targetIsPort = targetDom.classList.contains('diagram-port')\n    // 如果目标元素是 port 区域 并且不是起点port\n    if (targetIsPort && targetDom.id !== id) {\n      onSegmentConnect(id, targetDom.id)\n      return\n    }\n\n    // 如果目标元素是 node 区域 并非不是起点node\n    const targetNode = findEventTargetParentNodeId(event.target as HTMLElement)\n    if (targetNode && targetNode !== nodeId) {\n      onSegmentConnect(id, targetNode)\n      return\n    }\n    // 否则在空白区域松开 释放\n    onSegmentFail && onSegmentFail(id, type)\n  })\n\n  useEffect(() => {\n    onPortMount(id, ref.current)\n  }, [id, onPortMount])\n\n  return (\n    <div className={className} id={id} ref={ref} style={{ top: index === 0 ? '45%' : `calc(45% + ${index * 18}px)` }} />\n  )\n})\n","import React from 'react'\nimport { ICoordinateType, IPointType } from '../../types'\nimport { Port } from './Port'\n\nexport interface DiagramNodePortsProps {\n  inputs: IPointType[]\n  nodeId: string\n  type: 'input' | 'output'\n  onPortMount: (id: string, dom: HTMLElement) => void\n  onDragNewSegment: (id: string, from: ICoordinateType, to: ICoordinateType) => void\n  onSegmentFail: (id: string, type: string) => void\n  onSegmentConnect: (id: string, targetPort: string) => void\n}\n\nexport const DiagramNodePorts: React.FC<DiagramNodePortsProps> = (props) => {\n  const { inputs, onPortMount, onDragNewSegment, onSegmentFail, onSegmentConnect, nodeId, type } = props\n  return (\n    <>\n      {inputs.map((port, index) => (\n        <Port\n          onPortMount={onPortMount}\n          onDragNewSegment={onDragNewSegment}\n          onSegmentFail={onSegmentFail}\n          onSegmentConnect={onSegmentConnect}\n          type={type}\n          key={port.id}\n          id={port.id}\n          index={index}\n          isLinked={port.isLinked}\n          nodeId={nodeId}\n        />\n      ))}\n    </>\n  )\n}\n\nDiagramNodePorts.displayName = 'DiagramNodePorts'\n","import React, { useEffect, useMemo, useRef } from 'react'\nimport useDrag from '../../hooks/useDrag'\nimport { INodeType, ICoordinateType } from '../../types'\nimport { nodesConfig } from '../NodeTypes/config'\nimport { isEqual } from 'lodash-es'\nimport { useScale } from '../Context/DiagramManager'\nimport { DiagramNodePorts } from './DiagramNodePorts'\nimport classnames from 'classnames'\n\ninterface DiagramNodeProps {\n  nodeInfo: INodeType\n  onNodePositionChange: (id: string, nextCoords: ICoordinateType) => void\n  onNodeValueChange: (id: string, nextNodeValue: any) => void\n  onAddHistory: (id: string, nextCoords: ICoordinateType) => void\n  onNodeMount: (id: string, dom: HTMLDivElement) => void\n  onPortMount: (id: string, dom: HTMLElement) => void\n  onDragNewSegment: (id: string, from: ICoordinateType, to: ICoordinateType) => void\n  onSegmentFail: (id: string, type: string) => void\n  onSegmentConnect: (id: string, targetPort: string) => void\n  activeNodeIds: string[]\n}\n\nexport const DiagramNode: React.FC<DiagramNodeProps> = React.memo((props) => {\n  const {\n    nodeInfo,\n    onNodeValueChange,\n    onNodePositionChange,\n    onPortMount,\n    onDragNewSegment,\n    onNodeMount,\n    onSegmentFail,\n    onSegmentConnect,\n    onAddHistory,\n    activeNodeIds,\n  } = props\n\n  const { id, coordinates, type, inputs, data, outputs } = nodeInfo\n\n  const scale = useScale()\n\n  // nodeType\n  const component = nodesConfig[type]?.component\n\n  const handleNodeDataChange = (nextNodeData: any) => {\n    onNodeValueChange(id, nextNodeData)\n  }\n\n  // 传给子组件点 Props\n  const nodeItemProps = {\n    value: data,\n    onChange: handleNodeDataChange,\n  }\n\n  const ref: any = useRef(null)\n\n  const { onDragStart, onDrag, onDragEnd } = useDrag({ throttleBy: 14, ref }) // get the drag n drop methods\n  const dragStartPoint = useRef(coordinates) // keeps the drag start point in a persistent reference\n\n  // when drag starts, save the starting coordinates into the `dragStartPoint` ref\n  onDragStart(() => {\n    dragStartPoint.current = coordinates\n  })\n\n  // whilst dragging calculates the next coordinates and perform the `onNodePositionChange` callback\n  onDrag((event: MouseEvent, info: any) => {\n    event.stopImmediatePropagation()\n    event.stopPropagation()\n    const nextCoords: ICoordinateType = [\n      dragStartPoint.current[0] - info.offset[0] / scale,\n      dragStartPoint.current[1] - info.offset[1] / scale,\n    ]\n    onNodePositionChange(id, nextCoords)\n  })\n\n  onDragEnd((event: MouseEvent) => {\n    if (!isEqual(dragStartPoint.current, coordinates)) {\n      onAddHistory(id, dragStartPoint.current)\n    }\n  })\n\n  const options = { nodeId: id, onPortMount, onDragNewSegment, onSegmentFail, onSegmentConnect }\n\n  useEffect(() => {\n    onNodeMount(id, ref.current)\n  }, [id, onNodeMount])\n\n  const className = useMemo(() => {\n    return classnames('diagram-node', {\n      active: activeNodeIds.includes(id),\n    })\n  }, [activeNodeIds, id])\n\n  return (\n    <div id={id} className={className} ref={ref} style={{ left: coordinates[0], top: coordinates[1] }}>\n      {component && React.createElement(component, nodeItemProps)}\n      <DiagramNodePorts inputs={inputs} {...options} type=\"input\" />\n      <DiagramNodePorts inputs={outputs} {...options} type=\"output\" />\n    </div>\n  )\n})\n\nDiagramNode.displayName = 'DiagramNode'\n","import React from 'react'\nimport { DiagramNode } from './DiagramNode'\nimport { ICoordinateType, INodeType } from '../../types'\n\ninterface NodesCanvasProps {\n  nodes: INodeType[]\n  onNodeMount: (id: string, dom: HTMLDivElement) => void\n  onPortMount: (id: string, dom: HTMLElement) => void\n  onDragNewSegment: (id: string, from: ICoordinateType, to: ICoordinateType) => void\n  onSegmentFail: (id: string, type: string) => void\n  onSegmentConnect: (id: string, targetPort: string) => void\n  activeNodeIds: string[]\n  onNodePositionChange: (id: string, nextCoords: ICoordinateType) => void\n  onNodeValueChange: (id: string, nextNodeValue: any) => void\n  onAddHistory: (id: string, nextCoords: ICoordinateType) => void\n}\n\nexport const NodesCanvas: React.FC<NodesCanvasProps> = React.memo((props) => {\n  const { nodes } = props\n\n  return (\n    <>\n      {nodes.map((node) => (\n        <DiagramNode nodeInfo={node} key={node.id} {...props} />\n      ))}\n    </>\n  )\n})\n\nNodesCanvas.displayName = 'NodesCanvas'\n","\nimport { ICoordinateType } from '../types'\n\nconst roundPoint = (point: ICoordinateType): ICoordinateType => [Math.floor(point[0]), Math.floor(point[1])]\n\n// 贝塞尔曲线算法\nconst makeBezierCurve = (from: ICoordinateType, to: ICoordinateType) => {\n  if (to[0] >= from[0] + 40 || Math.abs(to[1] - from[1]) <= 40) {\n    return getCubicBezierPath(from, to)\n  } else {\n    return getAdvancedCubicBezierPath(from, to)\n  }\n}\n\nconst getPointsString = (points: ICoordinateType[]) => {\n  return points.map((item) => `${item[0]},${item[1]}`).join(' ')\n}\n\n// 正向 贝塞尔曲线\nconst getCubicBezierPath = (from: ICoordinateType, to: ICoordinateType) => {\n  const controlPointForStart: ICoordinateType = [(to[0] + from[0]) / 2, from[1]]\n  const controlPointForEnd: ICoordinateType = [(to[0] + from[0]) / 2, to[1]]\n\n  return `M ${from[0]},${from[1]} C ${getPointsString([controlPointForStart, controlPointForEnd])} ${to[0]},${to[1]}`\n}\n\n// 反向 贝塞尔曲线\nconst getAdvancedCubicBezierPath = (from: ICoordinateType, to: ICoordinateType) => {\n  const midX = (from[0] + to[0]) / 2\n  const midY = (from[1] + to[1]) / 2\n\n  return `M${from[0]},${from[1]} ${from[0] + 20},${from[1]} C ${from[0] + 100},${from[1]} ${from[0] + 130},${(midY + from[1]) / 2}  ${midX},${midY} C ${midX},${midY} ${to[0] - 130},${(midY + to[1]) / 2} ${to[0] - 2},${to[1]} M ${to[0] - 2},${to[1]} ${to[0]},${to[1]}`\n}\n\n/**\n * 生成连点之间的贝塞尔曲线\n */\nconst makeSvgPath = (startPoint?: ICoordinateType, endPoint?: ICoordinateType) => {\n  if (!startPoint || !endPoint) return ''\n  const roundedStart = roundPoint(startPoint)\n  const roundedEnd = roundPoint(endPoint)\n\n  // const start = `${roundedStart[0]}, ${roundedStart[1]}`\n  // const end = `${roundedEnd[0]}, ${roundedEnd[1]}`\n\n  // return `M ${start}, ${end}`\n  return makeBezierCurve(roundedStart, roundedEnd)\n}\n\nexport default makeSvgPath\n\n\n","import React from 'react';\nimport {ICoordinateType} from \"../../types\";\n\ninterface LinkDeleteProps {\n  position: ICoordinateType\n}\n\n\nexport const LinkDelete: React.FC<LinkDeleteProps> = React.memo(({position,}) => (\n  <foreignObject x={position[0]} y={position[1]}>\n    <div className=\"bi-diagram-link-label\">\n      label\n    </div>\n  </foreignObject>\n))\n\nLinkDelete.displayName = 'LinkDelete'\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport makeSvgPath from '../../utils/makeSvgPath'\nimport { LinkDelete } from './LinkDelete'\nimport { ICoordinateType, ILinkType, INodeRefs, IPortRefs } from '../../types'\nimport { useDiagramManager } from '../Context/DiagramManager'\nimport { EntityPutType } from './LinksCanvas'\nimport { getPathMidpoint } from '../../utils'\n\n/*\n * 返回 port 或者 node 在 svg 中 的实际 坐标\n * 1. 如果找到 id 是 node 类型线，实际坐标为 x 为该 node 的 left 值，y坐标为该node 的 top + node高度的一半\n * 1. 如果找到 id 是 port 类型线，实际坐标为 x 为该 port 的 父元素 node 的 left + 点相对 node 的偏移量 +点的宽度的一半，y 轴坐标同理\n * */\nconst getEntityCoordinates = (\n  entity: EntityPutType | undefined,\n  portRefs: IPortRefs,\n  nodeRefs: INodeRefs,\n  canvasRef: HTMLDivElement | null\n): ICoordinateType | undefined => {\n  if (entity && entity.type === 'node' && nodeRefs[entity.id]) {\n    const nodeEl = nodeRefs[entity.id]\n    return [entity.coordinates[0], entity.coordinates[1] + nodeEl.offsetHeight / 2]\n  }\n\n  if (entity && portRefs && portRefs[entity.id]) {\n    const portDom = portRefs[entity.id]\n    const parentNodeCoordinates = entity.coordinates\n\n    return [\n      parentNodeCoordinates[0] + portDom.offsetLeft + portDom.offsetWidth / 2,\n      parentNodeCoordinates[1] + portDom.offsetTop + portDom.offsetHeight / 2\n    ]\n  }\n  return undefined\n}\n\ninterface LinkProps {\n  input?: EntityPutType\n  output?: EntityPutType\n  link: ILinkType\n  onDelete: (link: ILinkType) => void\n}\n\nexport const Link: React.FC<LinkProps> = React.memo((props) => {\n  const {input, output, link, onDelete} = props\n  const pathRef = useRef<SVGPathElement>(null)\n  const [labelPosition, setLabelPosition] = useState<ICoordinateType>()\n  const {canvasRef, portRefs, nodeRefs} = useDiagramManager()\n\n  /*\n   * 计算 起点的 坐标\n   * 为啥要 依赖 canvasRef 呢\n   * 因为：子节点 会比父节点 先 mount， 渲染link的时候port可能还未渲染 ，所以等 canvas层渲染完成后 重新绘制一次线\n   * */\n  const inputPoint = useMemo(() => getEntityCoordinates(input, portRefs, nodeRefs, canvasRef), [\n    input,\n    portRefs,\n    nodeRefs,\n    canvasRef\n  ])\n\n  /*\n   * 计算 终点的 坐标\n   * */\n  const outputPoint = useMemo(() => getEntityCoordinates(output, portRefs, nodeRefs, canvasRef), [\n    output,\n    portRefs,\n    nodeRefs,\n    canvasRef\n  ])\n\n  /*\n   * 根据亮点坐标生成 svg path 路径\n   * */\n  const path = useMemo(() => makeSvgPath(inputPoint, outputPoint), [inputPoint, outputPoint])\n\n  useEffect(() => {\n    if (inputPoint && outputPoint && pathRef.current) {\n      setLabelPosition(getPathMidpoint(pathRef.current))\n    }\n  }, [pathRef, inputPoint, outputPoint])\n\n  const onDoubleClick = useCallback(() => {\n    onDelete(link)\n  }, [onDelete, link])\n\n  return (\n    <g className={'diagram-link'}>\n      <path d={path} className=\"bi-link-ghost\" onDoubleClick={onDoubleClick}/>\n      <path d={path} ref={pathRef} className=\"bi-link-path\" onDoubleClick={onDoubleClick}/>\n      {labelPosition && <LinkDelete position={labelPosition}/>}\n    </g>\n  )\n})\n","import React, { useCallback } from 'react'\nimport { Link } from './Link'\nimport { ILinkType, INodeType, ICoordinateType } from '../../types'\nimport { isEqual } from 'lodash-es'\n\ninterface LinkCanvasProps {\n  nodes: INodeType[]\n  links: ILinkType[]\n  onChange: (value: ILinkType[]) => void\n}\n\n/*\n * link 起点终点 数据类型\n * */\nexport interface EntityPutType {\n  type: 'node' | 'port'\n  id: string\n  coordinates: ICoordinateType\n}\n\n/*\n * 组装 link 起点终点 的 type 类型 和 父级元素的 坐标位置\n * */\nconst findPortParentNodeInfo = (nodes: INodeType[], entityId: string): EntityPutType | undefined => {\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i]\n    if (node.id === entityId) {\n      return { type: 'node', coordinates: node.coordinates, id: entityId }\n    } else {\n      for (let j = 0; j < node.inputs.length; j++) {\n        const input = node.inputs[j]\n        if (input.id === entityId) {\n          return { type: 'port', coordinates: node.coordinates, id: entityId }\n        }\n      }\n\n      for (let k = 0; k < node.outputs.length; k++) {\n        const output = node.outputs[k]\n        if (output.id === entityId) {\n          return { type: 'port', coordinates: node.coordinates, id: entityId }\n        }\n      }\n    }\n  }\n}\n\nexport const LinksCanvas: React.FC<LinkCanvasProps> = React.memo((props) => {\n  const { nodes, onChange, links } = props\n\n  const removeFromLinksArray = useCallback(\n    (link) => {\n      if (links.length > 0 && onChange) {\n        const nextLinks = links.filter((item) => !isEqual(item, link))\n        onChange(nextLinks)\n      }\n    },\n    [links, onChange]\n  )\n\n  return (\n    <svg className=\"diagram-link-canvas\">\n      {links &&\n        links.map((link) => (\n          <Link\n            link={link}\n            input={findPortParentNodeInfo(nodes, link.input)}\n            output={findPortParentNodeInfo(nodes, link.output)}\n            onDelete={removeFromLinksArray}\n            key={`${link.input}-${link.output}`}\n          />\n        ))}\n    </svg>\n  )\n})\nLinksCanvas.displayName = 'LinksCanvas'\n","import React, { useMemo } from 'react'\nimport makeSvgPath from '../../utils/makeSvgPath'\nimport { ISegmentType } from '../../types'\n\nexport interface SegmentProps {\n  segment: ISegmentType\n}\n\nexport const Segment: React.FC<SegmentProps> = React.memo(({segment}) => {\n  const {from, to, id} = segment\n  const path = useMemo(() => makeSvgPath(from, to), [from, to])\n\n  return (\n    <svg className=\"diagram-segment-canvas\">\n      <g className=\"diagram-segment-link\" id={id}>\n        <path d={path}/>\n        <circle r=\"5\" cx={to[0]} cy={to[1]}/>\n      </g>\n    </svg>\n  )\n})\n\nSegment.displayName = 'Segment'\n\n\n","import React, { useCallback, useState, useRef } from 'react'\nimport { DiagramCanvas } from './DiagramCanvas'\nimport { NodesCanvas } from './NodesCanvas'\nimport { LinksCanvas } from './LinksCanvas'\nimport { Segment } from './Segment'\n\nimport './style.scss'\nimport { IDiagramType, ILinkType, ISegmentType, IPortRefs, INodeRefs, ITransform, ICoordinateType } from '../../types'\nimport { cloneDeep } from 'lodash-es'\n\ninterface DiagramProps {\n  value: IDiagramType\n  onChange: (value: IDiagramType, notAddHistory?: boolean) => void\n  onAddHistory: (value: IDiagramType) => void\n  transform: ITransform\n  activeNodeIds: string[]\n}\n\nexport const Diagram: React.FC<DiagramProps> = React.memo((props) => {\n  const { value, onChange, onAddHistory, transform, activeNodeIds } = props\n  const [segment, setSegment] = useState<ISegmentType | undefined>()\n  const { current: portRefs } = useRef<IPortRefs>({}) // 保存所有 Port 的 Dom 节点\n  const { current: nodeRefs } = useRef<INodeRefs>({}) // 保存所有 Node 的 Dom 节点\n\n  const handleNodePositionChange = (nodeId: string, nextCoordinates: ICoordinateType) => {\n    const nextNodes = [...value.nodes]\n    const index = nextNodes.findIndex((node) => node.id === nodeId)\n    nextNodes[index].coordinates = nextCoordinates\n    onChange({ ...value, nodes: nextNodes }, true)\n  }\n\n  const handleNodeValueChange = (nodeId: string, nextNodeValue: any) => {\n    // 需要 deepClone  历史记录 需要独立的 data\n    const nextNodes = cloneDeep(value.nodes)\n    const index = nextNodes.findIndex((node) => node.id === nodeId)\n    nextNodes[index].data = nextNodeValue\n    onChange({ ...value, nodes: nextNodes })\n  }\n\n  const handleAddHistory = (nodeId: string, nextCoordinates: ICoordinateType) => {\n    // 需要 deepClone  历史记录 需要独立的 data\n    const nextNodes = cloneDeep(value.nodes)\n    const index = nextNodes.findIndex((node) => node.id === nodeId)\n    nextNodes[index].coordinates = nextCoordinates\n    onAddHistory({ ...value, nodes: nextNodes })\n  }\n\n  // when a port is registered, save it to the local reference\n  const onPortRegister = (portId: string, portEl: HTMLElement) => {\n    portRefs[portId] = portEl\n  }\n\n  // when a node is registered, save it to the local reference\n  const onNodeRegister = (nodeId: string, nodeEl: HTMLDivElement) => {\n    // const rect = nodeEl.getBoundingClientRect()\n    nodeRefs[nodeId] = nodeEl\n  }\n\n  // when a new segment is dragged, save it to the local state\n  const onDragNewSegment = useCallback((portId, from, to) => {\n    setSegment({ id: `segment-${portId}`, from, to })\n  }, [])\n\n  // when a segment fails to connect, reset the segment state\n  const onSegmentFail = useCallback(() => {\n    setSegment(undefined)\n  }, [])\n\n  // when a segment connects, update the links schema, perform the onChange callback\n  // with the new data, then reset the segment state\n  const onSegmentConnect = (input: string, output: string) => {\n    const nextLinks = [...value.links, { input, output }]\n    onChange({ ...value, links: nextLinks })\n    setSegment(undefined)\n  }\n\n  // when links change, performs the onChange callback with the new incoming data\n  const onLinkDelete = (nextLinks: ILinkType[]) => {\n    onChange({ ...value, links: nextLinks })\n  }\n\n  return (\n    <DiagramCanvas portRefs={portRefs} nodeRefs={nodeRefs} transform={transform}>\n      <NodesCanvas\n        nodes={value.nodes}\n        onNodeMount={onNodeRegister}\n        onPortMount={onPortRegister}\n        onDragNewSegment={onDragNewSegment}\n        onSegmentFail={onSegmentFail}\n        onNodePositionChange={handleNodePositionChange}\n        onNodeValueChange={handleNodeValueChange}\n        onSegmentConnect={onSegmentConnect}\n        onAddHistory={handleAddHistory}\n        activeNodeIds={activeNodeIds}\n      />\n      <LinksCanvas nodes={value.nodes} links={value.links} onChange={onLinkDelete} />\n      {segment && <Segment segment={segment} />}\n    </DiagramCanvas>\n  )\n})\n","import { useReducer, useCallback } from 'react'\nimport { IDiagramType } from '../types'\n\n// 初始化useReducer中的state\nconst initialState = {\n  // 当我们每次添加新state时，用来储存更新前状态的数组\n  past: [],\n  // 当前的state值\n  present: null,\n  // 让我们可以用使用重做功能的，future数组\n  future: []\n}\n\n// 根据action处理state的改变\nconst reducer = (state: any, action: any) => {\n  const {past, present, future} = state\n  const {newPresent} = action\n\n  switch (action.type) {\n    case 'UNDO':\n      const previous = past[past.length - 1]\n      const newPast = past.slice(0, past.length - 1)\n\n      return {\n        past: newPast,\n        present: previous,\n        future: [present, ...future]\n      }\n    case 'REDO':\n      const next = future[0]\n      const newFuture = future.slice(1)\n\n      return {\n        past: [...past, present],\n        present: next,\n        future: newFuture\n      }\n    case 'SET':\n      return {\n        past: [...past],\n        present: newPresent,\n        future: []\n      }\n\n    case 'SET_WIDTH_HISTORY':\n      if (newPresent === present) {\n        return state\n      }\n      return {\n        past: [...past, present],\n        present: newPresent,\n        future: []\n      }\n\n    case 'ADD_A_HISTORY':\n      if (newPresent === present) {\n        return state\n      }\n      return {\n        past: [...past, newPresent],\n        present: present,\n        future: []\n      }\n\n    case 'CLEAR':\n      const {initialPresent} = action\n\n      return {\n        ...initialState,\n        present: initialPresent\n      }\n  }\n}\n\n// Hook\nexport const useHistory = (initialPresent: IDiagramType) => {\n  const [state, dispatch] = useReducer(reducer, {\n    ...initialState,\n    present: initialPresent\n  })\n\n  const canUndo = state.past.length !== 0\n  const canRedo = state.future.length !== 0\n\n  const undo = useCallback(() => {\n    if (canUndo) {\n      dispatch({type: 'UNDO'})\n    }\n  }, [canUndo, dispatch])\n\n  const redo = useCallback(() => {\n    if (canRedo) {\n      dispatch({type: 'REDO'})\n    }\n  }, [canRedo, dispatch])\n\n  // 只设置值 不追加历史记录 例如 移动 node的过程不需要记录\n  const set = useCallback((newPresent) => dispatch({type: 'SET', newPresent}), [dispatch])\n\n  // 设置值 并且追加历史记录 例如 增加删除节点，修改节点data数据等\n  const setWithHistory = useCallback((newPresent) => dispatch({type: 'SET_WIDTH_HISTORY', newPresent}), [dispatch])\n\n  // 仅追加一条历史记录不设置值 例如 节点移动后，把节点拖拽的起始位置 追加进入历史栈\n  const addAHistory = useCallback((newPresent) => dispatch({type: 'ADD_A_HISTORY', newPresent}), [dispatch])\n\n  const clear = useCallback(() => dispatch({type: 'CLEAR', initialPresent}), [dispatch, initialPresent])\n\n  return {value: state.present, set, setWithHistory, addAHistory, undo, redo, clear, canUndo, canRedo}\n}\n","import React, { useMemo } from 'react'\nimport { Button, Popover } from 'antd'\n\nimport './style.scss'\n\nexport interface ToolbarProps {\n  undo: () => void\n  redo: () => void\n  canUndo: boolean\n  canRedo: boolean\n  scale: number\n}\n\nconst scaleList = [\n  { text: '滚轮放大缩小', value: 1 },\n  { text: '空格 + 鼠标拖动', value: 2 },\n]\n\nexport const Toolbar: React.FC<ToolbarProps> = ({ undo, redo, canUndo, canRedo, scale }) => {\n  const scaleContent = useMemo(() => {\n    return (\n      <div>\n        {scaleList.map((item) => (\n          <div key={item.value} className=\"scale-item\">\n            {item.text}\n          </div>\n        ))}\n      </div>\n    )\n  }, [])\n\n  return (\n    <div className=\"toolbar\">\n      <Button disabled={!canUndo} onClick={undo}>\n        撤销\n      </Button>\n      <Button disabled={!canRedo} onClick={redo}>\n        重做\n      </Button>\n      <Popover placement=\"right\" content={scaleContent} overlayClassName=\"scale-popover\">\n        <Button>快捷键</Button>\n      </Popover>\n      <Button>{scale * 100}%</Button>\n    </div>\n  )\n}\n","import React, { useCallback } from 'react'\n\nimport './style.scss'\n\nexport interface NodeListItemProps {\n  icon: React.FC;\n  label: string;\n  type: string;\n}\n\n\nexport const NodeListItem: React.FC<NodeListItemProps> = React.memo(({icon, label, type}) => {\n\n  const handleDragStart = useCallback((event: any) => {\n    if (event.dataTransfer) {\n      event.dataTransfer.setData('nodeType', type)\n    }\n  }, [type])\n  return (\n    <div className=\"node-list-item\" draggable onDragStart={handleDragStart}>\n      {icon && React.createElement(icon)}\n      <div className=\"node-list-text\">{label}</div>\n    </div>\n  )\n})\n\nNodeListItem.displayName = 'NodeListItem'\n\n","import React from 'react'\nimport './style.scss'\nimport { NodeListItem } from './NodeListItem'\nimport { nodesList } from '../NodeTypes/config'\n\nexport interface NodeListProps {\n\n}\n\nexport const NodeList: React.FC<NodeListProps> = () => {\n\n  return (\n    <div className=\"node-list\">\n      {nodesList.map((node) =>\n        <NodeListItem key={node.type} icon={node.icon} type={node.type} label={node.label}/>\n      )}\n    </div>\n  )\n}\n\nNodeList.displayName = 'NodeList'\n","import React, { useCallback, useMemo, useRef, useState } from 'react'\nimport { Diagram } from './components/Diagram'\nimport { useHistory } from './hooks/useHistory'\nimport { Toolbar } from './components/Toolbar/Toolbar'\nimport { NodeList } from './components/NodeList/NodeList'\nimport { IDiagramType, ICoordinateType, IMousePosition, ITransform, ISelectionArea } from './types'\nimport { createNode } from './components/NodeTypes/config'\nimport { throttle } from 'lodash-es'\nimport { checkMouseDownTargetIsDrawPanel, collideCheck } from './utils'\n\n// const manyNode = new Array(100).fill({}).map()\n\nconst defaultValue: IDiagramType = {\n  nodes: [\n    {\n      id: 'node-1',\n      coordinates: [100, 150],\n      inputs: [],\n      outputs: [{id: 'port-1', isLinked: true}],\n      type: 'nodeTypeInput',\n      data: {\n        inputValue: 'defaultValue'\n      }\n    },\n    {\n      id: 'node-2',\n      type: 'nodeTypeSelect',\n      coordinates: [400, 200],\n      inputs: [{id: 'input-1', isLinked: false}],\n      outputs: [{id: 'port-5', isLinked: false}],\n      data: {\n        selectValue: ''\n      }\n    },\n    {\n      id: 'node-3',\n      type: 'nodeTypeButton',\n      coordinates: [700, 300],\n      inputs: [],\n      outputs: [\n        {id: 'port-6', isLinked: false},\n        {id: 'port-7', isLinked: false}\n      ],\n      data: {\n        buttonList: [\n          {text: 'button-1', id: 'port-6'},\n          {text: 'button-2', id: 'port-7'}\n        ]\n      }\n    }\n  ],\n  links: [{input: 'port-1', output: 'node-2'}]\n}\n\nconst SCALE_STEP = 0.1\n\nconst DRAG_STATE = {\n  DEFAULT: 'DEFAULT',\n  START: 'START',\n  MOVE: 'MOVE',\n  END: 'END',\n  SELECTION: 'SELECTION'\n}\n\nconst CURSOR_MAP = {\n  [DRAG_STATE.DEFAULT]: 'default',\n  [DRAG_STATE.SELECTION]: 'default',\n  [DRAG_STATE.START]: 'grab',\n  [DRAG_STATE.MOVE]: 'grabbing'\n}\n\nfunction DiagramPanel() {\n  const {value, set, setWithHistory, addAHistory, undo, redo, canUndo, canRedo} = useHistory(defaultValue)\n  const [transform, setTransform] = useState<ITransform>({\n    scale: 1,\n    translateX: 0,\n    translateY: 0\n  })\n  const [selectionArea, setSelectionArea] = useState<ISelectionArea | undefined>()\n  const [dragState, setDragState] = useState<string>(DRAG_STATE.DEFAULT)\n  const mouseDownStartPosition = useRef<IMousePosition | undefined>()\n  const [activeNodeIds, setActiveNodeIds] = useState<string[]>([])\n\n  const scaleRef = useRef<number>(1)\n  const panelRef = useRef<HTMLDivElement>(null)\n  const selectionAreaRef = useRef<HTMLDivElement>(null)\n\n  const handleChange = useCallback(\n    (newValue: IDiagramType, notAddHistory?: boolean) => {\n      if (notAddHistory) {\n        set(newValue)\n      } else {\n        setWithHistory(newValue)\n      }\n    },\n    [set, setWithHistory]\n  )\n\n  const handleAddHistory = useCallback(\n    (newValue: IDiagramType) => {\n      addAHistory(newValue)\n    },\n    [addAHistory]\n  )\n\n  const handleDrop = useCallback(\n    (event: any) => {\n      if (event) {\n        event = window.event\n      }\n      const nodeType = event.dataTransfer.getData('nodeType')\n      const x = event.clientX\n      const y = event.clientY\n\n      const diagramCanvasRect = document.getElementById('diagram-canvas')?.getBoundingClientRect() || {x: 0, y: 0}\n\n      const coordinates: ICoordinateType = [\n        (x - diagramCanvasRect.x) / transform.scale,\n        (y - diagramCanvasRect.y) / transform.scale\n      ]\n      const newNode = createNode(nodeType, coordinates)\n      handleChange({...value, nodes: [...value.nodes, newNode]})\n    },\n    [handleChange, transform, value]\n  )\n\n  const handleDrag = useCallback((e: any) => {\n    e.preventDefault()\n  }, [])\n\n  const handleWheel = useCallback(\n    (event: any) => {\n      if (!event) event = window.event\n      const wheelDelta = event.nativeEvent.wheelDelta\n\n      let {scale, translateX, translateY} = transform\n      let newScale = scaleRef.current\n\n      const mouseX = (event.clientX - translateX) / scale\n      const mouseY = (event.clientY - translateY) / scale\n\n      if (wheelDelta < 0) {\n        newScale = newScale - SCALE_STEP\n        translateX = translateX + mouseX * SCALE_STEP\n        translateY = translateY + mouseY * SCALE_STEP\n      }\n      if (wheelDelta > 0) {\n        newScale = newScale + SCALE_STEP\n        translateX = translateX - mouseX * SCALE_STEP\n        translateY = translateY - mouseY * SCALE_STEP\n      }\n\n      if (newScale > 1 || newScale < 0.1) return\n      scaleRef.current = Number(newScale.toFixed(2))\n\n      setTransform({\n        scale: scaleRef.current,\n        translateX,\n        translateY\n      })\n    },\n    [transform]\n  )\n\n  const handleMouseDown = useCallback(\n    (event) => {\n      mouseDownStartPosition.current = {\n        x: event.clientX,\n        y: event.clientY\n      }\n      if (checkMouseDownTargetIsDrawPanel(event, panelRef.current)) {\n        if (dragState === DRAG_STATE.START) {\n          setDragState(DRAG_STATE.MOVE)\n        } else {\n          setDragState(DRAG_STATE.SELECTION)\n        }\n      }\n    },\n    [dragState]\n  )\n\n  // eslint-disable-next-line\n  const handleThrottleSetSelectionArea = useCallback(\n    throttle((e) => {\n      if (mouseDownStartPosition.current && panelRef.current) {\n        const panelRect = panelRef.current.getBoundingClientRect()\n        setSelectionArea({\n          left: Math.min(e.clientX, mouseDownStartPosition.current.x) - panelRect.x,\n          top: Math.min(e.clientY, mouseDownStartPosition.current.y) - panelRect.y,\n          width: Math.abs(e.clientX - mouseDownStartPosition.current.x),\n          height: Math.abs(e.clientY - mouseDownStartPosition.current.y)\n        })\n        const selectAreaDom = selectionAreaRef.current\n        const activeNodeIds = (value as IDiagramType).nodes\n          .map((v) => v.id)\n          .filter((id) => {\n            return collideCheck(selectAreaDom, document.getElementById(id))\n          })\n\n        setActiveNodeIds(activeNodeIds)\n      }\n    }, 20),\n    [transform, value]\n  )\n\n  const handleMouseUp = useCallback(\n    (event) => {\n      if (dragState === DRAG_STATE.MOVE) {\n        setDragState(DRAG_STATE.START)\n      } else {\n        setDragState(DRAG_STATE.DEFAULT)\n      }\n      setSelectionArea(undefined)\n      mouseDownStartPosition.current = undefined\n    },\n    [dragState]\n  )\n\n  // eslint-disable-next-line\n  const handleThrottleSetTransform = useCallback(\n    throttle((e) => {\n      if (mouseDownStartPosition.current) {\n        setTransform({\n          ...transform,\n          translateX: e.clientX - mouseDownStartPosition.current.x + transform.translateX,\n          translateY: e.clientY - mouseDownStartPosition.current.y + transform.translateY\n        })\n      }\n    }, 20),\n    [transform, setTransform]\n  )\n\n  const handleMouseMove = useCallback(\n    (event) => {\n      if (dragState === DRAG_STATE.MOVE) {\n        handleThrottleSetTransform(event)\n      }\n      if (dragState === DRAG_STATE.SELECTION) {\n        handleThrottleSetSelectionArea(event)\n      }\n    },\n    [dragState, handleThrottleSetSelectionArea, handleThrottleSetTransform]\n  )\n\n  const handleKeyDown = useCallback(\n    (event) => {\n      if (event.keyCode === 32 && dragState === DRAG_STATE.DEFAULT) {\n        setDragState(DRAG_STATE.START)\n      }\n    },\n    [dragState]\n  )\n\n  const handleKeyUp = useCallback((event) => {\n    if (event.keyCode === 32) {\n      setDragState(DRAG_STATE.DEFAULT)\n    }\n  }, [])\n\n  const cursor = useMemo(() => {\n    return CURSOR_MAP[dragState]\n  }, [dragState])\n\n  const hideSelectionArea = useMemo(() => dragState !== DRAG_STATE.SELECTION, [dragState])\n\n  const selectionAreaStyled = useMemo(() => ({\n    left: selectionArea?.left,\n    top: selectionArea?.top,\n    width: selectionArea?.width,\n    height: selectionArea?.height\n  }), [selectionArea])\n\n  return (\n    <div\n      ref={panelRef}\n      className=\"diagram-panel\"\n      onDrop={handleDrop}\n      onDragEnter={handleDrag}\n      onDragOver={handleDrag}\n      tabIndex={1}\n      onWheel={handleWheel}\n      onMouseDown={handleMouseDown}\n      onMouseMove={handleMouseMove}\n      onMouseUp={handleMouseUp}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      style={{cursor}}\n    >\n      <Diagram\n        value={value}\n        transform={transform}\n        onChange={handleChange}\n        onAddHistory={handleAddHistory}\n        activeNodeIds={activeNodeIds}\n      />\n      <NodeList/>\n      <Toolbar undo={undo} redo={redo} canUndo={canUndo} scale={transform.scale} canRedo={canRedo}/>\n      <div\n        ref={selectionAreaRef}\n        className=\"diagram-selection-area\"\n        hidden={hideSelectionArea}\n        style={selectionAreaStyled}\n      />\n    </div>\n  )\n}\n\nexport default DiagramPanel\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport DiagramPanel from './DiagramPanel'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <DiagramPanel/>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}