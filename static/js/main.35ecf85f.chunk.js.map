{"version":3,"sources":["components/Context/DiagramManager.ts","components/Diagram/DiagramCanvas.tsx","hooks/useDrag.ts","components/NodeTypes/NodeTypeHeader.tsx","components/NodeTypes/NodeTypeInput.tsx","components/NodeTypes/NodeTypeSelect.tsx","components/NodeTypes/NodeTypeButton.tsx","components/NodeTypes/config.ts","utils/index.ts","components/Diagram/Port.tsx","components/Diagram/DiagramNodePorts.tsx","components/Diagram/DiagramNodeActionButtons.tsx","components/Diagram/DiagramNode.tsx","components/Diagram/NodesCanvas.tsx","utils/makeSvgPath.ts","components/Diagram/LinkDelete.tsx","components/Diagram/Link.tsx","components/Diagram/LinksCanvas.tsx","components/Diagram/Segment.tsx","hooks/useEventCallback.ts","components/Diagram/index.tsx","hooks/useHistory.ts","components/Toolbar/Toolbar.tsx","components/NodeList/NodeListItem.tsx","components/NodeList/NodeList.tsx","DiagramPanel.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultValue","canvasRef","portRefs","nodeRefs","scale","DiagramManagerContext","createContext","DiagramManagerProvider","Provider","useScale","useContext","DiagramCanvas","React","memo","props","children","transform","translateX","translateY","useState","canvasDom","setBoundingBox","useRef","useEffect","current","contextValue","useMemo","id","className","ref","style","value","displayName","DISABLED_DRAG_TAGS","defaultOptions","throttleBy","getEventCoordinates","event","clientX","clientY","CreateCallbackRef","useCallback","callback","useDrag","options","targetRef","dragStartHandlerRef","dragHandlerRef","dragEndHandlerRef","isDragging","start","end","offset","info","onDragStart","targetTagName","target","tagName","contains","includes","onDrag","throttle","onDragEnd","_onDragStart","e","_onDrag","_onDragEnd","addEventListener","document","removeEventListener","NodeTypeHeader","icon","label","createElement","NodeTypeInput","onChange","nodesConfig","nodeTypeInput","inputValue","placeholder","NodeTypeSelect","nodeTypeSelect","width","selectValue","Option","disabled","NodeTypeButton","nodeTypeButton","buttonList","map","button","index","text","NodeTypes","component","AppleOutlined","WindowsOutlined","GithubOutlined","nodesList","Object","entries","key","type","findEventTargetParentNodeId","dom","nodeId","isNodeDom","classList","parentElement","findIndexById","nodes","findIndex","node","Port","isLinked","onDragNewSegment","onSegmentFail","onSegmentConnect","onPortMount","startCoordinatesRef","classnames","stopImmediatePropagation","stopPropagation","getBoundingClientRect","canvasX","x","canvasY","y","height","to","diagramDom","diagramDomRect","calculatingCoordinates","targetDom","targetNode","top","DiagramNodePorts","inputs","port","DiagramNodeActionButtons","onNodeDelete","onNodeCopy","handleNodeDelete","handleNodeCopy","onClick","CopyOutlined","DeleteOutlined","DiagramNode","nodeInfo","onNodeValueChange","onNodePositionChange","onNodeMount","onAddHistory","activeNodeIds","coordinates","data","outputs","nodeItemProps","nextNodeData","dragStartPoint","nextCoords","isEqual","active","left","NodesCanvas","others","roundPoint","point","Math","floor","getCubicBezierPath","from","points","controlPointForStart","controlPointForEnd","item","join","getAdvancedCubicBezierPath","midX","midY","makeSvgPath","startPoint","endPoint","roundedStart","roundedEnd","LinkDelete","position","onDelete","Link","input","output","link","pathRef","labelPosition","setLabelPosition","path","pathElement","getTotalLength","getPointAtLength","midpoint","getPathMidpoint","handleDelete","d","prev","next","findPortCoordinate","nodeCoordinates","ports","entityId","j","length","portDom","offsetLeft","offsetWidth","offsetTop","offsetHeight","computedLinkCoordinate","i","nodeEl","inputRes","outputRes","LinksCanvas","links","result","res","forEach","startCoordinates","endCoordinates","push","Segment","segment","r","cx","cy","useEventCallback","fn","useLayoutEffect","Diagram","setSegment","handleNodePositionChange","nextCoordinates","nextNodes","handleNodeValueChange","nextNodeValue","handleAddHistory","newNode","originNode","nodeData","cloneDeep","uuidv4","distance","offsetCoordinates","copyNode","currentNode","nodeOutputs","nodeInputs","splice","nextLinks","filter","onPortRegister","portId","portEl","onNodeRegister","undefined","onLinkDelete","initialState","past","present","future","reducer","state","action","newPresent","previous","slice","newFuture","initialPresent","scaleList","Toolbar","undo","redo","canUndo","canRedo","scaleContent","placement","content","overlayClassName","NodeListItem","handleDragStart","dataTransfer","setData","draggable","NodeList","Array","fill","SCALE_STEP","DRAG_STATE","CURSOR_MAP","DiagramPanel","useReducer","dispatch","set","setWithHistory","addAHistory","clear","useHistory","setTransform","selectionArea","setSelectionArea","dragState","setDragState","mouseDownStartPosition","setActiveNodeIds","panelRef","selectionAreaRef","handleThrottleSetTransform","handleChange","newValue","notAddHistory","handleDrop","window","nodeType","getData","diagramCanvasRect","getElementById","coordinate","buttonData","createNode","handleDrag","preventDefault","handleWheel","wheelDelta","nativeEvent","offsetX","offsetY","Number","toFixed","handleMouseDown","relativeX","relativeY","panelDom","firstChild","checkMouseDownTargetIsDrawPanel","handleThrottleSetSelectionArea","panelRect","min","abs","selectAreaDom","v","dom1","dom2","rect1","rect2","maxX","max","maxY","minX","minY","collideCheck","handleMouseUp","handleMouseMove","handleKeyDown","keyCode","handleKeyUp","cursor","hideSelectionArea","selectionAreaStyled","onDrop","onDragEnter","onDragOver","tabIndex","onWheel","onMouseDown","onMouseMove","onMouseUp","onKeyDown","onKeyUp","hidden","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.35ecf85f.chunk.js","sourcesContent":["import { createContext, useContext } from 'react'\nimport { IPortRefs, INodeRefs } from '../../types'\n\nexport interface DiagramManager {\n  canvasRef: HTMLDivElement | null\n  portRefs: IPortRefs\n  nodeRefs: INodeRefs\n  scale: number\n}\n\nconst defaultValue: DiagramManager = { canvasRef: null, portRefs: {}, nodeRefs: {}, scale: 1 }\n\nconst DiagramManagerContext = createContext(defaultValue)\n\nexport const DiagramManagerProvider = DiagramManagerContext.Provider\n\n// export DiagramManager Context\nexport const useDiagramManager = (): DiagramManager => {\n  return useContext(DiagramManagerContext)\n}\n\n// export DiagramCanvas Context\nexport const useDiagramCanvas = (): HTMLDivElement | null => {\n  const { canvasRef } = useContext(DiagramManagerContext)\n  return canvasRef\n}\n\n// return  DiagramNod dom 节点\nexport const useDiagramNodeRefs = (): INodeRefs => {\n  const { nodeRefs } = useContext(DiagramManagerContext)\n  return nodeRefs\n}\n\n// return  DiagramNodePorts ports 节点\nexport const usePortRefs = (): IPortRefs => {\n  const { portRefs } = useContext(DiagramManagerContext)\n  return portRefs\n}\n\n// return scale\nexport const useScale = (): number => {\n  const { scale } = useContext(DiagramManagerContext)\n  return scale\n}\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { DiagramManagerProvider } from '../Context/DiagramManager'\nimport { IPortRefs, INodeRefs, ITransform } from '../../types'\n\ninterface DiagramCanvasProps {\n  portRefs: IPortRefs\n  nodeRefs: INodeRefs\n  transform: ITransform\n}\n\nexport const DiagramCanvas: React.FC<DiagramCanvasProps> = React.memo((props) => {\n  const { children, portRefs, nodeRefs, transform } = props\n  const { scale, translateX, translateY } = transform\n\n  const [canvasDom, setBoundingBox] = useState<HTMLDivElement | null>(null)\n  const canvasRef = useRef<HTMLDivElement>(null)\n\n  // 储存 canvas dom\n  useEffect(() => {\n    setBoundingBox(canvasRef.current)\n  }, [])\n\n  const contextValue = useMemo(\n    () => ({\n      canvasRef: canvasDom,\n      portRefs,\n      nodeRefs,\n      scale,\n    }),\n    [canvasDom, portRefs, nodeRefs, scale]\n  )\n\n  return (\n    <div\n      id=\"diagram-canvas\"\n      className=\"diagram-canvas\"\n      ref={canvasRef}\n      // style={{ transform: `translate(${translate.x}px, ${translate.y}px) scale(${scale})` }}\n      style={{ transform: `matrix(${scale},0,0,${scale},${translateX},${translateY})` }}\n    >\n      <DiagramManagerProvider value={contextValue}>{children}</DiagramManagerProvider>\n    </div>\n  )\n})\n\nDiagramCanvas.displayName = 'DiagramCanvas'\n","import { throttle } from 'lodash-es'\nimport { useRef, useCallback, useEffect } from 'react'\nimport { ICoordinateType } from '../types'\n\nconst DISABLED_DRAG_TAGS = ['INPUT', 'TEXTAREA']\n\ninterface DefaultOptions {\n  ref: React.RefObject<any> | null\n  throttleBy: number\n}\n\ninterface InfoType {\n  isDragging: boolean\n  start: ICoordinateType\n  end: ICoordinateType\n  offset: ICoordinateType\n}\n\nconst defaultOptions: DefaultOptions = {\n  ref: null,\n  throttleBy: 0,\n}\n\nconst getEventCoordinates = (event: MouseEvent): ICoordinateType => [event.clientX, event.clientY]\n\n/**\n * 创建一个持久回调引用\n * @param ref\n * @returns {Function}\n */\nconst CreateCallbackRef = (ref: any) =>\n  useCallback(\n    (callback) => {\n      if (!ref.current || callback !== ref.current) {\n        ref.current = callback\n      }\n    },\n    [ref]\n  )\n\nconst useDrag = (options = defaultOptions) => {\n  const targetRef = options.ref\n  const dragStartHandlerRef = useRef<any>()\n  const dragHandlerRef = useRef<any>()\n  const dragEndHandlerRef = useRef<any>()\n  const { current: info } = useRef<InfoType>({ isDragging: false, start: [0, 0], end: [0, 0], offset: [0, 0] })\n\n  const onDragStart = useCallback(\n    (event) => {\n      const targetTagName = event.target.tagName\n      if (\n        !info.isDragging &&\n        targetRef?.current.contains(event.target) &&\n        !DISABLED_DRAG_TAGS.includes(targetTagName)\n      ) {\n        info.isDragging = true\n        info.end = [0, 0]\n        info.offset = [0, 0]\n        info.start = getEventCoordinates(event)\n\n        if (dragStartHandlerRef.current) {\n          dragStartHandlerRef.current(event, { ...info })\n        }\n      }\n    },\n    [targetRef, info, dragStartHandlerRef]\n  )\n\n  // eslint-disable-next-line\n  const onDrag = useCallback(\n    throttle((event) => {\n      if (info.isDragging) {\n        info.offset = [event.clientX - info.start[0], event.clientY - info.start[1]]\n\n        if (dragHandlerRef.current) {\n          dragHandlerRef.current(event, { ...info })\n        }\n      }\n    }, options.throttleBy),\n    [targetRef, info, dragHandlerRef]\n  )\n\n  const onDragEnd = useCallback(\n    (event) => {\n      if (info.isDragging) {\n        info.isDragging = false\n        info.end = getEventCoordinates(event)\n\n        if (dragEndHandlerRef.current) {\n          dragEndHandlerRef.current(event, { ...info })\n        }\n      }\n    },\n    [info, dragEndHandlerRef]\n  )\n\n  useEffect(() => {\n    const _onDragStart = (e: any) => onDragStart(e)\n    const _onDrag = (e: any) => onDrag(e)\n    const _onDragEnd = (e: any) => onDragEnd(e)\n\n    if (targetRef?.current) {\n      targetRef.current.addEventListener('mousedown', _onDragStart)\n      document.addEventListener('mousemove', _onDrag)\n      document.addEventListener('mouseup', _onDragEnd)\n    }\n\n    return () => {\n      if (targetRef?.current) {\n        // eslint-disable-next-line\n        targetRef.current.removeEventListener('mousedown', _onDragStart)\n        document.removeEventListener('mousemove', _onDrag)\n        document.removeEventListener('mouseup', _onDragEnd)\n      }\n    }\n  }, [targetRef, onDragStart, onDrag, onDragEnd])\n\n  return {\n    ref: targetRef,\n    onDragStart: CreateCallbackRef(dragStartHandlerRef),\n    onDrag: CreateCallbackRef(dragHandlerRef),\n    onDragEnd: CreateCallbackRef(dragEndHandlerRef),\n  }\n}\n\nexport default useDrag\n","import React from 'react'\n\nimport './style.scss'\n\n\nexport interface NodeTypeHeaderProps {\n  icon: React.FC\n  label: string;\n}\n\n\nexport const NodeTypeHeader: React.FC<NodeTypeHeaderProps> = (props) => {\n  const {icon, label} = props\n\n  return (\n    <h4 className='node-header'>\n      {icon && <div className='node-header-icon'>\n        {React.createElement(icon)}\n      </div>}\n      <div className='node-header-text'>{label}</div>\n    </h4>\n  )\n}\n\nNodeTypeHeader.displayName = 'NodeTypeHeader'\n","import React from 'react'\nimport { Input } from 'antd'\n\nimport './style.scss'\nimport { INodeItemProps } from '../../types'\nimport { NodeTypeHeader } from './NodeTypeHeader'\nimport { nodesConfig } from './config'\n\nexport interface NodeTypeInputProps extends INodeItemProps<any> {\n}\n\n\nexport const NodeTypeInput: React.FC<NodeTypeInputProps> = (props) => {\n\n  const {value, onChange} = props\n  const handleInputChange = (e: any) => {\n    onChange({\n      ...value,\n      inputValue: e.target.value\n    })\n  }\n\n  return (\n    <>\n      <NodeTypeHeader icon={nodesConfig.nodeTypeInput.icon} label={nodesConfig.nodeTypeInput.label}/>\n      <Input value={value.inputValue} onChange={handleInputChange} placeholder=\"Basic usage\"/>\n    </>\n  )\n}\n\nNodeTypeInput.displayName = 'NodeTypeInput'\n","import React from 'react'\nimport { Select } from 'antd'\n\nimport './style.scss'\nimport { INodeItemProps } from '../../types'\nimport { NodeTypeHeader } from './NodeTypeHeader'\nimport { nodesConfig } from './config'\n\n\nexport interface NodeTypeSelectProps extends INodeItemProps<any> {\n\n}\n\n\nexport const NodeTypeSelect: React.FC<NodeTypeSelectProps> = ({value, onChange}) => {\n\n  function handleChange(e: string) {\n    onChange({...value, selectValue: e})\n  }\n\n\n  return (\n    <>\n      <NodeTypeHeader icon={nodesConfig.nodeTypeSelect.icon} label={nodesConfig.nodeTypeSelect.label}/>\n      <Select style={{width: 120}} value={value.selectValue} onChange={handleChange}>\n        <Select.Option value=\"jack\">Jack</Select.Option>\n        <Select.Option value=\"lucy\">Lucy</Select.Option>\n        <Select.Option value=\"disabled\" disabled>\n          Disabled\n        </Select.Option>\n        <Select.Option value=\"Yiminghe\">yiminghe</Select.Option>\n      </Select>\n    </>\n  )\n}\n\nNodeTypeSelect.displayName = 'NodeTypeSelect'\n","import React from 'react'\nimport { Button } from 'antd'\n\nimport './style.scss'\nimport { INodeItemProps } from '../../types'\nimport { NodeTypeHeader } from './NodeTypeHeader'\nimport { nodesConfig } from './config'\n\nexport interface NodeTypeButtonProps extends INodeItemProps<any> {\n}\n\nexport const NodeTypeButton: React.FC<NodeTypeButtonProps> = (props) => {\n  const {value} = props\n  // const handleInputChange = (e: any) => {\n  //   onChange({\n  //     ...value,\n  //     inputValue: e.target.value,\n  //   })\n  // }\n\n  return (\n    <>\n      <NodeTypeHeader icon={nodesConfig.nodeTypeButton.icon} label={nodesConfig.nodeTypeButton.label}/>\n      {value.buttonList.map((button: any, index: number) => (\n        <div key={index}>\n          <Button style={{width: '100%'}}>{button.text as string}</Button>\n        </div>\n      ))}\n    </>\n  )\n}\n\nNodeTypeButton.displayName = 'NodeTypeButton'\n","import { NodeTypeInput } from './NodeTypeInput'\nimport { NodeTypeSelect } from './NodeTypeSelect'\nimport { NodeTypeButton } from './NodeTypeButton'\nimport { AppleOutlined, WindowsOutlined, GithubOutlined } from '@ant-design/icons'\nimport { v4 as uuidv4 } from 'uuid'\nimport { ICoordinateType, INodeType, NodeTypeEnum } from '../../types'\nimport { cloneDeep } from 'lodash-es'\n\nexport enum NodeTypes {\n  nodeTypeInput = 'nodeTypeInput',\n  nodeTypeSelect = 'nodeTypeSelect',\n  nodeTypeButton = 'nodeTypeButton'\n}\n\nexport const nodesConfig = {\n  [NodeTypes.nodeTypeInput]: {\n    component: NodeTypeInput,\n    label: 'Input 节点',\n    icon: AppleOutlined\n  },\n  [NodeTypes.nodeTypeSelect]: {\n    component: NodeTypeSelect,\n    label: 'Select 节点',\n    icon: WindowsOutlined\n  },\n  [NodeTypes.nodeTypeButton]: {\n    component: NodeTypeButton,\n    label: 'Button 节点',\n    icon: GithubOutlined\n  }\n}\n\nexport const nodesList = Object.entries(nodesConfig).map(([key, value]) => {\n  return {\n    ...value,\n    type: key\n  }\n})\n\nexport const createNode = (nodeType: NodeTypeEnum, coordinate: ICoordinateType): INodeType => {\n  let nodeData: INodeType = {\n    id: uuidv4(),\n    coordinates: coordinate,\n    type: nodeType,\n    inputs: [],\n    outputs: [],\n    data: {}\n  }\n  switch (nodeType) {\n    case NodeTypes.nodeTypeInput:\n      nodeData = {\n        ...nodeData,\n        outputs: [{id: uuidv4(), isLinked: false}],\n        data: {\n          inputValue: 'test'\n        }\n      }\n\n      break\n    case NodeTypes.nodeTypeSelect:\n      nodeData = {\n        ...nodeData,\n        outputs: [{id: uuidv4(), isLinked: false}],\n        data: {\n          inputValue: ''\n        }\n      }\n      break\n    case NodeTypes.nodeTypeButton:\n      const buttonData = {\n        buttonList: [\n          {text: 'button-1', id: uuidv4()},\n          {text: 'button-2', id: uuidv4()}\n        ]\n      }\n      const outputs = buttonData.buttonList.map((item: any) => ({\n        id: item.id,\n        isLinked: false\n      }))\n      nodeData = {\n        ...nodeData,\n        outputs: outputs,\n        data: buttonData\n      }\n      break\n  }\n\n  return nodeData\n}\n\nconst offsetCoordinates = (coordinates: ICoordinateType, distance = 0): ICoordinateType => [coordinates[0] + distance, coordinates[1] + distance]\n\nexport const copyNode = (originNode: INodeType): INodeType => {\n  const nodeData = cloneDeep(originNode)\n  nodeData.id = uuidv4()\n  nodeData.coordinates = offsetCoordinates(nodeData.coordinates, 20)\n  switch (nodeData.type) {\n    case NodeTypes.nodeTypeInput:\n      nodeData.outputs.forEach((output) => {\n        output.id = uuidv4()\n        output.isLinked = false\n      })\n      break\n    case NodeTypes.nodeTypeSelect:\n      nodeData.outputs.forEach((output) => {\n        output.id = uuidv4()\n        output.isLinked = false\n      })\n      break\n    case NodeTypes.nodeTypeButton:\n      nodeData.data.buttonList.forEach((item: any) => {\n        item.id = uuidv4()\n      })\n      nodeData.outputs = nodeData.data.buttonList.map((item: any) => ({\n        id: item.id,\n        isLinked: false\n      }))\n\n      break\n  }\n\n  return nodeData\n}\n","import { ICoordinateType, INodeType } from '../types'\n\n// 计算 鼠标事件 相对在 diagram 画布内的坐标\nexport const calculatingCoordinates = (\n  event: MouseEvent,\n  diagramDom: HTMLDivElement | null,\n  scale: number\n): ICoordinateType => {\n  const diagramDomRect = diagramDom?.getBoundingClientRect() || {x: 0, y: 0}\n  return [(event.clientX - diagramDomRect.x) / scale, (event.clientY - diagramDomRect.y) / scale]\n}\n\nexport const findEventTargetParentNodeId = (dom: HTMLElement | null): null | string => {\n  if (!dom) {\n    return null\n  }\n  const nodeId = dom.id\n  const isNodeDom = dom.classList.contains('diagram-node')\n  if (nodeId && isNodeDom) {\n    return nodeId\n  }\n  if (isNodeDom) {\n    return null\n  }\n  return findEventTargetParentNodeId(dom.parentElement)\n}\n\n// 检测鼠标按下的时候是否是点击在画布空白区域\nexport const checkMouseDownTargetIsDrawPanel = (event: any, panelDom: HTMLElement | null) =>\n  event.target === panelDom || event.target === panelDom?.firstChild\n\n// 碰撞检测 检测两个div 是否相交\nexport const collideCheck = (dom1: HTMLElement | null, dom2: HTMLElement | null) => {\n  if (dom1 && dom2) {\n    const rect1 = dom1.getBoundingClientRect()\n    const rect2 = dom2.getBoundingClientRect()\n    const maxX: number = Math.max(rect1.x + rect1.width, rect2.x + rect2.width)\n    const maxY: number = Math.max(rect1.y + rect1.height, rect2.y + rect2.height)\n    const minX: number = Math.min(rect1.x, rect2.x)\n    const minY: number = Math.min(rect1.y, rect2.y)\n    return maxX - minX <= rect1.width + rect2.width && maxY - minY <= rect1.height + rect2.height\n  }\n  return false\n}\n\nexport const getPathMidpoint = (pathElement: SVGPathElement): ICoordinateType => {\n  if (pathElement.getTotalLength && pathElement.getPointAtLength) {\n    const midpoint = pathElement.getTotalLength() / 2\n    const {x, y} = pathElement.getPointAtLength(midpoint)\n    return [x, y]\n  }\n\n  return [0, 0]\n}\n\n\nexport const findIndexById = (nodeId: string, nodes: INodeType[]) => nodes.findIndex((node) => node.id === nodeId)\n","import React, { useEffect, useRef } from 'react'\nimport useDrag from '../../hooks/useDrag'\nimport { ICoordinateType, IPointType } from '../../types'\nimport { calculatingCoordinates, findEventTargetParentNodeId } from '../../utils'\nimport { useDiagramCanvas, useScale } from '../Context/DiagramManager'\nimport classnames from 'classnames'\n\ninterface PortProps extends IPointType {\n  nodeId: string\n  type: 'input' | 'output'\n  index: number\n  onDragNewSegment: (id: string, from: ICoordinateType, to: ICoordinateType) => void\n  onSegmentFail: (id: string, type: string) => void\n  onSegmentConnect: (id: string, targetPort: string) => void\n  onPortMount: (id: string, dom: HTMLElement) => void\n}\n\nexport const Port: React.FC<PortProps> = React.memo((props) => {\n  const { id, isLinked, index, nodeId, onDragNewSegment, onSegmentFail, onSegmentConnect, onPortMount, type } = props\n  const canvasRef = useDiagramCanvas()\n  const scale = useScale()\n  const ref: any = useRef<React.RefObject<HTMLElement>>(null)\n  const startCoordinatesRef = useRef<ICoordinateType | undefined>()\n\n  const className = classnames('diagram-port', {\n    'type-input': type === 'input',\n    'type-output': type === 'output',\n    'is-linked': isLinked,\n  })\n\n  const { onDragStart, onDrag, onDragEnd } = useDrag({ ref, throttleBy: 15 })\n\n  onDragStart((event: MouseEvent) => {\n    event.stopImmediatePropagation()\n    event.stopPropagation()\n    if (canvasRef && ref.current) {\n      const { x: canvasX, y: canvasY } = canvasRef.getBoundingClientRect()\n      const { x, y, width, height } = ref.current.getBoundingClientRect()\n      startCoordinatesRef.current = [(x - canvasX + width / 2) / scale, (y - canvasY + height / 2) / scale]\n    }\n  })\n\n  onDrag((event: MouseEvent) => {\n    if (startCoordinatesRef.current) {\n      event.stopImmediatePropagation()\n      event.stopPropagation()\n      const to: ICoordinateType = calculatingCoordinates(event, canvasRef, scale)\n\n      onDragNewSegment(id, startCoordinatesRef.current, to)\n    }\n  })\n\n  onDragEnd((event: MouseEvent) => {\n    const targetDom = event.target as HTMLElement\n    const targetIsPort = targetDom.classList.contains('diagram-port')\n    // 如果目标元素是 port 区域 并且不是起点port\n    if (targetIsPort && targetDom.id !== id) {\n      onSegmentConnect(id, targetDom.id)\n      return\n    }\n\n    // 如果目标元素是 node 区域 并非不是起点node\n    const targetNode = findEventTargetParentNodeId(event.target as HTMLElement)\n    if (targetNode && targetNode !== nodeId) {\n      onSegmentConnect(id, targetNode)\n      return\n    }\n    // 否则在空白区域松开 释放\n    onSegmentFail && onSegmentFail(id, type)\n  })\n\n  useEffect(() => {\n    onPortMount(id, ref.current)\n  }, [id, onPortMount])\n\n  return (\n    <div className={className} id={id} ref={ref} style={{ top: index === 0 ? '45%' : `calc(45% + ${index * 18}px)` }} />\n  )\n})\n","import React from 'react'\nimport { ICoordinateType, IPointType } from '../../types'\nimport { Port } from './Port'\n\nexport interface DiagramNodePortsProps {\n  inputs: IPointType[]\n  nodeId: string\n  type: 'input' | 'output'\n  onPortMount: (id: string, dom: HTMLElement) => void\n  onDragNewSegment: (id: string, from: ICoordinateType, to: ICoordinateType) => void\n  onSegmentFail: (id: string, type: string) => void\n  onSegmentConnect: (id: string, targetPort: string) => void\n}\n\nexport const DiagramNodePorts: React.FC<DiagramNodePortsProps> = (props) => {\n  const { inputs, onPortMount, onDragNewSegment, onSegmentFail, onSegmentConnect, nodeId, type } = props\n  return (\n    <>\n      {inputs.map((port, index) => (\n        <Port\n          onPortMount={onPortMount}\n          onDragNewSegment={onDragNewSegment}\n          onSegmentFail={onSegmentFail}\n          onSegmentConnect={onSegmentConnect}\n          type={type}\n          key={port.id}\n          id={port.id}\n          index={index}\n          isLinked={port.isLinked}\n          nodeId={nodeId}\n        />\n      ))}\n    </>\n  )\n}\n\nDiagramNodePorts.displayName = 'DiagramNodePorts'\n","import React, { useCallback } from 'react'\nimport { Button } from 'antd'\nimport { DeleteOutlined, CopyOutlined } from '@ant-design/icons'\n\n\n// import { DeleteOutlined } from '@ant-design/icons'\n\n\nexport interface DiagramNodeActionButtonsProps {\n  id: string\n  onNodeCopy: (nodeId: string) => void\n  onNodeDelete: (nodeId: string) => void\n}\n\nexport const DiagramNodeActionButtons: React.FC<DiagramNodeActionButtonsProps> = (props) => {\n  const {onNodeDelete, onNodeCopy, id} = props\n\n  const handleNodeDelete = useCallback(() => {\n    onNodeDelete(id)\n  }, [id, onNodeDelete])\n\n  const handleNodeCopy = useCallback(() => {\n    onNodeCopy(id)\n  }, [id, onNodeCopy])\n\n  return (\n    <div className='diagram-node-action'>\n      <Button onClick={handleNodeCopy} icon={<CopyOutlined/>}/>\n      <Button onClick={handleNodeDelete} icon={<DeleteOutlined/>}/>\n    </div>\n  )\n}\n\nDiagramNodeActionButtons.displayName = 'DiagramNodeActionButtons'\n","import React, { useEffect, useMemo, useRef } from 'react'\nimport useDrag from '../../hooks/useDrag'\nimport { INodeType, ICoordinateType } from '../../types'\nimport { nodesConfig } from '../NodeTypes/config'\nimport { isEqual } from 'lodash-es'\nimport { useScale } from '../Context/DiagramManager'\nimport { DiagramNodePorts } from './DiagramNodePorts'\nimport classnames from 'classnames'\nimport { DiagramNodeActionButtons } from './DiagramNodeActionButtons'\n\ninterface DiagramNodeProps {\n  nodeInfo: INodeType\n  onNodePositionChange: (id: string, nextCoords: ICoordinateType) => void\n  onNodeValueChange: (id: string, nextNodeValue: any) => void\n  onAddHistory: (id: string, nextCoords: ICoordinateType) => void\n  onNodeMount: (id: string, dom: HTMLDivElement) => void\n  onPortMount: (id: string, dom: HTMLElement) => void\n  onDragNewSegment: (id: string, from: ICoordinateType, to: ICoordinateType) => void\n  onSegmentFail: (id: string, type: string) => void\n  onSegmentConnect: (id: string, targetPort: string) => void\n  activeNodeIds: string[]\n  onNodeDelete: (nodeId: string) => void\n  onNodeCopy: (nodeId: string) => void\n}\n\nexport const DiagramNode: React.FC<DiagramNodeProps> = React.memo(\n  (props) => {\n    const {\n      nodeInfo,\n      onNodeValueChange,\n      onNodePositionChange,\n      onPortMount,\n      onDragNewSegment,\n      onNodeMount,\n      onSegmentFail,\n      onSegmentConnect,\n      onAddHistory,\n      activeNodeIds,\n      onNodeDelete,\n      onNodeCopy\n    } = props\n\n    const {id, coordinates, type, inputs, data, outputs} = nodeInfo\n\n\n    const scale = useScale()\n\n    // nodeType\n    const component = nodesConfig[type]?.component\n\n    const handleNodeDataChange = (nextNodeData: any) => {\n      onNodeValueChange(id, nextNodeData)\n    }\n\n    // 传给子组件点 Props\n    const nodeItemProps = {\n      value: data,\n      onChange: handleNodeDataChange\n    }\n\n    const ref: any = useRef(null)\n\n    const {onDragStart, onDrag, onDragEnd} = useDrag({throttleBy: 14, ref}) // get the drag n drop methods\n    const dragStartPoint = useRef(coordinates) // keeps the drag start point in a persistent reference\n\n    // when drag starts, save the starting coordinates into the `dragStartPoint` ref\n    onDragStart(() => {\n      dragStartPoint.current = coordinates\n    })\n\n    // whilst dragging calculates the next coordinates and perform the `onNodePositionChange` callback\n    onDrag((event: MouseEvent, info: any) => {\n      event.stopImmediatePropagation()\n      event.stopPropagation()\n      const nextCoords: ICoordinateType = [\n        dragStartPoint.current[0] + info.offset[0] / scale,\n        dragStartPoint.current[1] + info.offset[1] / scale\n      ]\n\n      onNodePositionChange(id, nextCoords)\n    })\n\n    onDragEnd((event: MouseEvent) => {\n      if (!isEqual(dragStartPoint.current, coordinates)) {\n        onAddHistory(id, dragStartPoint.current)\n      }\n    })\n\n    const options = {nodeId: id, onPortMount, onDragNewSegment, onSegmentFail, onSegmentConnect}\n\n    useEffect(() => {\n      onNodeMount(id, ref.current)\n    }, [id, onNodeMount])\n\n    const className = useMemo(() => {\n      return classnames('diagram-node', {\n        active: activeNodeIds.includes(id)\n      })\n    }, [activeNodeIds, id])\n\n    return (\n      <div id={id} className={className} ref={ref} style={{left: coordinates[0], top: coordinates[1]}}>\n        {component && React.createElement(component, nodeItemProps)}\n        <DiagramNodePorts inputs={inputs} {...options} type=\"input\"/>\n        <DiagramNodePorts inputs={outputs} {...options} type=\"output\"/>\n        <DiagramNodeActionButtons id={id} onNodeDelete={onNodeDelete} onNodeCopy={onNodeCopy}/>\n      </div>\n    )\n  }\n)\n\nDiagramNode.displayName = 'DiagramNode'\n","import React from 'react'\nimport { DiagramNode } from './DiagramNode'\nimport { ICoordinateType, INodeType } from '../../types'\n\ninterface NodesCanvasProps {\n  nodes: INodeType[]\n  onNodeMount: (id: string, dom: HTMLDivElement) => void\n  onPortMount: (id: string, dom: HTMLElement) => void\n  onDragNewSegment: (id: string, from: ICoordinateType, to: ICoordinateType) => void\n  onSegmentFail: (id: string, type: string) => void\n  onSegmentConnect: (id: string, targetPort: string) => void\n  activeNodeIds: string[]\n  onNodePositionChange: (id: string, nextCoords: ICoordinateType) => void\n  onNodeValueChange: (id: string, nextNodeValue: any) => void\n  onAddHistory: (id: string, nextCoords: ICoordinateType) => void\n  onNodeDelete: (nodeId: string) => void\n  onNodeCopy: (nodeId: string) => void\n}\n\nexport const NodesCanvas: React.FC<NodesCanvasProps> = React.memo((props) => {\n  const {nodes, ...others} = props\n\n  return (\n    <>\n      {nodes.map((node) => (\n        <DiagramNode nodeInfo={node} key={node.id} {...others} />\n      ))}\n    </>\n  )\n})\n\nNodesCanvas.displayName = 'NodesCanvas'\n","import { ICoordinateType } from '../types'\n\nconst roundPoint = (point: ICoordinateType): ICoordinateType => [Math.floor(point[0]), Math.floor(point[1])]\n\n// 贝塞尔曲线算法\nconst makeBezierCurve = (from: ICoordinateType, to: ICoordinateType) => {\n  if (to[0] >= from[0]) {\n    return getCubicBezierPath(from, to)\n  } else {\n    return getAdvancedCubicBezierPath(from, to)\n  }\n}\n\nconst getPointsString = (points: ICoordinateType[]) => {\n  return points.map((item) => `${item[0]},${item[1]}`).join(' ')\n}\n\n// 正向 贝塞尔曲线\nconst getCubicBezierPath = (from: ICoordinateType, to: ICoordinateType) => {\n  const controlPointForStart: ICoordinateType = [(to[0] + from[0]) / 2, from[1]]\n  const controlPointForEnd: ICoordinateType = [(to[0] + from[0]) / 2, to[1]]\n\n  return `M ${from[0]},${from[1]} C ${getPointsString([controlPointForStart, controlPointForEnd])} ${to[0]},${to[1]}`\n}\n\n// 反向 贝塞尔曲线\nconst getAdvancedCubicBezierPath = (from: ICoordinateType, to: ICoordinateType) => {\n  const midX = (from[0] + to[0]) / 2\n  const midY = (from[1] + to[1]) / 2\n\n  return `M${from[0]},${from[1]} ${from[0] + 20},${from[1]} C ${from[0] + 100},${from[1]} ${from[0] + 130},${\n    (midY + from[1]) / 2\n  }  ${midX},${midY} C ${midX},${midY} ${to[0] - 130},${(midY + to[1]) / 2} ${to[0] - 2},${to[1]} M ${to[0] - 2},${\n    to[1]\n  } ${to[0]},${to[1]}`\n}\n\n/**\n * 生成连点之间的贝塞尔曲线\n */\nconst makeSvgPath = (startPoint?: ICoordinateType, endPoint?: ICoordinateType) => {\n  if (!startPoint || !endPoint) return ''\n  const roundedStart = roundPoint(startPoint)\n  const roundedEnd = roundPoint(endPoint)\n\n  // const start = `${roundedStart[0]}, ${roundedStart[1]}`\n  // const end = `${roundedEnd[0]}, ${roundedEnd[1]}`\n\n  // 生成 直线\n  // return `M ${start}, ${end}`\n\n  // 生成 曲线\n  return makeBezierCurve(roundedStart, roundedEnd)\n}\n\nexport default makeSvgPath\n","import React from 'react'\nimport { ICoordinateType } from '../../types'\nimport { DeleteOutlined } from '@ant-design/icons'\n\ninterface LinkDeleteProps {\n  position: ICoordinateType\n  onDelete: () => void\n}\n\n\nexport const LinkDelete: React.FC<LinkDeleteProps> = React.memo(({position, onDelete}) => (\n  <foreignObject x={position[0]} y={position[1]}>\n    <div className=\"bi-diagram-link-label\">\n      <DeleteOutlined onClick={onDelete}/>\n    </div>\n  </foreignObject>\n))\n\nLinkDelete.displayName = 'LinkDelete'\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport makeSvgPath from '../../utils/makeSvgPath'\nimport { LinkDelete } from './LinkDelete'\nimport { ICoordinateType, ILinkType } from '../../types'\nimport { getPathMidpoint } from '../../utils'\nimport { isEqual } from 'lodash-es'\n\ninterface LinkProps {\n  input: ICoordinateType\n  output: ICoordinateType\n  link: ILinkType\n  onDelete: (link: ILinkType) => void\n}\n\nexport const Link: React.FC<LinkProps> = React.memo(\n  (props) => {\n    const { input, output, link, onDelete } = props\n    const pathRef = useRef<SVGPathElement>(null)\n    const [labelPosition, setLabelPosition] = useState<ICoordinateType>()\n\n    /*\n     * 根据亮点坐标生成 svg path 路径\n     * */\n    const path = useMemo(() => makeSvgPath(input, output), [input, output])\n\n    useEffect(() => {\n      if (pathRef.current) {\n        setLabelPosition(getPathMidpoint(pathRef.current))\n      }\n    }, [pathRef, input, output])\n\n    const handleDelete = useCallback(() => {\n      onDelete(link)\n    }, [onDelete, link])\n\n    return (\n      <g className={'diagram-link'}>\n        <path d={path} className=\"bi-link-ghost\" />\n        <path d={path} ref={pathRef} className=\"bi-link-path\" />\n        {labelPosition && <LinkDelete position={labelPosition} onDelete={handleDelete} />}\n      </g>\n    )\n  },\n  (prev, next) => {\n    /*\n     *  memo 默认是浅比较 只比较 props 第一层\n     *  由于 props 上面 的 input output 等属性在外层每次会重新创建 导致浅层 比较地址 永远等于 false ，使得组件每次都会render 导致memo无效\n     * 所以使用 isEqual 进行值的比较 进行优化\n     */\n    return isEqual(prev, next)\n  }\n)\n\nLink.displayName = 'Link'\n","import React, { useMemo } from 'react'\nimport { Link } from './Link'\nimport { ILinkType, INodeType, ICoordinateType, IPortRefs, INodeRefs, IPointType } from '../../types'\nimport { useDiagramManager } from '../Context/DiagramManager'\n\ninterface LinkCanvasProps {\n  nodes: INodeType[]\n  links: ILinkType[]\n  onDelete: (link: ILinkType) => void\n}\n\n/*\n * link 起点终点 数据类型\n * */\nexport interface EntityPutType {\n  startCoordinates: ICoordinateType\n  endCoordinates: ICoordinateType\n  link: ILinkType\n}\n\nconst findPortCoordinate = (\n  nodeCoordinates: ICoordinateType,\n  ports: IPointType[],\n  entityId: string,\n  portRefs: IPortRefs\n): ICoordinateType | null => {\n  for (let j = 0; j < ports.length; j++) {\n    const input = ports[j]\n    if (input.id === entityId) {\n      const portDom = portRefs[entityId]\n      if (!portDom) return null\n      return [\n        nodeCoordinates[0] + portDom.offsetLeft + portDom.offsetWidth / 2,\n        nodeCoordinates[1] + portDom.offsetTop + portDom.offsetHeight / 2,\n      ]\n    }\n  }\n  return null\n}\n\n/*\n * 计算 link 起点终点坐标\n * 1. 如果找到 id 是 node 类型线，实际坐标为 x 为该 node 的 left 值，y坐标为该node 的 top + node高度的一半\n * 2. 如果找到 id 是 port 类型线，实际坐标为 x 为该 port 的 父元素 node 的 left + 点相对 node 的偏移量 +点的宽度的一半，y 轴坐标同理\n * */\nconst computedLinkCoordinate = (\n  nodes: INodeType[],\n  entityId: string,\n  nodeRefs: INodeRefs,\n  portRefs: IPortRefs,\n  canvasRef: HTMLDivElement | null\n): ICoordinateType | null => {\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i]\n    // 如果 id 是 nodeId\n    if (node.id === entityId) {\n      const nodeEl = nodeRefs[entityId]\n      if (!nodeEl) return null\n      return [node.coordinates[0], node.coordinates[1] + nodeEl.offsetHeight / 2]\n    } else {\n      const inputRes = findPortCoordinate(node.coordinates, node.inputs, entityId, portRefs)\n      if (inputRes) return inputRes\n\n      const outputRes = findPortCoordinate(node.coordinates, node.outputs, entityId, portRefs)\n      if (outputRes) return outputRes\n    }\n  }\n  return null\n}\n\nexport const LinksCanvas: React.FC<LinkCanvasProps> = React.memo((props) => {\n  const { nodes, onDelete, links } = props\n\n  const { canvasRef, portRefs, nodeRefs } = useDiagramManager()\n\n  const result = useMemo(() => {\n    const res: EntityPutType[] = []\n\n    links.forEach((link) => {\n      const { input, output } = link\n      const startCoordinates = computedLinkCoordinate(nodes, input, nodeRefs, portRefs, canvasRef)\n      const endCoordinates = computedLinkCoordinate(nodes, output, nodeRefs, portRefs, canvasRef)\n      if (startCoordinates && endCoordinates) {\n        res.push({\n          link,\n          startCoordinates,\n          endCoordinates,\n        })\n      }\n    })\n    return res\n  }, [nodes, links, nodeRefs, portRefs, canvasRef])\n\n  return (\n    <svg className=\"diagram-link-canvas\">\n      {result.map((item) => (\n        <Link\n          link={item.link}\n          input={item.startCoordinates}\n          output={item.endCoordinates}\n          onDelete={onDelete}\n          key={`${item.link.input}-${item.link.output}`}\n        />\n      ))}\n    </svg>\n  )\n})\nLinksCanvas.displayName = 'LinksCanvas'\n","import React, { useMemo } from 'react'\nimport makeSvgPath from '../../utils/makeSvgPath'\nimport { ISegmentType } from '../../types'\n\nexport interface SegmentProps {\n  segment: ISegmentType\n}\n\nexport const Segment: React.FC<SegmentProps> = React.memo(({segment}) => {\n  const {from, to, id} = segment\n  const path = useMemo(() => makeSvgPath(from, to), [from, to])\n\n  return (\n    <svg className=\"diagram-segment-canvas\">\n      <g className=\"diagram-segment-link\" id={id}>\n        <path d={path}/>\n        <circle r=\"5\" cx={to[0]} cy={to[1]}/>\n      </g>\n    </svg>\n  )\n})\n\nSegment.displayName = 'Segment'\n\n\n","import { useLayoutEffect, useMemo, useRef } from 'react'\n\ntype Fn<ARGS extends any[], R> = (...args: ARGS) => R\nconst useEventCallback = <A extends any[], R>(fn: Fn<A, R>): Fn<A, R> => {\n  let ref = useRef(fn)\n  useLayoutEffect(() => {\n    ref.current = fn\n  })\n  return useMemo(\n    () => (...args) => {\n      const { current } = ref\n      return current(...args)\n    },\n    []\n  )\n}\nexport default useEventCallback\n","import React, { useCallback, useState, useRef } from 'react'\nimport { DiagramCanvas } from './DiagramCanvas'\nimport { NodesCanvas } from './NodesCanvas'\nimport { LinksCanvas } from './LinksCanvas'\nimport { Segment } from './Segment'\n\nimport './style.scss'\nimport { IDiagramType, ILinkType, ISegmentType, IPortRefs, INodeRefs, ITransform, ICoordinateType } from '../../types'\nimport { cloneDeep, isEqual } from 'lodash-es'\nimport useEventCallback from '../../hooks/useEventCallback'\nimport { findIndexById } from '../../utils'\nimport { copyNode } from '../NodeTypes/config'\n\ninterface DiagramProps {\n  value: IDiagramType\n  onChange: (value: IDiagramType, notAddHistory?: boolean) => void\n  onAddHistory: (value: IDiagramType) => void\n  transform: ITransform\n  activeNodeIds: string[]\n}\n\nexport const Diagram: React.FC<DiagramProps> = React.memo((props) => {\n  const {value, onChange, onAddHistory, transform, activeNodeIds} = props\n  const [segment, setSegment] = useState<ISegmentType | undefined>()\n  const {current: portRefs} = useRef<IPortRefs>({}) // 保存所有 Port 的 Dom 节点\n  const {current: nodeRefs} = useRef<INodeRefs>({}) // 保存所有 Node 的 Dom 节点\n\n  const handleNodePositionChange = useEventCallback((nodeId: string, nextCoordinates: ICoordinateType) => {\n    const nextNodes = [...value.nodes]\n    const index = findIndexById(nodeId, nextNodes)\n    nextNodes[index] = {...nextNodes[index], coordinates: nextCoordinates}\n\n    onChange({...value, nodes: nextNodes}, true)\n  })\n\n  const handleNodeValueChange = useEventCallback((nodeId: string, nextNodeValue: any) => {\n    const nextNodes = [...value.nodes]\n    const index = findIndexById(nodeId, nextNodes)\n    nextNodes[index] = {...nextNodes[index], data: nextNodeValue}\n    onChange({...value, nodes: nextNodes})\n  })\n\n  const handleAddHistory = useEventCallback((nodeId: string, nextCoordinates: ICoordinateType) => {\n    const nextNodes = [...value.nodes]\n    const index = findIndexById(nodeId, nextNodes)\n    nextNodes[index] = {...nextNodes[index], coordinates: nextCoordinates}\n\n    onAddHistory({...value, nodes: nextNodes})\n  })\n\n  const handleNodeCopy = useEventCallback((nodeId: string) => {\n    const index = findIndexById(nodeId, value.nodes)\n    const newNode = copyNode(value.nodes[index])\n    onChange({...value, nodes: [...value.nodes, newNode]})\n  })\n\n  const handleNodeDelete = useEventCallback((nodeId: string) => {\n    const nextNodes = [...value.nodes]\n    const index = findIndexById(nodeId, nextNodes)\n    const currentNode = value.nodes[index]\n    const nodeOutputs = currentNode.outputs.map(port => port.id)\n    const nodeInputs = currentNode.inputs.map(port => port.id)\n    nextNodes.splice(index, 1)\n    // 删除和节点相关的所有线\n    let nextLinks = value\n      .links\n      .filter((link) => {\n        return !nodeInputs.includes(link.output) &&\n          !nodeOutputs.includes(link.input) &&\n          link.input !== nodeId &&\n          link.output !== nodeId\n      })\n    onChange({...value, links: nextLinks, nodes: nextNodes})\n  })\n\n  // when a port is registered, save it to the local reference\n  const onPortRegister = useEventCallback((portId: string, portEl: HTMLElement) => {\n    portRefs[portId] = portEl\n  })\n\n  // when a node is registered, save it to the local reference\n  const onNodeRegister = useEventCallback((nodeId: string, nodeEl: HTMLDivElement) => {\n    // const rect = nodeEl.getBoundingClientRect()\n    nodeRefs[nodeId] = nodeEl\n  })\n\n  // when a new segment is dragged, save it to the local state\n  const onDragNewSegment = useCallback((portId, from, to) => {\n    setSegment({id: `segment-${portId}`, from, to})\n  }, [])\n\n  // when a segment fails to connect, reset the segment state\n  const onSegmentFail = useCallback(() => {\n    setSegment(undefined)\n  }, [])\n\n  // when a segment connects, update the links schema, perform the onChange callback\n  // with the new data, then reset the segment state\n  const onSegmentConnect = useEventCallback((input: string, output: string) => {\n    const nextLinks = [...value.links, {input, output}]\n    onChange({...value, links: nextLinks})\n    setSegment(undefined)\n  })\n\n  // when links change, performs the onChange callback with the new incoming data\n  const onLinkDelete = useEventCallback((link: ILinkType) => {\n    const nextLinks = value.links.filter((item) => !isEqual(item, link))\n    onChange({...value, links: nextLinks})\n  })\n\n  return (\n    <DiagramCanvas portRefs={portRefs} nodeRefs={nodeRefs} transform={transform}>\n      <NodesCanvas\n        nodes={value.nodes}\n        onNodeMount={onNodeRegister}\n        onPortMount={onPortRegister}\n        onDragNewSegment={onDragNewSegment}\n        onSegmentFail={onSegmentFail}\n        onNodePositionChange={handleNodePositionChange}\n        onNodeValueChange={handleNodeValueChange}\n        onNodeDelete={handleNodeDelete}\n        onNodeCopy={handleNodeCopy}\n        onSegmentConnect={onSegmentConnect}\n        onAddHistory={handleAddHistory}\n        activeNodeIds={activeNodeIds}\n      />\n      {value.links.length > 0 && <LinksCanvas nodes={value.nodes} links={value.links} onDelete={onLinkDelete}/>}\n      {segment && <Segment segment={segment}/>}\n    </DiagramCanvas>\n  )\n})\n\nDiagram.displayName = 'Diagram'\n","import { useReducer, useCallback } from 'react'\nimport { IDiagramType } from '../types'\n\n// 初始化useReducer中的state\nconst initialState = {\n  // 当我们每次添加新state时，用来储存更新前状态的数组\n  past: [],\n  // 当前的state值\n  present: null,\n  // 让我们可以用使用重做功能的，future数组\n  future: []\n}\n\n// 根据action处理state的改变\nconst reducer = (state: any, action: any) => {\n  const {past, present, future} = state\n  const {newPresent} = action\n\n  switch (action.type) {\n    case 'UNDO':\n      const previous = past[past.length - 1]\n      const newPast = past.slice(0, past.length - 1)\n\n      return {\n        past: newPast,\n        present: previous,\n        future: [present, ...future]\n      }\n    case 'REDO':\n      const next = future[0]\n      const newFuture = future.slice(1)\n\n      return {\n        past: [...past, present],\n        present: next,\n        future: newFuture\n      }\n    case 'SET':\n      return {\n        past: [...past],\n        present: newPresent,\n        future: []\n      }\n\n    case 'SET_WIDTH_HISTORY':\n      if (newPresent === present) {\n        return state\n      }\n      return {\n        past: [...past, present],\n        present: newPresent,\n        future: []\n      }\n\n    case 'ADD_A_HISTORY':\n      if (newPresent === present) {\n        return state\n      }\n      return {\n        past: [...past, newPresent],\n        present: present,\n        future: []\n      }\n\n    case 'CLEAR':\n      const {initialPresent} = action\n\n      return {\n        ...initialState,\n        present: initialPresent\n      }\n  }\n}\n\n// Hook\nexport const useHistory = (initialPresent: IDiagramType) => {\n  const [state, dispatch] = useReducer(reducer, {\n    ...initialState,\n    present: initialPresent\n  })\n\n  const canUndo = state.past.length !== 0\n  const canRedo = state.future.length !== 0\n\n  const undo = useCallback(() => {\n    if (canUndo) {\n      dispatch({type: 'UNDO'})\n    }\n  }, [canUndo, dispatch])\n\n  const redo = useCallback(() => {\n    if (canRedo) {\n      dispatch({type: 'REDO'})\n    }\n  }, [canRedo, dispatch])\n\n  // 只设置值 不追加历史记录 例如 移动 node的过程不需要记录\n  const set = useCallback((newPresent) => dispatch({type: 'SET', newPresent}), [dispatch])\n\n  // 设置值 并且追加历史记录 例如 增加删除节点，修改节点data数据等\n  const setWithHistory = useCallback((newPresent) => dispatch({type: 'SET_WIDTH_HISTORY', newPresent}), [dispatch])\n\n  // 仅追加一条历史记录不设置值 例如 节点移动后，把节点拖拽的起始位置 追加进入历史栈\n  const addAHistory = useCallback((newPresent) => dispatch({type: 'ADD_A_HISTORY', newPresent}), [dispatch])\n\n  const clear = useCallback(() => dispatch({type: 'CLEAR', initialPresent}), [dispatch, initialPresent])\n\n  return {value: state.present, set, setWithHistory, addAHistory, undo, redo, clear, canUndo, canRedo}\n}\n","import React, { useMemo } from 'react'\nimport { Button, Popover } from 'antd'\n\nimport './style.scss'\n\nexport interface ToolbarProps {\n  undo: () => void\n  redo: () => void\n  canUndo: boolean\n  canRedo: boolean\n  scale: number\n}\n\nconst scaleList = [\n  { text: '滚轮放大缩小', value: 1 },\n  { text: '空格 + 鼠标拖动', value: 2 },\n]\n\nexport const Toolbar: React.FC<ToolbarProps> = React.memo(({ undo, redo, canUndo, canRedo, scale }) => {\n  const scaleContent = useMemo(() => {\n    return (\n      <div>\n        {scaleList.map((item) => (\n          <div key={item.value} className=\"scale-item\">\n            {item.text}\n          </div>\n        ))}\n      </div>\n    )\n  }, [])\n\n  return (\n    <div className=\"toolbar\">\n      <Button disabled={!canUndo} onClick={undo}>\n        撤销\n      </Button>\n      <Button disabled={!canRedo} onClick={redo}>\n        重做\n      </Button>\n      <Popover placement=\"right\" content={scaleContent} overlayClassName=\"scale-popover\">\n        <Button>快捷键</Button>\n      </Popover>\n      <Button>{scale * 100}%</Button>\n    </div>\n  )\n})\n","import React, { useCallback } from 'react'\n\nimport './style.scss'\n\nexport interface NodeListItemProps {\n  icon: React.FC\n  label: string\n  type: string\n}\n\nexport const NodeListItem: React.FC<NodeListItemProps> = React.memo(({ icon, label, type }) => {\n  const handleDragStart = useCallback(\n    (event: any) => {\n      event.dataTransfer?.setData('nodeType', type)\n    },\n    [type]\n  )\n  return (\n    <div className=\"node-list-item\" draggable onDragStart={handleDragStart}>\n      {icon && React.createElement(icon)}\n      <div className=\"node-list-text\">{label}</div>\n    </div>\n  )\n})\n\nNodeListItem.displayName = 'NodeListItem'\n","import React, { memo } from 'react'\nimport './style.scss'\nimport { NodeListItem } from './NodeListItem'\nimport { nodesList } from '../NodeTypes/config'\n\nexport interface NodeListProps {}\n\nexport const NodeList: React.FC<NodeListProps> = memo(() => {\n  return (\n    <div className=\"node-list\">\n      {nodesList.map((node) => (\n        <NodeListItem key={node.type} icon={node.icon} type={node.type} label={node.label} />\n      ))}\n    </div>\n  )\n})\n\nNodeList.displayName = 'NodeList'\n","import React, { useCallback, useMemo, useRef, useState, memo } from 'react'\nimport { Diagram } from './components/Diagram'\nimport { useHistory } from './hooks/useHistory'\nimport { Toolbar } from './components/Toolbar/Toolbar'\nimport { NodeList } from './components/NodeList/NodeList'\nimport { IDiagramType, ICoordinateType, IMousePosition, ITransform, ISelectionArea } from './types'\nimport { createNode } from './components/NodeTypes/config'\nimport { throttle } from 'lodash-es'\nimport { checkMouseDownTargetIsDrawPanel, collideCheck } from './utils'\n// import { useThrottleFn } from 'react-use'\n\nconst manyNode: any = new Array(100).fill({}).map((item, index) => {\n  return {\n    id: 'node-' + index,\n    coordinates: [index * 40, index * 50],\n    inputs: [],\n    outputs: [{ id: 'port-' + index, isLinked: false }],\n    type: 'nodeTypeInput',\n    data: {\n      inputValue: 'defaultValue',\n    },\n  }\n})\n\nconst manyLink = new Array(99).fill({}).map((item, index) => {\n  return { input: 'port-' + index, output: 'node-' + (index + 1) }\n})\n\nconst defaultValue: IDiagramType = {\n  // nodes: manyNode,\n  nodes: [\n    {\n      id: 'node-1',\n      coordinates: [100, 150],\n      inputs: [],\n      outputs: [{id: 'port-1', isLinked: true}],\n      type: 'nodeTypeInput',\n      data: {\n        inputValue: 'defaultValue'\n      }\n    },\n    {\n      id: 'node-2',\n      type: 'nodeTypeSelect',\n      coordinates: [400, 200],\n      inputs: [{id: 'input-1', isLinked: false}],\n      outputs: [{id: 'port-5', isLinked: false}],\n      data: {\n        selectValue: ''\n      }\n    }\n  ],\n  // links: manyLink,\n  links: [{input: 'port-1', output: 'node-2'}]\n}\n\nconst SCALE_STEP = 0.1\n\nconst DRAG_STATE = {\n  DEFAULT: 'DEFAULT',\n  START: 'START',\n  MOVE: 'MOVE',\n  END: 'END',\n  SELECTION: 'SELECTION',\n}\n\nconst CURSOR_MAP = {\n  [DRAG_STATE.DEFAULT]: 'default',\n  [DRAG_STATE.SELECTION]: 'default',\n  [DRAG_STATE.START]: 'grab',\n  [DRAG_STATE.MOVE]: 'grabbing',\n}\n\nfunction DiagramPanel() {\n  const { value, set, setWithHistory, addAHistory, undo, redo, canUndo, canRedo } = useHistory(defaultValue)\n  const [transform, setTransform] = useState<ITransform>({\n    scale: 1,\n    translateX: 0,\n    translateY: 0,\n  })\n  const [selectionArea, setSelectionArea] = useState<ISelectionArea | undefined>()\n  const [dragState, setDragState] = useState<string>(DRAG_STATE.DEFAULT)\n  const mouseDownStartPosition = useRef<IMousePosition | undefined>()\n  const [activeNodeIds, setActiveNodeIds] = useState<string[]>([])\n\n  const panelRef = useRef<HTMLDivElement>(null)\n  const selectionAreaRef = useRef<HTMLDivElement>(null)\n\n  // eslint-disable-next-line\n  const handleThrottleSetTransform = useCallback(\n    throttle((transform) => {\n      setTransform(transform)\n    }, 20),\n    []\n  )\n\n  const handleChange = useCallback(\n    (newValue: IDiagramType, notAddHistory?: boolean) => {\n      if (notAddHistory) {\n        set(newValue)\n      } else {\n        setWithHistory(newValue)\n      }\n    },\n    [set, setWithHistory]\n  )\n\n  const handleAddHistory = useCallback(\n    (newValue: IDiagramType) => {\n      addAHistory(newValue)\n    },\n    [addAHistory]\n  )\n\n  const handleDrop = useCallback(\n    (event: any) => {\n      if (event) {\n        event = window.event\n      }\n      const nodeType = event.dataTransfer.getData('nodeType')\n      const x = event.clientX\n      const y = event.clientY\n\n      const diagramCanvasRect = document.getElementById('diagram-canvas')?.getBoundingClientRect() || { x: 0, y: 0 }\n\n      const coordinates: ICoordinateType = [\n        (x - diagramCanvasRect.x) / transform.scale,\n        (y - diagramCanvasRect.y) / transform.scale,\n      ]\n      const newNode = createNode(nodeType, coordinates)\n      handleChange({ ...value, nodes: [...value.nodes, newNode] })\n    },\n    [handleChange, transform, value]\n  )\n\n  const handleDrag = useCallback((e: any) => {\n    e.preventDefault()\n  }, [])\n\n  const handleWheel = useCallback(\n    (event: any) => {\n      const wheelDelta = event.nativeEvent.wheelDelta\n\n      let { scale, translateX, translateY } = transform\n\n      const offsetX = ((event.clientX - translateX) * SCALE_STEP) / scale\n      const offsetY = ((event.clientY - translateY) * SCALE_STEP) / scale\n\n      if (wheelDelta < 0) {\n        scale = scale - SCALE_STEP\n        translateX = translateX + offsetX\n        translateY = translateY + offsetY\n      }\n      if (wheelDelta > 0) {\n        scale = scale + SCALE_STEP\n        translateX = translateX - offsetX\n        translateY = translateY - offsetY\n      }\n\n      if (scale > 1 || scale < 0.1) return\n\n      handleThrottleSetTransform({\n        scale: Number(scale.toFixed(2)),\n        translateX,\n        translateY,\n      })\n    },\n    [handleThrottleSetTransform, transform]\n  )\n\n  const handleMouseDown = useCallback(\n    (event) => {\n      mouseDownStartPosition.current = {\n        x: event.clientX,\n        y: event.clientY,\n        relativeX: event.clientX - transform.translateX,\n        relativeY: event.clientY - transform.translateY,\n      }\n      if (checkMouseDownTargetIsDrawPanel(event, panelRef.current)) {\n        if (dragState === DRAG_STATE.START) {\n          setDragState(DRAG_STATE.MOVE)\n        } else {\n          setDragState(DRAG_STATE.SELECTION)\n        }\n      }\n    },\n    [dragState, transform]\n  )\n\n  // eslint-disable-next-line\n  const handleThrottleSetSelectionArea = useCallback(\n    throttle((e) => {\n      if (mouseDownStartPosition.current && panelRef.current) {\n        const panelRect = panelRef.current.getBoundingClientRect()\n        setSelectionArea({\n          left: Math.min(e.clientX, mouseDownStartPosition.current.x) - panelRect.x,\n          top: Math.min(e.clientY, mouseDownStartPosition.current.y) - panelRect.y,\n          width: Math.abs(e.clientX - mouseDownStartPosition.current.x),\n          height: Math.abs(e.clientY - mouseDownStartPosition.current.y),\n        })\n        const selectAreaDom = selectionAreaRef.current\n        const activeNodeIds = (value as IDiagramType).nodes\n          .map((v) => v.id)\n          .filter((id) => {\n            return collideCheck(selectAreaDom, document.getElementById(id))\n          })\n\n        setActiveNodeIds(activeNodeIds)\n      }\n    }, 20),\n    [transform, value]\n  )\n\n  const handleMouseUp = useCallback(\n    (event) => {\n      if (dragState === DRAG_STATE.MOVE) {\n        setDragState(DRAG_STATE.START)\n      } else {\n        setDragState(DRAG_STATE.DEFAULT)\n      }\n      setSelectionArea(undefined)\n      mouseDownStartPosition.current = undefined\n    },\n    [dragState]\n  )\n\n  const handleMouseMove = useCallback(\n    (event) => {\n      if (dragState === DRAG_STATE.MOVE && mouseDownStartPosition.current) {\n        handleThrottleSetTransform({\n          ...transform,\n          translateX: event.clientX - mouseDownStartPosition.current.relativeX,\n          translateY: event.clientY - mouseDownStartPosition.current.relativeY,\n        })\n      }\n      if (dragState === DRAG_STATE.SELECTION) {\n        handleThrottleSetSelectionArea(event)\n      }\n    },\n    [dragState, handleThrottleSetSelectionArea, handleThrottleSetTransform, transform, mouseDownStartPosition]\n  )\n\n  const handleKeyDown = useCallback(\n    (event) => {\n      if (event.keyCode === 32 && dragState === DRAG_STATE.DEFAULT) {\n        setDragState(DRAG_STATE.START)\n      }\n    },\n    [dragState]\n  )\n\n  const handleKeyUp = useCallback((event) => {\n    if (event.keyCode === 32) {\n      setDragState(DRAG_STATE.DEFAULT)\n    }\n  }, [])\n\n  const cursor = useMemo(() => {\n    return CURSOR_MAP[dragState]\n  }, [dragState])\n\n  const hideSelectionArea = useMemo(() => dragState !== DRAG_STATE.SELECTION, [dragState])\n\n  const selectionAreaStyled = useMemo(\n    () => ({\n      left: selectionArea?.left,\n      top: selectionArea?.top,\n      width: selectionArea?.width,\n      height: selectionArea?.height,\n    }),\n    [selectionArea]\n  )\n\n  return (\n    <div\n      ref={panelRef}\n      className=\"diagram-panel\"\n      onDrop={handleDrop}\n      onDragEnter={handleDrag}\n      onDragOver={handleDrag}\n      tabIndex={1}\n      onWheel={handleWheel}\n      onMouseDown={handleMouseDown}\n      onMouseMove={handleMouseMove}\n      onMouseUp={handleMouseUp}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      style={{ cursor }}\n    >\n      <Diagram\n        value={value}\n        transform={transform}\n        onChange={handleChange}\n        onAddHistory={handleAddHistory}\n        activeNodeIds={activeNodeIds}\n      />\n      <NodeList />\n      <Toolbar undo={undo} redo={redo} canUndo={canUndo} scale={transform.scale} canRedo={canRedo} />\n      <div\n        ref={selectionAreaRef}\n        className=\"diagram-selection-area\"\n        hidden={hideSelectionArea}\n        style={selectionAreaStyled}\n      />\n    </div>\n  )\n}\n\nexport default memo(DiagramPanel)\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport DiagramPanel from './DiagramPanel'\nimport reportWebVitals from './reportWebVitals'\n// import { Test } from './testComponent/Test'\n\nReactDOM.render(\n  <React.StrictMode>\n    <DiagramPanel />\n    {/* <Test /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}