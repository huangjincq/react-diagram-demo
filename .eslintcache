[{"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Diagram.tsx":"1","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramCanvas/DiagramCanvas.tsx":"2"},{"size":3405,"mtime":1611385491567,"results":"3","hashOfConfig":"4"},{"size":1654,"mtime":1611385560380,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1la7djy",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Diagram.tsx",["11"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramCanvas/DiagramCanvas.tsx",["12"],"import React, { useEffect, useRef, useState } from 'react'\n// import { useWindowScroll, useWindowResize } from 'beautiful-react-hooks';\nimport { isEqual } from 'lodash-es'\nimport DiagramContext from '../../Context/DiagramContext'\nimport { IPortRefs, INodeRefs } from \"../../../types\"\n\ninterface DiagramCanvasProps {\n  portRefs: IPortRefs;\n  nodeRefs: INodeRefs;\n  scale: number\n}\n\nexport const DiagramCanvas: React.FC<DiagramCanvasProps> = React.memo((props) => {\n  const {children, portRefs, nodeRefs, scale} = props\n  const [bbox, setBoundingBox] = useState<any>(null)\n  const canvasRef = useRef<HTMLDivElement>(null)\n\n  // calculate the given element bounding box and save it into the bbox state\n  const calculateBBox = (el: HTMLDivElement | null) => {\n    if (el) {\n      const nextBBox: any = el.getBoundingClientRect()\n      nextBBox.el = el\n      if (!isEqual(nextBBox, bbox)) {\n        setBoundingBox(nextBBox)\n      }\n    }\n  }\n\n  // when the canvas is ready and placed within the DOM, save its bounding box to be provided down\n  // to children component as a context value for future calculations.\n  useEffect(() => calculateBBox(canvasRef.current), [canvasRef.current])\n  // same on window scroll and resize\n  // useWindowScroll(() => calculateBBox(canvasRef.current));\n  // useWindowResize(() => calculateBBox(canvasRef.current));\n\n  return (\n    <div className={'bi bi-diagram'} ref={canvasRef} style={{transform: `scale(${scale})`}}>\n      <DiagramContext.Provider value={{canvas: bbox, ports: portRefs, nodes: nodeRefs}}>\n        {children}\n      </DiagramContext.Provider>\n    </div>\n  )\n})\n\nDiagramCanvas.displayName = 'DiagramCanvas'\n\n\n",{"ruleId":"13","severity":1,"message":"14","line":51,"column":6,"nodeType":"15","endLine":51,"endColumn":8,"suggestions":"16"},{"ruleId":"13","severity":1,"message":"17","line":31,"column":53,"nodeType":"15","endLine":31,"endColumn":72,"suggestions":"18"},"react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'nodeRefs' and 'portRefs'. Either include them or remove the dependency array.","ArrayExpression",["19"],"React Hook useEffect has a missing dependency: 'calculateBBox'. Either include it or remove the dependency array. Mutable values like 'canvasRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["20"],{"desc":"21","fix":"22"},{"desc":"23","fix":"24"},"Update the dependencies array to be: [nodeRefs, portRefs]",{"range":"25","text":"26"},"Update the dependencies array to be: [calculateBBox]",{"range":"27","text":"28"},[1902,1904],"[nodeRefs, portRefs]",[1160,1179],"[calculateBBox]"]