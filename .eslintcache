[{"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramCanvas/DiagramCanvas.js":"1","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinksCanvas/LinksCanvas.js":"2","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Toolbar/Toolbar.tsx":"3","/Users/huangjin/Documents/work/person-project/react-mind-map/src/App.tsx":"4","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/NodesCanvas/NodesCanvas.js":"5","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinksCanvas/removeLinkFromArray.js":"6","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Segment/Segment.js":"7","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useNodeUnregistration.js":"8","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getNodePortsId.js":"9","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/portGenerator.js":"10","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useContextRegistration.js":"11","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getPathMidpoint.js":"12","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getRelativePoint.js":"13","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeList.tsx":"14","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeListItem.tsx":"15","/Users/huangjin/Documents/work/person-project/react-mind-map/src/index.tsx":"16","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinksCanvas/findInvolvedEntity.js":"17","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Context/DiagramContext.js":"18","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/DiagramNode.js":"19","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useNodeRefs.js":"20","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useCanvas.js":"21","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/usePortRefs.js":"22","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useDrag.js":"23","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Diagram.js":"24","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/Types.js":"25","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link/Link.tsx":"26","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/makeSvgPath.js":"27","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link/LinkDelete.tsx":"28"},{"size":2032,"mtime":1611186728462,"results":"29","hashOfConfig":"30"},{"size":1636,"mtime":1611234349454,"results":"31","hashOfConfig":"30"},{"size":1460,"mtime":1611187515879,"results":"32","hashOfConfig":"30"},{"size":1912,"mtime":1611233612555,"results":"33","hashOfConfig":"30"},{"size":2044,"mtime":1611100639159,"results":"34","hashOfConfig":"30"},{"size":163,"mtime":1610546949870,"results":"35","hashOfConfig":"30"},{"size":831,"mtime":1610497565566,"results":"36","hashOfConfig":"30"},{"size":598,"mtime":1610497565596,"results":"37","hashOfConfig":"30"},{"size":367,"mtime":1610497565581,"results":"38","hashOfConfig":"30"},{"size":435,"mtime":1611102156945,"results":"39","hashOfConfig":"30"},{"size":1116,"mtime":1611101742995,"results":"40","hashOfConfig":"30"},{"size":304,"mtime":1610497565585,"results":"41","hashOfConfig":"30"},{"size":130,"mtime":1610497565588,"results":"42","hashOfConfig":"30"},{"size":414,"mtime":1611189022379,"results":"43","hashOfConfig":"30"},{"size":452,"mtime":1611233494921,"results":"44","hashOfConfig":"30"},{"size":500,"mtime":1610497175539,"results":"45","hashOfConfig":"30"},{"size":706,"mtime":1611186728466,"results":"46","hashOfConfig":"30"},{"size":108,"mtime":1610497565526,"results":"47","hashOfConfig":"30"},{"size":5499,"mtime":1611102138461,"results":"48","hashOfConfig":"30"},{"size":284,"mtime":1610497565596,"results":"49","hashOfConfig":"30"},{"size":286,"mtime":1610497565593,"results":"50","hashOfConfig":"30"},{"size":284,"mtime":1610497565597,"results":"51","hashOfConfig":"30"},{"size":4797,"mtime":1610546949873,"results":"52","hashOfConfig":"30"},{"size":3302,"mtime":1611233657105,"results":"53","hashOfConfig":"30"},{"size":1109,"mtime":1610497565577,"results":"54","hashOfConfig":"30"},{"size":2931,"mtime":1611235958046,"results":"55","hashOfConfig":"30"},{"size":608,"mtime":1611235735441,"results":"56","hashOfConfig":"30"},{"size":397,"mtime":1611234952587,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},"1la7djy",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"61"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"61"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramCanvas/DiagramCanvas.js",["125"],"import React, { useEffect, useRef, useState } from 'react'\n// import { useWindowScroll, useWindowResize } from 'beautiful-react-hooks';\nimport { isEqual } from 'lodash-es'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport DiagramContext from '../../Context/DiagramContext'\n\n/**\n * The DiagramCanvas component provides a context to the Diagram children.\n * The context contains the canvas bounding box (for future calculations) and the port references in order to\n * allow links to easily access to a the ports coordinates\n */\nconst DiagramCanvas = (props) => {\n  const { children, portRefs, nodeRefs, className, scale, ...rest } = props\n  const [bbox, setBoundingBox] = useState(null)\n  const canvasRef = useRef()\n  const classList = classNames('bi bi-diagram', className)\n\n  // calculate the given element bounding box and save it into the bbox state\n  const calculateBBox = (el) => {\n    if (el) {\n      const nextBBox = el.getBoundingClientRect()\n      nextBBox.el = el\n      if (!isEqual(nextBBox, bbox)) {\n        setBoundingBox(nextBBox)\n      }\n    }\n  }\n\n  // when the canvas is ready and placed within the DOM, save its bounding box to be provided down\n  // to children component as a context value for future calculations.\n  useEffect(() => calculateBBox(canvasRef.current), [canvasRef.current])\n  // same on window scroll and resize\n  // useWindowScroll(() => calculateBBox(canvasRef.current));\n  // useWindowResize(() => calculateBBox(canvasRef.current));\n\n  return (\n    <div className={classList} ref={canvasRef} {...rest} style={{ transform: `scale(${scale})` }}>\n      <DiagramContext.Provider value={{ canvas: bbox, ports: portRefs, nodes: nodeRefs, _nodes: {} }}>\n        {children}\n      </DiagramContext.Provider>\n    </div>\n  )\n}\n\nDiagramCanvas.propTypes = {\n  portRefs: PropTypes.shape({}),\n  nodeRefs: PropTypes.shape({}),\n  className: PropTypes.string,\n}\n\nDiagramCanvas.defaultProps = {\n  portRefs: {},\n  nodeRefs: {},\n  className: '',\n}\n\nexport default React.memo(DiagramCanvas)\n",["126","127"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinksCanvas/LinksCanvas.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Toolbar/Toolbar.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/App.tsx",["128"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/NodesCanvas/NodesCanvas.js",[],["129","130"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinksCanvas/removeLinkFromArray.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Segment/Segment.js",["131"],"import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { PortAlignment } from '../../shared/Types';\nimport makeSvgPath from '../../shared/functions/makeSvgPath';\n\n/**\n * Segment\n */\nconst Segment = (props) => {\n  const { from, to, alignment } = props;\n  const pathOptions = { type: 'bezier', inputAlignment: alignment };\n  const path = useMemo(() => makeSvgPath(from, to, pathOptions), [from, to, alignment]);\n\n  return (\n    <g className=\"bi-diagram-segment\">\n      <path d={path} />\n      <circle r=\"6.5\" cx={to[0]} cy={to[1]} />\n    </g>\n  );\n};\n\nSegment.propTypes = {\n  from: PropTypes.arrayOf(PropTypes.number).isRequired,\n  to: PropTypes.arrayOf(PropTypes.number).isRequired,\n  alignment: PortAlignment,\n};\n\nSegment.defaultProps = {\n  alignment: undefined,\n};\n\nexport default React.memo(Segment);\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useNodeUnregistration.js",["132"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getNodePortsId.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/portGenerator.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useContextRegistration.js",["133","134","135","136","137","138"],"import { useCallback, useEffect, useContext } from 'react';\nimport DiagramContext from '../../Context/DiagramContext';\n\n/**\n * Returns a callback that will perform the onPortRegister function when the context is ready (canvas exists)\n * and there's at least one input or one output\n */\nexport const usePortRegistration = (inputs, outputs, onPortRegister) => {\n  const { canvas, ports } = useContext(DiagramContext);\n\n  return useCallback((portId, portElement) => {\n    if (canvas && (inputs || outputs)) {\n      if (ports && !ports[portId]) {\n        onPortRegister(portId, portElement);\n      }\n    }\n  }, [!!canvas, !!ports, inputs, outputs]);\n};\n\n/**\n * Takes a dom reference and an onNodeRegister callback and perform the callback when the node is mounted\n * and the canvas is ready\n */\nexport const useNodeRegistration = (ref, onNodeRegister, id) => {\n  const { canvas, nodes } = useContext(DiagramContext);\n\n  useEffect(() => {\n    if (onNodeRegister && ref.current && canvas && nodes && !nodes[id]) {\n      onNodeRegister(id, ref.current);\n    }\n  }, [ref.current, onNodeRegister, !!canvas, !!nodes, id]);\n};\n",["139","140"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getPathMidpoint.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getRelativePoint.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeList.tsx",["141","142","143","144","145"],"import React, {useMemo, useState} from 'react'\nimport {Button, Popover} from \"antd\";\n\nimport \"./style.scss\"\nimport {NodeListItem} from \"./NodeListItem\";\n\nexport interface NodeListProps {\n\n}\n\n\nexport const NodeList: React.FC<NodeListProps> = ({}) => {\n\n\n  return (\n    <div className=\"node-list\">\n      <NodeListItem/>\n      <NodeListItem/>\n      <NodeListItem/>\n    </div>\n  )\n}\n\nNodeList.displayName = 'NodeList'\n",["146","147"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeListItem.tsx",["148"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/index.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinksCanvas/findInvolvedEntity.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Context/DiagramContext.js",[],["149","150"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/DiagramNode.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useNodeRefs.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useCanvas.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/usePortRefs.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useDrag.js",["151","152","153","154","155","156"],"import { throttle } from 'lodash-es'\nimport { useRef, useCallback, useEffect } from 'react'\n\nconst defaultOptions = {\n  /**\n   * A custom ref to be used in place of a new one\n   * @default undefined\n   */\n  ref: undefined,\n  /**\n   * Throttle the onDrag handler by the given ms\n   * @default 0ms\n   */\n  throttleBy: 0,\n}\n\n/**\n * Returns the click coordinates of a MouseEvent\n * @param event\n * @returns {*[]}\n */\nconst getEventCoordinates = (event) => [event.clientX, event.clientY]\n\n/**\n * Create a persistent callback reference that will live trough a component lifecycle\n * @param ref\n * @returns {Function}\n */\nconst CreateCallbackRef = (ref) =>\n  useCallback(\n    (callback) => {\n      if (!ref.current || callback !== ref.current) {\n        // eslint-disable-next-line no-param-reassign\n        ref.current = callback\n      }\n    },\n    [ref.current]\n  )\n\n/**\n * A custom hook exposing handlers and ref for developing draggable React elements.\n *\n * ## Basic Usage:\n *\n * ```\n * const DraggableItem = () => {\n *    const { ref, isDragging, onDragStart, onDrag, onDragEnd } = useDrag();\n *\n *    onDragStart(dragStartHandler);\n *\n *    onDrag(dragHandler);\n *\n *    onDragEnd(dragEndHandler);\n *\n *    return (\n *      <div ref={ref}>\n *        Drag me!\n *      </div>\n *    );\n * }\n * ```\n *\n * ## Options:\n *\n * ```\n * const DraggingItem = () => {\n *    const ref = useRef();\n *    const options = { ref, throttleBy: 60 };\n *    const { isDragging, onDragStart, onDrag, onDragEnd } = useDrag(options);\n *\n *    onDragStart(dragStartHandler);\n *\n *    onDrag(dragHandler);\n *\n *    onDragEnd(dragEndHandler);\n *\n *    return (\n *      <div ref={ref}>\n *        Drag me!\n *      </div>\n *    );\n * }\n * ```\n */\nconst useDrag = (options = defaultOptions) => {\n  const targetRef = options.ref // the target draggable element\n  const dragStartHandlerRef = useRef() // a ref to user's onDragStart handler\n  const dragHandlerRef = useRef() // a ref to user's onDrag handler\n  const dragEndHandlerRef = useRef() // a ref to user's onDragEnd handler\n  // the dragging state is created from a useRef rather than a useState to avoid rendering during the dragging process\n  const { current: info } = useRef({ isDragging: false, start: null, end: null, offset: null })\n\n  /**\n   * When the dragging starts, updates the state then perform the user's onDragStart handler if exists\n   */\n  const onDragStart = useCallback(\n    (event) => {\n      if (!info.isDragging && targetRef.current.contains(event.target)) {\n        info.isDragging = true\n        info.end = null\n        info.offset = null\n        info.start = getEventCoordinates(event)\n\n        if (dragStartHandlerRef.current) {\n          dragStartHandlerRef.current(event, { ...info })\n        }\n      }\n    },\n    [targetRef.current, info, dragStartHandlerRef.current]\n  )\n\n  /**\n   * Whilst dragging the element, updates the state then perform the user's onDrag handler if exists\n   */\n  const onDrag = useCallback(\n    throttle((event) => {\n      if (info.isDragging) {\n        info.offset = [info.start[0] - event.clientX, info.start[1] - event.clientY]\n\n        if (dragHandlerRef.current) {\n          dragHandlerRef.current(event, { ...info })\n        }\n      }\n    }, options.throttleBy),\n    [targetRef.current, info, dragHandlerRef.current]\n  )\n\n  /**\n   * When the dragging ends, updates the state then perform the user's onDragEnd handler if exists\n   */\n  const onDragEnd = useCallback(\n    (event) => {\n      if (info.isDragging) {\n        info.isDragging = false\n        info.end = getEventCoordinates(event)\n\n        if (dragEndHandlerRef.current) {\n          dragEndHandlerRef.current(event, { ...info })\n        }\n      }\n    },\n    [targetRef.current, info, dragEndHandlerRef.current]\n  )\n\n  /**\n   * When the layout renders the target item, assign the dragging events\n   */\n  useEffect(() => {\n    /* eslint-disable no-underscore-dangle */\n    const _onDragStart = (e) => onDragStart(e)\n    const _onDrag = (e) => onDrag(e)\n    const _onDragEnd = (e) => onDragEnd(e)\n    /* eslint-enable no-underscore-dangle */\n\n    if (targetRef.current) {\n      targetRef.current.addEventListener('mousedown', _onDragStart)\n      document.addEventListener('mousemove', _onDrag)\n      document.addEventListener('mouseup', _onDragEnd)\n    }\n\n    return () => {\n      if (targetRef.current) {\n        targetRef.current.removeEventListener('mousedown', _onDragStart)\n        document.removeEventListener('mousemove', _onDrag)\n        document.removeEventListener('mouseup', _onDragEnd)\n      }\n    }\n  }, [targetRef.current])\n\n  return {\n    ref: targetRef,\n    onDragStart: CreateCallbackRef(dragStartHandlerRef),\n    onDrag: CreateCallbackRef(dragHandlerRef),\n    onDragEnd: CreateCallbackRef(dragEndHandlerRef),\n  }\n}\n\nexport default useDrag\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Diagram.js",["157"],"import React, { useCallback, useState, useRef } from 'react'\nimport DiagramCanvas from './DiagramCanvas/DiagramCanvas'\nimport NodesCanvas from './NodesCanvas/NodesCanvas'\nimport LinksCanvas from './LinksCanvas/LinksCanvas'\n\nimport './diagram.scss'\n\n/**\n * The Diagram component is the root-node of any diagram.<br />\n * It accepts a `schema` prop defining the current state of the diagram and emits its possible changes through the\n * `onChange` prop, allowing the developer to have the best possible control over the diagram and its interactions\n * with the user.\n */\nconst Diagram = (props) => {\n  const { schema, onChange, onAddHistory, scale, ...rest } = props\n  const [segment, setSegment] = useState()\n  const { current: portRefs } = useRef({}) // keeps the port elements references\n  const { current: nodeRefs } = useRef({}) // keeps the node elements references\n\n  // when nodes change, performs the onChange callback with the new incoming data\n  const onNodesChange = (nextNodes) => {\n    if (onChange) {\n      onChange({ nodes: nextNodes })\n    }\n  }\n\n  // when a port is registered, save it to the local reference\n  const onPortRegister = (portId, portEl) => {\n    portRefs[portId] = portEl\n  }\n\n  // when a node is registered, save it to the local reference\n  const onNodeRegister = (nodeId, nodeEl) => {\n    const rect = nodeEl.getBoundingClientRect()\n    nodeRefs[nodeId] = {\n      width: rect.width / scale,\n      height: rect.height / scale,\n    }\n  }\n\n  // when a node is deleted, remove its references\n  const onNodeRemove = useCallback((nodeId, inputsPorts, outputsPorts) => {\n    delete nodeRefs[nodeId]\n    inputsPorts.forEach((input) => delete portRefs[input])\n    outputsPorts.forEach((output) => delete portRefs[output])\n  }, [])\n\n  // when a new segment is dragged, save it to the local state\n  const onDragNewSegment = useCallback((portId, from, to, alignment) => {\n    setSegment({ id: `segment-${portId}`, from, to, alignment })\n  }, [])\n\n  // when a segment fails to connect, reset the segment state\n  const onSegmentFail = useCallback(() => {\n    setSegment(undefined)\n  }, [])\n\n  // when a segment connects, update the links schema, perform the onChange callback\n  // with the new data, then reset the segment state\n  const onSegmentConnect = (input, output) => {\n    const nextLinks = [...(schema.links || []), { input, output }]\n    if (onChange) {\n      onChange({ links: nextLinks })\n    }\n    setSegment(undefined)\n  }\n\n  // when links change, performs the onChange callback with the new incoming data\n  const onLinkDelete = (nextLinks) => {\n    if (onChange) {\n      onChange({ links: nextLinks })\n    }\n  }\n\n  return (\n    <DiagramCanvas portRefs={portRefs} nodeRefs={nodeRefs} scale={scale} {...rest}>\n      <NodesCanvas\n        scale={scale}\n        nodes={schema.nodes}\n        onChange={onNodesChange}\n        onNodeRegister={onNodeRegister}\n        onPortRegister={onPortRegister}\n        onNodeRemove={onNodeRemove}\n        onDragNewSegment={onDragNewSegment}\n        onSegmentFail={onSegmentFail}\n        onSegmentConnect={onSegmentConnect}\n        onAddHistory={onAddHistory}\n      />\n      <LinksCanvas nodes={schema.nodes} links={schema.links} segment={segment} onChange={onLinkDelete} />\n    </DiagramCanvas>\n  )\n}\n\n\n\nexport default React.memo(Diagram)\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/Types.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link/Link.tsx",["158"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/makeSvgPath.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link/LinkDelete.tsx",[],{"ruleId":"159","severity":1,"message":"160","line":32,"column":53,"nodeType":"161","endLine":32,"endColumn":72,"suggestions":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":49,"column":46,"nodeType":"169","messageId":"170","endLine":49,"endColumn":51},{"ruleId":"163","replacedBy":"171"},{"ruleId":"165","replacedBy":"172"},{"ruleId":"159","severity":1,"message":"173","line":12,"column":66,"nodeType":"161","endLine":12,"endColumn":87,"suggestions":"174"},{"ruleId":"159","severity":1,"message":"175","line":15,"column":6,"nodeType":"161","endLine":15,"endColumn":8,"suggestions":"176"},{"ruleId":"159","severity":1,"message":"177","line":17,"column":6,"nodeType":"161","endLine":17,"endColumn":42,"suggestions":"178"},{"ruleId":"159","severity":1,"message":"179","line":17,"column":7,"nodeType":"180","endLine":17,"endColumn":15},{"ruleId":"159","severity":1,"message":"179","line":17,"column":17,"nodeType":"180","endLine":17,"endColumn":24},{"ruleId":"159","severity":1,"message":"181","line":31,"column":6,"nodeType":"161","endLine":31,"endColumn":58,"suggestions":"182"},{"ruleId":"159","severity":1,"message":"183","line":31,"column":36,"nodeType":"180","endLine":31,"endColumn":44},{"ruleId":"159","severity":1,"message":"183","line":31,"column":46,"nodeType":"180","endLine":31,"endColumn":53},{"ruleId":"163","replacedBy":"184"},{"ruleId":"165","replacedBy":"185"},{"ruleId":"167","severity":1,"message":"186","line":1,"column":16,"nodeType":"169","messageId":"170","endLine":1,"endColumn":23},{"ruleId":"167","severity":1,"message":"187","line":1,"column":25,"nodeType":"169","messageId":"170","endLine":1,"endColumn":33},{"ruleId":"167","severity":1,"message":"188","line":2,"column":9,"nodeType":"169","messageId":"170","endLine":2,"endColumn":15},{"ruleId":"167","severity":1,"message":"189","line":2,"column":17,"nodeType":"169","messageId":"170","endLine":2,"endColumn":24},{"ruleId":"190","severity":1,"message":"191","line":12,"column":51,"nodeType":"192","messageId":"193","endLine":12,"endColumn":53},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"190","severity":1,"message":"191","line":11,"column":70,"nodeType":"192","messageId":"193","endLine":11,"endColumn":72},{"ruleId":"163","replacedBy":"194"},{"ruleId":"165","replacedBy":"195"},{"ruleId":"159","severity":1,"message":"196","line":37,"column":5,"nodeType":"161","endLine":37,"endColumn":18,"suggestions":"197"},{"ruleId":"159","severity":1,"message":"198","line":109,"column":5,"nodeType":"161","endLine":109,"endColumn":59,"suggestions":"199"},{"ruleId":"159","severity":1,"message":"200","line":115,"column":18,"nodeType":"169","endLine":115,"endColumn":29},{"ruleId":"159","severity":1,"message":"201","line":142,"column":5,"nodeType":"161","endLine":142,"endColumn":57,"suggestions":"202"},{"ruleId":"159","severity":1,"message":"203","line":163,"column":19,"nodeType":"169","endLine":163,"endColumn":26},{"ruleId":"159","severity":1,"message":"204","line":168,"column":6,"nodeType":"161","endLine":168,"endColumn":25,"suggestions":"205"},{"ruleId":"159","severity":1,"message":"206","line":46,"column":6,"nodeType":"161","endLine":46,"endColumn":8,"suggestions":"207"},{"ruleId":"159","severity":1,"message":"208","line":67,"column":6,"nodeType":"161","endLine":67,"endColumn":60,"suggestions":"209"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'calculateBBox'. Either include it or remove the dependency array. Mutable values like 'canvasRef.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["210"],"no-native-reassign",["211"],"no-negated-in-lhs",["212"],"@typescript-eslint/no-unused-vars","'clear' is assigned a value but never used.","Identifier","unusedVar",["211"],["212"],"React Hook useMemo has a missing dependency: 'pathOptions'. Either include it or remove the dependency array.",["213"],"React Hook useEffect has missing dependencies: 'id', 'inputs', 'onNodeRemove', and 'outputs'. Either include them or remove the dependency array. If 'onNodeRemove' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["214"],"React Hook useCallback has missing dependencies: 'canvas', 'onPortRegister', and 'ports'. Either include them or remove the dependency array. If 'onPortRegister' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["215"],"React Hook useCallback has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","UnaryExpression","React Hook useEffect has missing dependencies: 'canvas', 'nodes', and 'ref'. Either include them or remove the dependency array. Mutable values like 'ref.current' aren't valid dependencies because mutating them doesn't re-render the component.",["216"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.",["211"],["212"],"'useMemo' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'Popover' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["211"],["212"],"React Hook useCallback has a missing dependency: 'ref'. Either include it or remove the dependency array. Mutable values like 'ref.current' aren't valid dependencies because mutating them doesn't re-render the component.",["217"],"React Hook useCallback has a missing dependency: 'targetRef'. Either include it or remove the dependency array. Mutable values like 'targetRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["218"],"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useCallback has unnecessary dependencies: 'dragEndHandlerRef.current' and 'targetRef.current'. Either exclude them or remove the dependency array. Mutable values like 'targetRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["219"],"The ref value 'targetRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'targetRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'onDrag', 'onDragEnd', 'onDragStart', and 'targetRef'. Either include them or remove the dependency array. Mutable values like 'targetRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["220"],"React Hook useCallback has missing dependencies: 'nodeRefs' and 'portRefs'. Either include them or remove the dependency array.",["221"],"React Hook useEffect has an unnecessary dependency: 'pathRef.current'. Either exclude it or remove the dependency array. Mutable values like 'pathRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["222"],{"desc":"223","fix":"224"},"no-global-assign","no-unsafe-negation",{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},"Update the dependencies array to be: [calculateBBox]",{"range":"245","text":"246"},"Update the dependencies array to be: [from, to, pathOptions]",{"range":"247","text":"248"},"Update the dependencies array to be: [id, inputs, onNodeRemove, outputs]",{"range":"249","text":"250"},"Update the dependencies array to be: [canvas, inputs, onPortRegister, outputs, ports]",{"range":"251","text":"252"},"Update the dependencies array to be: [onNodeRegister, id, ref, canvas, nodes]",{"range":"253","text":"254"},"Update the dependencies array to be: [ref]",{"range":"255","text":"256"},"Update the dependencies array to be: [info, targetRef]",{"range":"257","text":"258"},"Update the dependencies array to be: [info]",{"range":"259","text":"260"},"Update the dependencies array to be: [onDrag, onDragEnd, onDragStart, targetRef]",{"range":"261","text":"262"},"Update the dependencies array to be: [nodeRefs, portRefs]",{"range":"263","text":"264"},"Update the dependencies array to be: [link.label, inputPoint, outputPoint]",{"range":"265","text":"266"},[1313,1332],"[calculateBBox]",[414,435],"[from, to, pathOptions]",[551,553],"[id, inputs, onNodeRemove, outputs]",[607,643],"[canvas, inputs, onPortRegister, outputs, ports]",[1058,1110],"[onNodeRegister, id, ref, canvas, nodes]",[843,856],"[ref]",[2766,2820],"[info, targetRef]",[3701,3753],"[info]",[4557,4576],"[onDrag, onDragEnd, onDragStart, targetRef]",[1750,1752],"[nodeRefs, portRefs]",[2400,2454],"[link.label, inputPoint, outputPoint]"]