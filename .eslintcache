[{"/Users/huangjin/Documents/work/person-project/react-mind-map/src/App.tsx":"1","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Diagram.js":"2","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/Types.js":"3","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/NodesCanvas/NodesCanvas.js":"4","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/NodesCanvas/updateNodeCoordinates.js":"5","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Segment/Segment.js":"6","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/DiagramNode.js":"7","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/getDiagramNodeStyle.js":"8","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link/getEntityCoordinates.js":"9","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useNodeUnregistration.js":"10","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getPathMidpoint.js":"11","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/makeSvgPath.js":"12","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getRelativePoint.js":"13","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Port/Port.js":"14","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useContextRegistration.js":"15","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramCanvas/DiagramCanvas.js":"16","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/usePortRefs.js":"17","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/portGenerator.js":"18","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link/LinkLabel.js":"19","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useDrag.js":"20","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Context/DiagramContext.js":"21","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useNodeRefs.js":"22","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinksCanvas/removeLinkFromArray.js":"23","/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useHistory.ts":"24","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getNodePortsId.js":"25","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link/Link.js":"26","/Users/huangjin/Documents/work/person-project/react-mind-map/src/index.tsx":"27","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinksCanvas/findInvolvedEntity.js":"28","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useCanvas.js":"29"},{"size":1594,"mtime":1610583516627,"results":"30","hashOfConfig":"31"},{"size":3697,"mtime":1610549661307,"results":"32","hashOfConfig":"31"},{"size":1109,"mtime":1610497565577,"results":"33","hashOfConfig":"31"},{"size":2012,"mtime":1610548359354,"results":"34","hashOfConfig":"31"},{"size":605,"mtime":1610547014931,"results":"35","hashOfConfig":"31"},{"size":831,"mtime":1610497565566,"results":"36","hashOfConfig":"31"},{"size":5467,"mtime":1610548276969,"results":"37","hashOfConfig":"31"},{"size":193,"mtime":1610497565544,"results":"38","hashOfConfig":"31"},{"size":837,"mtime":1610549761079,"results":"39","hashOfConfig":"31"},{"size":598,"mtime":1610497565596,"results":"40","hashOfConfig":"31"},{"size":304,"mtime":1610497565585,"results":"41","hashOfConfig":"31"},{"size":1847,"mtime":1610497565589,"results":"42","hashOfConfig":"31"},{"size":130,"mtime":1610497565588,"results":"43","hashOfConfig":"31"},{"size":2210,"mtime":1610547299911,"results":"44","hashOfConfig":"31"},{"size":1116,"mtime":1610497565594,"results":"45","hashOfConfig":"31"},{"size":2022,"mtime":1610546949877,"results":"46","hashOfConfig":"31"},{"size":284,"mtime":1610497565597,"results":"47","hashOfConfig":"31"},{"size":410,"mtime":1610497565545,"results":"48","hashOfConfig":"31"},{"size":445,"mtime":1610497565548,"results":"49","hashOfConfig":"31"},{"size":4797,"mtime":1610546949873,"results":"50","hashOfConfig":"31"},{"size":108,"mtime":1610497565526,"results":"51","hashOfConfig":"31"},{"size":284,"mtime":1610497565596,"results":"52","hashOfConfig":"31"},{"size":163,"mtime":1610546949870,"results":"53","hashOfConfig":"31"},{"size":2790,"mtime":1610548209506,"results":"54","hashOfConfig":"31"},{"size":367,"mtime":1610497565581,"results":"55","hashOfConfig":"31"},{"size":3189,"mtime":1610550151012,"results":"56","hashOfConfig":"31"},{"size":500,"mtime":1610497175539,"results":"57","hashOfConfig":"31"},{"size":613,"mtime":1610497565555,"results":"58","hashOfConfig":"31"},{"size":286,"mtime":1610497565593,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"1la7djy",{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"80"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"/Users/huangjin/Documents/work/person-project/react-mind-map/src/App.tsx",["131","132","133","134"],"import React, {useCallback} from 'react'\nimport Diagram from './components/Diagram/Diagram'\nimport {useHistory} from './hooks/useHistory'\nimport { Button } from 'antd';\n\n\nconst defaultValue = {\n  nodes: [\n    {\n      id: 'node-1',\n      content: 'Start',\n      coordinates: [100, 150],\n      outputs: [\n        {id: 'port-1', alignment: 'right'},\n        // {id: 'port-2', alignment: 'right'},\n      ],\n      disableDrag: false,\n      data: {\n        foo: 'bar',\n        count: 0,\n      }\n    },\n    {\n      id: 'node-2',\n      content: 'Middle',\n      coordinates: [300, 150],\n      inputs: [\n        // {id: 'port-3', alignment: 'left'},\n        // {id: 'port-4', alignment: 'left'},\n      ],\n      outputs: [\n        // {id: 'port-5', alignment: 'right'},\n        // {id: 'port-6', alignment: 'right'},\n      ],\n      data: {\n        bar: 'foo',\n      }\n    }\n  ],\n  links: [\n    {input: 'port-1', output: 'node-2'},\n  ]\n}\n\nfunction App() {\n\n  const {state, set, setHistory, undo, redo, clear, canUndo, canRedo} = useHistory(defaultValue)\n\n  // const [schema, setSchema] = useState(defaultValue)\n  const handleChange = useCallback((value: any) => {\n    const newValue = {...state, ...value}\n    set(newValue)\n  }, [set, state])\n\n  const hanleAddHistory = (value:any) => {\n    const newValue = {...state, ...value}\n    setHistory(newValue)\n  }\n\n  return (\n    <div className=\"App\">\n      <Diagram schema={state} onChange={handleChange} onAddHistory={hanleAddHistory}/>\n      <Button onClick={undo}>undo</Button>\n      <Button onClick={redo}>redo</Button>\n    </div>\n  )\n}\n\nexport default App\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Diagram.js",["135","136"],"import React, { useCallback, useState, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport DiagramCanvas from './DiagramCanvas/DiagramCanvas'\nimport NodesCanvas from './NodesCanvas/NodesCanvas'\nimport LinksCanvas from './LinksCanvas/LinksCanvas'\nimport { SchemaType } from '../shared/Types'\n\nimport './diagram.scss'\nimport stackGet from 'lodash-es/_stackGet'\n\n/**\n * The Diagram component is the root-node of any diagram.<br />\n * It accepts a `schema` prop defining the current state of the diagram and emits its possible changes through the\n * `onChange` prop, allowing the developer to have the best possible control over the diagram and its interactions\n * with the user.\n */\nconst Diagram = (props) => {\n  const { schema, onChange, onAddHistory, ...rest } = props\n  const [segment, setSegment] = useState()\n  const { current: portRefs } = useRef({}) // keeps the port elements references\n  const { current: nodeRefs } = useRef({}) // keeps the node elements references\n\n  // when nodes change, performs the onChange callback with the new incoming data\n  const onNodesChange = (nextNodes) => {\n    if (onChange) {\n      onChange({ nodes: nextNodes })\n    }\n  }\n\n  const handleAddHistory = (nextNodes) => {\n    if (onAddHistory) {\n      onAddHistory({ nodes: nextNodes })\n    }\n  }\n\n  // when a port is registered, save it to the local reference\n  const onPortRegister = (portId, portEl) => {\n    portRefs[portId] = portEl\n  }\n\n  // when a node is registered, save it to the local reference\n  const onNodeRegister = (nodeId, nodeEl) => {\n    nodeRefs[nodeId] = nodeEl\n  }\n\n  // when a node is deleted, remove its references\n  const onNodeRemove = useCallback((nodeId, inputsPorts, outputsPorts) => {\n    delete nodeRefs[nodeId]\n    inputsPorts.forEach((input) => delete portRefs[input])\n    outputsPorts.forEach((output) => delete portRefs[output])\n  }, [])\n\n  // when a new segment is dragged, save it to the local state\n  const onDragNewSegment = useCallback((portId, from, to, alignment) => {\n    setSegment({ id: `segment-${portId}`, from, to, alignment })\n  }, [])\n\n  // when a segment fails to connect, reset the segment state\n  const onSegmentFail = useCallback(() => {\n    setSegment(undefined)\n  }, [])\n\n  // when a segment connects, update the links schema, perform the onChange callback\n  // with the new data, then reset the segment state\n  const onSegmentConnect = (input, output) => {\n    const nextLinks = [...(schema.links || []), { input, output }]\n    if (onChange) {\n      onChange({ links: nextLinks })\n    }\n    setSegment(undefined)\n  }\n\n  // when links change, performs the onChange callback with the new incoming data\n  const onLinkDelete = (nextLinks) => {\n    if (onChange) {\n      onChange({ links: nextLinks })\n    }\n  }\n\n  return (\n    <DiagramCanvas portRefs={portRefs} nodeRefs={nodeRefs} {...rest}>\n      <NodesCanvas\n        onAddHistory={handleAddHistory}\n        nodes={schema.nodes}\n        onChange={onNodesChange}\n        onNodeRegister={onNodeRegister}\n        onPortRegister={onPortRegister}\n        onNodeRemove={onNodeRemove}\n        onDragNewSegment={onDragNewSegment}\n        onSegmentFail={onSegmentFail}\n        onSegmentConnect={onSegmentConnect}\n      />\n      <LinksCanvas nodes={schema.nodes} links={schema.links} segment={segment} onChange={onLinkDelete}/>\n    </DiagramCanvas>\n  )\n}\n\nDiagram.propTypes = {\n  /**\n   * The diagram current schema\n   */\n  schema: SchemaType,\n  /**\n   * The callback to be performed every time the model changes\n   */\n  onChange: PropTypes.func,\n  onAddHistory: PropTypes.func\n}\n\nDiagram.defaultProps = {\n  schema: { nodes: [], links: [] },\n  onChange: undefined\n}\n\nexport default React.memo(Diagram)\n",["137","138"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/Types.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/NodesCanvas/NodesCanvas.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/NodesCanvas/updateNodeCoordinates.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Segment/Segment.js",["139"],"import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { PortAlignment } from '../../shared/Types';\nimport makeSvgPath from '../../shared/functions/makeSvgPath';\n\n/**\n * Segment\n */\nconst Segment = (props) => {\n  const { from, to, alignment } = props;\n  const pathOptions = { type: 'bezier', inputAlignment: alignment };\n  const path = useMemo(() => makeSvgPath(from, to, pathOptions), [from, to, alignment]);\n\n  return (\n    <g className=\"bi-diagram-segment\">\n      <path d={path} />\n      <circle r=\"6.5\" cx={to[0]} cy={to[1]} />\n    </g>\n  );\n};\n\nSegment.propTypes = {\n  from: PropTypes.arrayOf(PropTypes.number).isRequired,\n  to: PropTypes.arrayOf(PropTypes.number).isRequired,\n  alignment: PortAlignment,\n};\n\nSegment.defaultProps = {\n  alignment: undefined,\n};\n\nexport default React.memo(Segment);\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/DiagramNode.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/getDiagramNodeStyle.js",[],["140","141"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link/getEntityCoordinates.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useNodeUnregistration.js",["142"],"import { useEffect } from 'react';\nimport getNodePortsId from '../functions/getNodePortsId';\n\n/**\n * Takes the inputs and outputs node ports and onNodeRemove callback to be performed when the node is unmounted\n */\nconst useNodeUnregistration = (onNodeRemove, inputs, outputs, id) => {\n  useEffect(() => () => {\n    if (onNodeRemove) {\n      const node = { inputs, outputs };\n      const inputsPort = getNodePortsId(node, 'inputs');\n      const outputsPort = getNodePortsId(node, 'outputs');\n      onNodeRemove(id, inputsPort, outputsPort);\n    }\n  }, []);\n};\n\nexport default useNodeUnregistration;\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getPathMidpoint.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/makeSvgPath.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getRelativePoint.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Port/Port.js",["143"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useContextRegistration.js",["144","145","146","147","148","149"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramCanvas/DiagramCanvas.js",["150"],"import React, { useEffect, useRef, useState } from 'react'\n// import { useWindowScroll, useWindowResize } from 'beautiful-react-hooks';\nimport { isEqual } from 'lodash-es'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport DiagramContext from '../../Context/DiagramContext'\n\n/**\n * The DiagramCanvas component provides a context to the Diagram children.\n * The context contains the canvas bounding box (for future calculations) and the port references in order to\n * allow links to easily access to a the ports coordinates\n */\nconst DiagramCanvas = (props) => {\n  const { children, portRefs, nodeRefs, className, ...rest } = props\n  const [bbox, setBoundingBox] = useState(null)\n  const canvasRef = useRef()\n  const classList = classNames('bi bi-diagram', className)\n\n  // calculate the given element bounding box and save it into the bbox state\n  const calculateBBox = (el) => {\n    if (el) {\n      const nextBBox = el.getBoundingClientRect()\n      if (!isEqual(nextBBox, bbox)) {\n        setBoundingBox(nextBBox)\n      }\n    }\n  }\n\n  // when the canvas is ready and placed within the DOM, save its bounding box to be provided down\n  // to children component as a context value for future calculations.\n  useEffect(() => calculateBBox(canvasRef.current), [canvasRef.current])\n  // same on window scroll and resize\n  // useWindowScroll(() => calculateBBox(canvasRef.current));\n  // useWindowResize(() => calculateBBox(canvasRef.current));\n\n  return (\n    <div className={classList} ref={canvasRef} {...rest}>\n      <div className=\"bi-diagram-canvas\">\n        <DiagramContext.Provider value={{ canvas: bbox, ports: portRefs, nodes: nodeRefs, _nodes: {} }}>\n          {children}\n        </DiagramContext.Provider>\n      </div>\n    </div>\n  )\n}\n\nDiagramCanvas.propTypes = {\n  portRefs: PropTypes.shape({}),\n  nodeRefs: PropTypes.shape({}),\n  className: PropTypes.string,\n}\n\nDiagramCanvas.defaultProps = {\n  portRefs: {},\n  nodeRefs: {},\n  className: '',\n}\n\nexport default React.memo(DiagramCanvas)\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/usePortRefs.js",[],["151","152"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/portGenerator.js",[],["153","154"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link/LinkLabel.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useDrag.js",["155","156","157","158","159","160"],"import { throttle } from 'lodash-es'\nimport { useRef, useCallback, useEffect } from 'react'\n\nconst defaultOptions = {\n  /**\n   * A custom ref to be used in place of a new one\n   * @default undefined\n   */\n  ref: undefined,\n  /**\n   * Throttle the onDrag handler by the given ms\n   * @default 0ms\n   */\n  throttleBy: 0,\n}\n\n/**\n * Returns the click coordinates of a MouseEvent\n * @param event\n * @returns {*[]}\n */\nconst getEventCoordinates = (event) => [event.clientX, event.clientY]\n\n/**\n * Create a persistent callback reference that will live trough a component lifecycle\n * @param ref\n * @returns {Function}\n */\nconst CreateCallbackRef = (ref) =>\n  useCallback(\n    (callback) => {\n      if (!ref.current || callback !== ref.current) {\n        // eslint-disable-next-line no-param-reassign\n        ref.current = callback\n      }\n    },\n    [ref.current]\n  )\n\n/**\n * A custom hook exposing handlers and ref for developing draggable React elements.\n *\n * ## Basic Usage:\n *\n * ```\n * const DraggableItem = () => {\n *    const { ref, isDragging, onDragStart, onDrag, onDragEnd } = useDrag();\n *\n *    onDragStart(dragStartHandler);\n *\n *    onDrag(dragHandler);\n *\n *    onDragEnd(dragEndHandler);\n *\n *    return (\n *      <div ref={ref}>\n *        Drag me!\n *      </div>\n *    );\n * }\n * ```\n *\n * ## Options:\n *\n * ```\n * const DraggingItem = () => {\n *    const ref = useRef();\n *    const options = { ref, throttleBy: 60 };\n *    const { isDragging, onDragStart, onDrag, onDragEnd } = useDrag(options);\n *\n *    onDragStart(dragStartHandler);\n *\n *    onDrag(dragHandler);\n *\n *    onDragEnd(dragEndHandler);\n *\n *    return (\n *      <div ref={ref}>\n *        Drag me!\n *      </div>\n *    );\n * }\n * ```\n */\nconst useDrag = (options = defaultOptions) => {\n  const targetRef = options.ref // the target draggable element\n  const dragStartHandlerRef = useRef() // a ref to user's onDragStart handler\n  const dragHandlerRef = useRef() // a ref to user's onDrag handler\n  const dragEndHandlerRef = useRef() // a ref to user's onDragEnd handler\n  // the dragging state is created from a useRef rather than a useState to avoid rendering during the dragging process\n  const { current: info } = useRef({ isDragging: false, start: null, end: null, offset: null })\n\n  /**\n   * When the dragging starts, updates the state then perform the user's onDragStart handler if exists\n   */\n  const onDragStart = useCallback(\n    (event) => {\n      if (!info.isDragging && targetRef.current.contains(event.target)) {\n        info.isDragging = true\n        info.end = null\n        info.offset = null\n        info.start = getEventCoordinates(event)\n\n        if (dragStartHandlerRef.current) {\n          dragStartHandlerRef.current(event, { ...info })\n        }\n      }\n    },\n    [targetRef.current, info, dragStartHandlerRef.current]\n  )\n\n  /**\n   * Whilst dragging the element, updates the state then perform the user's onDrag handler if exists\n   */\n  const onDrag = useCallback(\n    throttle((event) => {\n      if (info.isDragging) {\n        info.offset = [info.start[0] - event.clientX, info.start[1] - event.clientY]\n\n        if (dragHandlerRef.current) {\n          dragHandlerRef.current(event, { ...info })\n        }\n      }\n    }, options.throttleBy),\n    [targetRef.current, info, dragHandlerRef.current]\n  )\n\n  /**\n   * When the dragging ends, updates the state then perform the user's onDragEnd handler if exists\n   */\n  const onDragEnd = useCallback(\n    (event) => {\n      if (info.isDragging) {\n        info.isDragging = false\n        info.end = getEventCoordinates(event)\n\n        if (dragEndHandlerRef.current) {\n          dragEndHandlerRef.current(event, { ...info })\n        }\n      }\n    },\n    [targetRef.current, info, dragEndHandlerRef.current]\n  )\n\n  /**\n   * When the layout renders the target item, assign the dragging events\n   */\n  useEffect(() => {\n    /* eslint-disable no-underscore-dangle */\n    const _onDragStart = (e) => onDragStart(e)\n    const _onDrag = (e) => onDrag(e)\n    const _onDragEnd = (e) => onDragEnd(e)\n    /* eslint-enable no-underscore-dangle */\n\n    if (targetRef.current) {\n      targetRef.current.addEventListener('mousedown', _onDragStart)\n      document.addEventListener('mousemove', _onDrag)\n      document.addEventListener('mouseup', _onDragEnd)\n    }\n\n    return () => {\n      if (targetRef.current) {\n        targetRef.current.removeEventListener('mousedown', _onDragStart)\n        document.removeEventListener('mousemove', _onDrag)\n        document.removeEventListener('mouseup', _onDragEnd)\n      }\n    }\n  }, [targetRef.current])\n\n  return {\n    ref: targetRef,\n    onDragStart: CreateCallbackRef(dragStartHandlerRef),\n    onDrag: CreateCallbackRef(dragHandlerRef),\n    onDragEnd: CreateCallbackRef(dragEndHandlerRef),\n  }\n}\n\nexport default useDrag\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Context/DiagramContext.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useNodeRefs.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinksCanvas/removeLinkFromArray.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useHistory.ts",["161"],"import {useReducer, useCallback} from 'react';\n\n\n// 初始化useReducer中的state\nconst initialState = {\n    // 当我们每次添加新state时，用来储存更新前状态的数组\n    past: [],\n    // 当前的state值\n    present: null,\n    // 让我们可以用使用重做功能的，future数组\n    future: []\n};\n\n// 根据action处理state的改变\nconst reducer = (state: any, action: any) => {\n    const {past, present, future} = state;\n    const {newPresent} = action;\n\n\n    switch (action.type) {\n        case 'UNDO':\n            const previous = past[past.length - 1];\n            const newPast = past.slice(0, past.length - 1);\n\n            return {\n                past: newPast,\n                present: previous,\n                future: [present, ...future]\n            };\n        case 'REDO':\n            const next = future[0];\n            const newFuture = future.slice(1);\n\n            return {\n                past: [...past, present],\n                present: next,\n                future: newFuture\n            };\n        case 'SET':\n\n            if (newPresent === present) {\n                return state;\n            }\n            return {\n                past: [...past],\n                present: newPresent,\n                future: [...future]\n            };\n\n        case 'SET_HISTORY':\n\n            return {\n                past: [...past, newPresent],\n                present: present,\n                future: []\n            };\n        case 'CLEAR':\n            const {initialPresent} = action;\n\n            return {\n                ...initialState,\n                present: initialPresent\n            };\n    }\n};\n\n// Hook\nexport const useHistory = (initialPresent: any) => {\n    const [state, dispatch] = useReducer(reducer, {\n        ...initialState,\n        present: initialPresent\n    });\n\n    const canUndo = state.past.length !== 0;\n    const canRedo = state.future.length !== 0;\n\n\n    const undo = useCallback(\n        () => {\n            if (canUndo) {\n                dispatch({type: 'UNDO'});\n            }\n        },\n        [canUndo, dispatch]\n    );\n\n    const redo = useCallback(\n        () => {\n            if (canRedo) {\n                dispatch({type: 'REDO'});\n            }\n        },\n        [canRedo, dispatch]\n    );\n\n    const set = useCallback(newPresent => dispatch({type: 'SET', newPresent}), [\n        dispatch\n    ]);\n\n    const setHistory = useCallback(newPresent => dispatch({type: 'SET_HISTORY', newPresent}), [\n        dispatch\n    ]);\n\n\n\n    const clear = useCallback(() => dispatch({type: 'CLEAR', initialPresent}), [\n        dispatch\n    ]);\n    console.log(state);\n    // 如果需要，同样可以到处过去和未来的state\n    return {state: state.present, set,setHistory, undo, redo, clear, canUndo, canRedo};\n};\n",["162","163"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getNodePortsId.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link/Link.js",["164","165","166","167"],"import React, { useEffect, useRef, useState, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { LinkType, NodeType, PortType } from '../../shared/Types';\nimport usePortRefs from '../../shared/internal_hooks/usePortRefs';\nimport useCanvas from '../../shared/internal_hooks/useCanvas';\nimport getCoords from './getEntityCoordinates';\nimport makeSvgPath from '../../shared/functions/makeSvgPath';\nimport getPathMidpoint from '../../shared/functions/getPathMidpoint';\nimport useNodeRefs from '../../shared/internal_hooks/useNodeRefs';\nimport LinkLabel from './LinkLabel';\n\n// local hook, returns portRefs & nodeRefs\nconst useContextRefs = () => {\n  const canvas = useCanvas();\n  const portRefs = usePortRefs();\n  const nodeRefs = useNodeRefs();\n\n  return { canvas, nodeRefs, portRefs };\n};\n\n/**\n * A Diagram link component displays the link between two diagram nodes or two node ports.\n */\nconst Link = (props) => {\n  const { input, output, link, onDelete } = props;\n  const pathRef = useRef();\n  const [labelPosition, setLabelPosition] = useState();\n  const { canvas, portRefs, nodeRefs } = useContextRefs();\n  const inputPoint = useMemo(() => getCoords(input, portRefs, nodeRefs, canvas), [input, portRefs, nodeRefs, canvas]);\n  /* eslint-disable max-len */\n  const classList = useMemo(() => classNames('bi-diagram-link', { 'readonly-link': link.readonly }, link.className), [link.readonly, link.className]);\n  const outputPoint = useMemo(() => getCoords(output, portRefs, nodeRefs, canvas), [output, portRefs, nodeRefs, canvas]);\n  /* eslint-enable max-len */\n  const pathOptions = {\n    type: (input.type === 'port' || output.type === 'port') ? 'bezier' : 'curve',\n    inputAlignment: input.entity.alignment || null,\n    outputAlignment: output.entity.alignment || null,\n  };\n  useEffect(()=>{\n    console.log(portRefs[input.entity.id])\n\n  },[])\n\n  const path = useMemo(() => makeSvgPath(inputPoint, outputPoint, pathOptions), [inputPoint, outputPoint]);\n\n  // calculates label position\n  useEffect(() => {\n    if (link.label && inputPoint && outputPoint && pathRef.current) {\n      const pos = getPathMidpoint(pathRef.current);\n      setLabelPosition(pos);\n    }\n  }, [pathRef.current, link.label, inputPoint, outputPoint]);\n\n  // on link delete\n  const onDoubleClick = useCallback(() => {\n    if (onDelete && !link.readonly) {\n      onDelete(link);\n    }\n  }, [link.readonly, onDelete]);\n\n  return (\n    <g className={classList}>\n      {!link.readonly && (<path d={path} className=\"bi-link-ghost\" onDoubleClick={onDoubleClick} />)}\n      <path d={path} ref={pathRef} className=\"bi-link-path\" onDoubleClick={onDoubleClick} />\n      {link.label && labelPosition && (<LinkLabel position={labelPosition} label={link.label} />)}\n    </g>\n  );\n};\n\nconst InvolvedEntity = PropTypes.exact({\n  type: PropTypes.oneOf(['node', 'port']),\n  entity: PropTypes.oneOfType([PortType, NodeType]),\n});\n\nLink.propTypes = {\n  link: LinkType.isRequired,\n  input: InvolvedEntity.isRequired,\n  output: InvolvedEntity.isRequired,\n  onDelete: PropTypes.func,\n};\n\nLink.defaultProps = {\n  onDelete: undefined,\n};\n\nexport default React.memo(Link);\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/index.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinksCanvas/findInvolvedEntity.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useCanvas.js",[],{"ruleId":"168","severity":1,"message":"169","line":4,"column":10,"nodeType":"170","messageId":"171","endLine":4,"endColumn":16},{"ruleId":"168","severity":1,"message":"172","line":47,"column":46,"nodeType":"170","messageId":"171","endLine":47,"endColumn":51},{"ruleId":"168","severity":1,"message":"173","line":47,"column":53,"nodeType":"170","messageId":"171","endLine":47,"endColumn":60},{"ruleId":"168","severity":1,"message":"174","line":47,"column":62,"nodeType":"170","messageId":"171","endLine":47,"endColumn":69},{"ruleId":"175","severity":1,"message":"176","line":9,"column":8,"nodeType":"170","messageId":"171","endLine":9,"endColumn":16},{"ruleId":"177","severity":1,"message":"178","line":51,"column":6,"nodeType":"179","endLine":51,"endColumn":8,"suggestions":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"177","severity":1,"message":"185","line":12,"column":66,"nodeType":"179","endLine":12,"endColumn":87,"suggestions":"186"},{"ruleId":"181","replacedBy":"187"},{"ruleId":"183","replacedBy":"188"},{"ruleId":"177","severity":1,"message":"189","line":15,"column":6,"nodeType":"179","endLine":15,"endColumn":8,"suggestions":"190"},{"ruleId":"177","severity":1,"message":"191","line":47,"column":6,"nodeType":"179","endLine":47,"endColumn":19,"suggestions":"192"},{"ruleId":"177","severity":1,"message":"193","line":17,"column":6,"nodeType":"179","endLine":17,"endColumn":42,"suggestions":"194"},{"ruleId":"177","severity":1,"message":"195","line":17,"column":7,"nodeType":"196","endLine":17,"endColumn":15},{"ruleId":"177","severity":1,"message":"195","line":17,"column":17,"nodeType":"196","endLine":17,"endColumn":24},{"ruleId":"177","severity":1,"message":"197","line":31,"column":6,"nodeType":"179","endLine":31,"endColumn":58,"suggestions":"198"},{"ruleId":"177","severity":1,"message":"199","line":31,"column":36,"nodeType":"196","endLine":31,"endColumn":44},{"ruleId":"177","severity":1,"message":"199","line":31,"column":46,"nodeType":"196","endLine":31,"endColumn":53},{"ruleId":"177","severity":1,"message":"200","line":31,"column":53,"nodeType":"179","endLine":31,"endColumn":72,"suggestions":"201"},{"ruleId":"181","replacedBy":"202"},{"ruleId":"183","replacedBy":"203"},{"ruleId":"181","replacedBy":"204"},{"ruleId":"183","replacedBy":"205"},{"ruleId":"177","severity":1,"message":"206","line":37,"column":5,"nodeType":"179","endLine":37,"endColumn":18,"suggestions":"207"},{"ruleId":"177","severity":1,"message":"208","line":109,"column":5,"nodeType":"179","endLine":109,"endColumn":59,"suggestions":"209"},{"ruleId":"177","severity":1,"message":"210","line":115,"column":18,"nodeType":"170","endLine":115,"endColumn":29},{"ruleId":"177","severity":1,"message":"211","line":142,"column":5,"nodeType":"179","endLine":142,"endColumn":57,"suggestions":"212"},{"ruleId":"177","severity":1,"message":"213","line":163,"column":19,"nodeType":"170","endLine":163,"endColumn":26},{"ruleId":"177","severity":1,"message":"214","line":168,"column":6,"nodeType":"179","endLine":168,"endColumn":25,"suggestions":"215"},{"ruleId":"177","severity":1,"message":"216","line":106,"column":80,"nodeType":"179","endLine":108,"endColumn":6,"suggestions":"217"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"177","severity":1,"message":"218","line":43,"column":5,"nodeType":"179","endLine":43,"endColumn":7,"suggestions":"219"},{"ruleId":"177","severity":1,"message":"185","line":45,"column":81,"nodeType":"179","endLine":45,"endColumn":106,"suggestions":"220"},{"ruleId":"177","severity":1,"message":"221","line":53,"column":6,"nodeType":"179","endLine":53,"endColumn":60,"suggestions":"222"},{"ruleId":"177","severity":1,"message":"223","line":60,"column":6,"nodeType":"179","endLine":60,"endColumn":31,"suggestions":"224"},"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'clear' is assigned a value but never used.","'canUndo' is assigned a value but never used.","'canRedo' is assigned a value but never used.","no-unused-vars","'stackGet' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'nodeRefs' and 'portRefs'. Either include them or remove the dependency array.","ArrayExpression",["225"],"no-native-reassign",["226"],"no-negated-in-lhs",["227"],"React Hook useMemo has a missing dependency: 'pathOptions'. Either include it or remove the dependency array.",["228"],["226"],["227"],"React Hook useEffect has missing dependencies: 'id', 'inputs', 'onNodeRemove', and 'outputs'. Either include them or remove the dependency array. If 'onNodeRemove' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["229"],"React Hook useEffect has missing dependencies: 'id' and 'onMount'. Either include them or remove the dependency array. Mutable values like 'ref.current' aren't valid dependencies because mutating them doesn't re-render the component.",["230"],"React Hook useCallback has missing dependencies: 'canvas', 'onPortRegister', and 'ports'. Either include them or remove the dependency array. If 'onPortRegister' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["231"],"React Hook useCallback has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","UnaryExpression","React Hook useEffect has missing dependencies: 'canvas', 'nodes', and 'ref'. Either include them or remove the dependency array. Mutable values like 'ref.current' aren't valid dependencies because mutating them doesn't re-render the component.",["232"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","React Hook useEffect has a missing dependency: 'calculateBBox'. Either include it or remove the dependency array. Mutable values like 'canvasRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["233"],["226"],["227"],["226"],["227"],"React Hook useCallback has a missing dependency: 'ref'. Either include it or remove the dependency array. Mutable values like 'ref.current' aren't valid dependencies because mutating them doesn't re-render the component.",["234"],"React Hook useCallback has a missing dependency: 'targetRef'. Either include it or remove the dependency array. Mutable values like 'targetRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["235"],"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useCallback has unnecessary dependencies: 'dragEndHandlerRef.current' and 'targetRef.current'. Either exclude them or remove the dependency array. Mutable values like 'targetRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["236"],"The ref value 'targetRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'targetRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'onDrag', 'onDragEnd', 'onDragStart', and 'targetRef'. Either include them or remove the dependency array. Mutable values like 'targetRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["237"],"React Hook useCallback has a missing dependency: 'initialPresent'. Either include it or remove the dependency array.",["238"],"React Hook useEffect has missing dependencies: 'input.entity.id' and 'portRefs'. Either include them or remove the dependency array.",["239"],["240"],"React Hook useEffect has an unnecessary dependency: 'pathRef.current'. Either exclude it or remove the dependency array. Mutable values like 'pathRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["241"],"React Hook useCallback has a missing dependency: 'link'. Either include it or remove the dependency array.",["242"],{"desc":"243","fix":"244"},"no-global-assign","no-unsafe-negation",{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},"Update the dependencies array to be: [nodeRefs, portRefs]",{"range":"275","text":"276"},"Update the dependencies array to be: [from, to, pathOptions]",{"range":"277","text":"278"},"Update the dependencies array to be: [id, inputs, onNodeRemove, outputs]",{"range":"279","text":"280"},"Update the dependencies array to be: [id, onMount]",{"range":"281","text":"282"},"Update the dependencies array to be: [canvas, inputs, onPortRegister, outputs, ports]",{"range":"283","text":"284"},"Update the dependencies array to be: [onNodeRegister, id, ref, canvas, nodes]",{"range":"285","text":"286"},"Update the dependencies array to be: [calculateBBox]",{"range":"287","text":"288"},"Update the dependencies array to be: [ref]",{"range":"289","text":"290"},"Update the dependencies array to be: [info, targetRef]",{"range":"291","text":"292"},"Update the dependencies array to be: [info]",{"range":"293","text":"294"},"Update the dependencies array to be: [onDrag, onDragEnd, onDragStart, targetRef]",{"range":"295","text":"296"},"Update the dependencies array to be: [initialPresent]",{"range":"297","text":"298"},"Update the dependencies array to be: [input.entity.id, portRefs]",{"range":"299","text":"300"},"Update the dependencies array to be: [inputPoint, outputPoint, pathOptions]",{"range":"301","text":"302"},"Update the dependencies array to be: [link.label, inputPoint, outputPoint]",{"range":"303","text":"304"},"Update the dependencies array to be: [link, onDelete]",{"range":"305","text":"306"},[1869,1871],"[nodeRefs, portRefs]",[414,435],"[from, to, pathOptions]",[551,553],"[id, inputs, onNodeRemove, outputs]",[1509,1522],"[id, onMount]",[607,643],"[canvas, inputs, onPortRegister, outputs, ports]",[1058,1110],"[onNodeRegister, id, ref, canvas, nodes]",[1283,1302],"[calculateBBox]",[843,856],"[ref]",[2766,2820],"[info, targetRef]",[3701,3753],"[info]",[4557,4576],"[onDrag, onDragEnd, onDragStart, targetRef]",[2476,2500],"[initialPresent]",[1910,1912],"[input.entity.id, portRefs]",[1995,2020],"[inputPoint, outputPoint, pathOptions]",[2237,2291],"[link.label, inputPoint, outputPoint]",[2430,2455],"[link, onDelete]"]