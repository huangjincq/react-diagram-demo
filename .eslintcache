[{"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramCanvas/DiagramCanvas.js":"1","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Toolbar/Toolbar.tsx":"2","/Users/huangjin/Documents/work/person-project/react-mind-map/src/App.tsx":"3","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/NodesCanvas/NodesCanvas.js":"4","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useNodeUnregistration.js":"5","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getNodePortsId.js":"6","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/portGenerator.js":"7","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useContextRegistration.js":"8","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getPathMidpoint.js":"9","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getRelativePoint.js":"10","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeList.tsx":"11","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeListItem.tsx":"12","/Users/huangjin/Documents/work/person-project/react-mind-map/src/index.tsx":"13","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinksCanvas/findInvolvedEntity.js":"14","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Context/DiagramContext.js":"15","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/DiagramNode.js":"16","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useNodeRefs.js":"17","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useCanvas.js":"18","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/usePortRefs.js":"19","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useDrag.js":"20","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Diagram.js":"21","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/Types.js":"22","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link/Link.tsx":"23","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link/LinkDelete.tsx":"24","/Users/huangjin/Documents/work/person-project/react-mind-map/src/reportWebVitals.ts":"25","/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useHistory.ts":"26","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/NodesCanvas/updateNodeCoordinates.js":"27","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/makeSvgPath.ts":"28","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Segment/Segment.tsx":"29","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinksCanvas/LinksCanvas.tsx":"30","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Port/Port.tsx":"31"},{"size":2032,"mtime":1611186728462,"results":"32","hashOfConfig":"33"},{"size":1460,"mtime":1611187515879,"results":"34","hashOfConfig":"33"},{"size":1912,"mtime":1611233612555,"results":"35","hashOfConfig":"33"},{"size":2044,"mtime":1611100639159,"results":"36","hashOfConfig":"33"},{"size":598,"mtime":1610497565596,"results":"37","hashOfConfig":"33"},{"size":367,"mtime":1610497565581,"results":"38","hashOfConfig":"33"},{"size":439,"mtime":1611367899458,"results":"39","hashOfConfig":"33"},{"size":1116,"mtime":1611101742995,"results":"40","hashOfConfig":"33"},{"size":304,"mtime":1610497565585,"results":"41","hashOfConfig":"33"},{"size":130,"mtime":1610497565588,"results":"42","hashOfConfig":"33"},{"size":414,"mtime":1611189022379,"results":"43","hashOfConfig":"33"},{"size":452,"mtime":1611233494921,"results":"44","hashOfConfig":"33"},{"size":500,"mtime":1610497175539,"results":"45","hashOfConfig":"33"},{"size":706,"mtime":1611186728466,"results":"46","hashOfConfig":"33"},{"size":102,"mtime":1611368530827,"results":"47","hashOfConfig":"33"},{"size":4625,"mtime":1611370929049,"results":"48","hashOfConfig":"33"},{"size":284,"mtime":1610497565596,"results":"49","hashOfConfig":"33"},{"size":286,"mtime":1610497565593,"results":"50","hashOfConfig":"33"},{"size":284,"mtime":1610497565597,"results":"51","hashOfConfig":"33"},{"size":4861,"mtime":1611369723616,"results":"52","hashOfConfig":"33"},{"size":3076,"mtime":1611237804003,"results":"53","hashOfConfig":"33"},{"size":1109,"mtime":1610497565577,"results":"54","hashOfConfig":"33"},{"size":2907,"mtime":1611370103111,"results":"55","hashOfConfig":"33"},{"size":397,"mtime":1611234952587,"results":"56","hashOfConfig":"33"},{"size":425,"mtime":1610497175540,"results":"57","hashOfConfig":"33"},{"size":2453,"mtime":1611101215414,"results":"58","hashOfConfig":"33"},{"size":605,"mtime":1610547014931,"results":"59","hashOfConfig":"33"},{"size":710,"mtime":1611237081062,"results":"60","hashOfConfig":"33"},{"size":652,"mtime":1611237433592,"results":"61","hashOfConfig":"33"},{"size":1108,"mtime":1611238416506,"results":"62","hashOfConfig":"33"},{"size":1850,"mtime":1611369401396,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},"1la7djy",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"76"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"87"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"127"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramCanvas/DiagramCanvas.js",["141"],"import React, { useEffect, useRef, useState } from 'react'\n// import { useWindowScroll, useWindowResize } from 'beautiful-react-hooks';\nimport { isEqual } from 'lodash-es'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport DiagramContext from '../../Context/DiagramContext'\n\n/**\n * The DiagramCanvas component provides a context to the Diagram children.\n * The context contains the canvas bounding box (for future calculations) and the port references in order to\n * allow links to easily access to a the ports coordinates\n */\nconst DiagramCanvas = (props) => {\n  const { children, portRefs, nodeRefs, className, scale, ...rest } = props\n  const [bbox, setBoundingBox] = useState(null)\n  const canvasRef = useRef()\n  const classList = classNames('bi bi-diagram', className)\n\n  // calculate the given element bounding box and save it into the bbox state\n  const calculateBBox = (el) => {\n    if (el) {\n      const nextBBox = el.getBoundingClientRect()\n      nextBBox.el = el\n      if (!isEqual(nextBBox, bbox)) {\n        setBoundingBox(nextBBox)\n      }\n    }\n  }\n\n  // when the canvas is ready and placed within the DOM, save its bounding box to be provided down\n  // to children component as a context value for future calculations.\n  useEffect(() => calculateBBox(canvasRef.current), [canvasRef.current])\n  // same on window scroll and resize\n  // useWindowScroll(() => calculateBBox(canvasRef.current));\n  // useWindowResize(() => calculateBBox(canvasRef.current));\n\n  return (\n    <div className={classList} ref={canvasRef} {...rest} style={{ transform: `scale(${scale})` }}>\n      <DiagramContext.Provider value={{ canvas: bbox, ports: portRefs, nodes: nodeRefs, _nodes: {} }}>\n        {children}\n      </DiagramContext.Provider>\n    </div>\n  )\n}\n\nDiagramCanvas.propTypes = {\n  portRefs: PropTypes.shape({}),\n  nodeRefs: PropTypes.shape({}),\n  className: PropTypes.string,\n}\n\nDiagramCanvas.defaultProps = {\n  portRefs: {},\n  nodeRefs: {},\n  className: '',\n}\n\nexport default React.memo(DiagramCanvas)\n",["142","143"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Toolbar/Toolbar.tsx",[],["144","145"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/App.tsx",["146"],"import React, {useCallback, useState} from 'react'\nimport Diagram from './components/Diagram/Diagram'\nimport {useHistory} from './hooks/useHistory'\nimport {Toolbar} from './components/Toolbar/Toolbar'\nimport {NodeList} from \"./components/NodeList/NodeList\";\n\nconst defaultValue = {\n  nodes: [\n    {\n      id: 'node-1',\n      content: 'Start',\n      coordinates: [100, 150],\n      outputs: [\n        {id: 'port-1', alignment: 'right'},\n        // {id: 'port-2', alignment: 'right'},\n      ],\n      disableDrag: false,\n      data: {\n        foo: 'bar',\n        count: 0,\n      },\n    },\n    {\n      id: 'node-2',\n      content: 'Middle',\n      coordinates: [300, 150],\n      outputs: [\n        {id: 'port-5', alignment: 'right'},\n        {id: 'port-6', alignment: 'right'},\n      ],\n      data: {\n        bar: 'foo',\n      },\n    },\n    // {\n    //   id: 'node-3',\n    //   content: 'Middle',\n    //   coordinates: [600, 150],\n    //   outputs: [\n    //     { id: 'port-7', alignment: 'right' },\n    //     { id: 'port-68', alignment: 'right' },\n    //   ],\n    // },\n  ],\n  links: [{input: 'port-1', output: 'node-2'}],\n}\n\nfunction App() {\n  const {state, set, setHistory, undo, redo, clear, canUndo, canRedo} = useHistory(defaultValue)\n  const [scale, setScale] = useState<number>(1)\n\n  // const [schema, setSchema] = useState(defaultValue)\n  const handleChange = useCallback(\n    (value: any) => {\n      const newValue = {...state, ...value}\n      set(newValue)\n    },\n    [set, state]\n  )\n\n  const handleAddHistory = (nodes: any) => {\n    const newValue = {...state, nodes}\n    setHistory(newValue)\n  }\n\n  return (\n    <div className=\"App\">\n      <Diagram schema={state} scale={scale} onChange={handleChange} onAddHistory={handleAddHistory}/>\n      <NodeList/>\n\n      <Toolbar undo={undo} redo={redo} canUndo={canUndo} scale={scale} setScale={setScale} canRedo={canRedo}/>\n    </div>\n  )\n}\n\nexport default App\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/NodesCanvas/NodesCanvas.js",[],["147","148"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useNodeUnregistration.js",["149"],"import { useEffect } from 'react';\nimport getNodePortsId from '../functions/getNodePortsId';\n\n/**\n * Takes the inputs and outputs node ports and onNodeRemove callback to be performed when the node is unmounted\n */\nconst useNodeUnregistration = (onNodeRemove, inputs, outputs, id) => {\n  useEffect(() => () => {\n    if (onNodeRemove) {\n      const node = { inputs, outputs };\n      const inputsPort = getNodePortsId(node, 'inputs');\n      const outputsPort = getNodePortsId(node, 'outputs');\n      onNodeRemove(id, inputsPort, outputsPort);\n    }\n  }, []);\n};\n\nexport default useNodeUnregistration;\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getNodePortsId.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/portGenerator.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useContextRegistration.js",["150","151","152","153","154","155"],"import { useCallback, useEffect, useContext } from 'react';\nimport DiagramContext from '../../Context/DiagramContext';\n\n/**\n * Returns a callback that will perform the onPortRegister function when the context is ready (canvas exists)\n * and there's at least one input or one output\n */\nexport const usePortRegistration = (inputs, outputs, onPortRegister) => {\n  const { canvas, ports } = useContext(DiagramContext);\n\n  return useCallback((portId, portElement) => {\n    if (canvas && (inputs || outputs)) {\n      if (ports && !ports[portId]) {\n        onPortRegister(portId, portElement);\n      }\n    }\n  }, [!!canvas, !!ports, inputs, outputs]);\n};\n\n/**\n * Takes a dom reference and an onNodeRegister callback and perform the callback when the node is mounted\n * and the canvas is ready\n */\nexport const useNodeRegistration = (ref, onNodeRegister, id) => {\n  const { canvas, nodes } = useContext(DiagramContext);\n\n  useEffect(() => {\n    if (onNodeRegister && ref.current && canvas && nodes && !nodes[id]) {\n      onNodeRegister(id, ref.current);\n    }\n  }, [ref.current, onNodeRegister, !!canvas, !!nodes, id]);\n};\n",["156","157"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getPathMidpoint.js",[],["158","159"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/getRelativePoint.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeList.tsx",["160","161","162","163","164"],"import React, {useMemo, useState} from 'react'\nimport {Button, Popover} from \"antd\";\n\nimport \"./style.scss\"\nimport {NodeListItem} from \"./NodeListItem\";\n\nexport interface NodeListProps {\n\n}\n\n\nexport const NodeList: React.FC<NodeListProps> = ({}) => {\n\n\n  return (\n    <div className=\"node-list\">\n      <NodeListItem/>\n      <NodeListItem/>\n      <NodeListItem/>\n    </div>\n  )\n}\n\nNodeList.displayName = 'NodeList'\n",["165","166"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeListItem.tsx",["167"],"import React from 'react'\nimport {AppleOutlined} from '@ant-design/icons';\n\nimport \"./style.scss\"\n\nexport interface NodeListItemProps {\n\n}\n\n\nexport const NodeListItem: React.FC<NodeListItemProps> = React.memo(({}) => {\n  return (\n    <div className=\"node-list-item\" draggable>\n      <AppleOutlined className='node-list-icon'/>\n      <div className=\"node-list-text\">你好是啊啊是</div>\n    </div>\n  )\n})\n\nNodeListItem.displayName = 'NodeListItem'\n\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/index.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinksCanvas/findInvolvedEntity.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Context/DiagramContext.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/DiagramNode.js",["168","169"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useNodeRefs.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useCanvas.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/usePortRefs.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/internal_hooks/useDrag.js",["170","171","172","173","174","175"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Diagram.js",["176"],"import React, { useCallback, useState, useRef } from 'react'\nimport DiagramCanvas from './DiagramCanvas/DiagramCanvas'\nimport NodesCanvas from './NodesCanvas/NodesCanvas'\nimport { LinksCanvas } from './LinksCanvas/LinksCanvas'\nimport { Segment } from './Segment/Segment'\n\nimport './diagram.scss'\n\n\nconst Diagram = (props) => {\n  const { schema, onChange, onAddHistory, scale, ...rest } = props\n  const [segment, setSegment] = useState()\n  const { current: portRefs } = useRef({}) // keeps the port elements references\n  const { current: nodeRefs } = useRef({}) // keeps the node elements references\n\n  // when nodes change, performs the onChange callback with the new incoming data\n  const onNodesChange = (nextNodes) => {\n    if (onChange) {\n      onChange({ nodes: nextNodes })\n    }\n  }\n\n  // when a port is registered, save it to the local reference\n  const onPortRegister = (portId, portEl) => {\n    portRefs[portId] = portEl\n  }\n\n  // when a node is registered, save it to the local reference\n  const onNodeRegister = (nodeId, nodeEl) => {\n    const rect = nodeEl.getBoundingClientRect()\n    nodeRefs[nodeId] = {\n      width: rect.width / scale,\n      height: rect.height / scale\n    }\n  }\n\n  // when a node is deleted, remove its references\n  const onNodeRemove = useCallback((nodeId, inputsPorts, outputsPorts) => {\n    delete nodeRefs[nodeId]\n    inputsPorts.forEach((input) => delete portRefs[input])\n    outputsPorts.forEach((output) => delete portRefs[output])\n  }, [])\n\n  // when a new segment is dragged, save it to the local state\n  const onDragNewSegment = useCallback((portId, from, to, alignment) => {\n    setSegment({ id: `segment-${portId}`, from, to, alignment })\n  }, [])\n\n  // when a segment fails to connect, reset the segment state\n  const onSegmentFail = useCallback(() => {\n    setSegment(undefined)\n  }, [])\n\n  // when a segment connects, update the links schema, perform the onChange callback\n  // with the new data, then reset the segment state\n  const onSegmentConnect = (input, output) => {\n    const nextLinks = [...(schema.links || []), { input, output }]\n    if (onChange) {\n      onChange({ links: nextLinks })\n    }\n    setSegment(undefined)\n  }\n\n  // when links change, performs the onChange callback with the new incoming data\n  const onLinkDelete = (nextLinks) => {\n    if (onChange) {\n      onChange({ links: nextLinks })\n    }\n  }\n\n  return (\n    <DiagramCanvas portRefs={portRefs} nodeRefs={nodeRefs} scale={scale} {...rest}>\n      <NodesCanvas\n        scale={scale}\n        nodes={schema.nodes}\n        onChange={onNodesChange}\n        onNodeRegister={onNodeRegister}\n        onPortRegister={onPortRegister}\n        onNodeRemove={onNodeRemove}\n        onDragNewSegment={onDragNewSegment}\n        onSegmentFail={onSegmentFail}\n        onSegmentConnect={onSegmentConnect}\n        onAddHistory={onAddHistory}\n      />\n      <LinksCanvas nodes={schema.nodes} links={schema.links} onChange={onLinkDelete}/>\n      {segment && (\n        <Segment segment={segment}/>\n      )}\n    </DiagramCanvas>\n  )\n}\n\n\nexport default React.memo(Diagram)\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/Types.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link/Link.tsx",["177"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link/LinkDelete.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/reportWebVitals.ts",[],["178","179"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useHistory.ts",["180"],"import {useReducer, useCallback} from 'react';\n\n\n// 初始化useReducer中的state\nconst initialState = {\n  // 当我们每次添加新state时，用来储存更新前状态的数组\n  past: [],\n  // 当前的state值\n  present: null,\n  // 让我们可以用使用重做功能的，future数组\n  future: []\n};\n\n// 根据action处理state的改变\nconst reducer = (state: any, action: any) => {\n  const {past, present, future} = state;\n  const {newPresent} = action;\n\n\n  switch (action.type) {\n    case 'UNDO':\n      const previous = past[past.length - 1];\n      const newPast = past.slice(0, past.length - 1);\n\n      return {\n        past: newPast,\n        present: previous,\n        future: [present, ...future]\n      };\n    case 'REDO':\n      const next = future[0];\n      const newFuture = future.slice(1);\n\n      return {\n        past: [...past, present],\n        present: next,\n        future: newFuture\n      };\n    case 'SET':\n      // if (newPresent === present) {\n      //   return state;\n      // }\n      return {\n        past: [...past],\n        present: newPresent,\n        future: []\n      };\n\n    case 'SET_HISTORY':\n      if (newPresent === present) {\n        return state;\n      }\n      return {\n        past: [...past, newPresent],\n        present: present,\n        future: []\n      };\n\n    case 'CLEAR':\n      const {initialPresent} = action;\n\n      return {\n        ...initialState,\n        present: initialPresent\n      };\n  }\n};\n\n// Hook\nexport const useHistory = (initialPresent: any) => {\n  const [state, dispatch] = useReducer(reducer, {\n    ...initialState,\n    present: initialPresent\n  });\n\n  const canUndo = state.past.length !== 0;\n  const canRedo = state.future.length !== 0;\n\n\n  const undo = useCallback(\n    () => {\n      if (canUndo) {\n        dispatch({type: 'UNDO'});\n      }\n    },\n    [canUndo, dispatch]\n  );\n\n  const redo = useCallback(\n    () => {\n      if (canRedo) {\n        dispatch({type: 'REDO'});\n      }\n    },\n    [canRedo, dispatch]\n  );\n\n  const set = useCallback(newPresent => dispatch({type: 'SET', newPresent}), [\n    dispatch\n  ]);\n\n  const setHistory = useCallback(newPresent => dispatch({type: 'SET_HISTORY', newPresent}), [\n    dispatch\n  ]);\n\n\n  const clear = useCallback(() => dispatch({type: 'CLEAR', initialPresent}), [\n    dispatch\n  ]);\n  // 如果需要，同样可以到处过去和未来的state\n  return {state: state.present, set, setHistory, undo, redo, clear, canUndo, canRedo};\n};\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/NodesCanvas/updateNodeCoordinates.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/shared/functions/makeSvgPath.ts",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Segment/Segment.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinksCanvas/LinksCanvas.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Port/Port.tsx",[],{"ruleId":"181","severity":1,"message":"182","line":32,"column":53,"nodeType":"183","endLine":32,"endColumn":72,"suggestions":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"185","replacedBy":"189"},{"ruleId":"187","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":49,"column":46,"nodeType":"193","messageId":"194","endLine":49,"endColumn":51},{"ruleId":"185","replacedBy":"195"},{"ruleId":"187","replacedBy":"196"},{"ruleId":"181","severity":1,"message":"197","line":15,"column":6,"nodeType":"183","endLine":15,"endColumn":8,"suggestions":"198"},{"ruleId":"181","severity":1,"message":"199","line":17,"column":6,"nodeType":"183","endLine":17,"endColumn":42,"suggestions":"200"},{"ruleId":"181","severity":1,"message":"201","line":17,"column":7,"nodeType":"202","endLine":17,"endColumn":15},{"ruleId":"181","severity":1,"message":"201","line":17,"column":17,"nodeType":"202","endLine":17,"endColumn":24},{"ruleId":"181","severity":1,"message":"203","line":31,"column":6,"nodeType":"183","endLine":31,"endColumn":58,"suggestions":"204"},{"ruleId":"181","severity":1,"message":"205","line":31,"column":36,"nodeType":"202","endLine":31,"endColumn":44},{"ruleId":"181","severity":1,"message":"205","line":31,"column":46,"nodeType":"202","endLine":31,"endColumn":53},{"ruleId":"185","replacedBy":"206"},{"ruleId":"187","replacedBy":"207"},{"ruleId":"185","replacedBy":"189"},{"ruleId":"187","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"208","line":1,"column":16,"nodeType":"193","messageId":"194","endLine":1,"endColumn":23},{"ruleId":"191","severity":1,"message":"209","line":1,"column":25,"nodeType":"193","messageId":"194","endLine":1,"endColumn":33},{"ruleId":"191","severity":1,"message":"210","line":2,"column":9,"nodeType":"193","messageId":"194","endLine":2,"endColumn":15},{"ruleId":"191","severity":1,"message":"211","line":2,"column":17,"nodeType":"193","messageId":"194","endLine":2,"endColumn":24},{"ruleId":"212","severity":1,"message":"213","line":12,"column":51,"nodeType":"214","messageId":"215","endLine":12,"endColumn":53},{"ruleId":"185","replacedBy":"206"},{"ruleId":"187","replacedBy":"207"},{"ruleId":"212","severity":1,"message":"213","line":11,"column":70,"nodeType":"214","messageId":"215","endLine":11,"endColumn":72},{"ruleId":"216","severity":1,"message":"208","line":1,"column":17,"nodeType":"193","messageId":"194","endLine":1,"endColumn":24},{"ruleId":"216","severity":1,"message":"217","line":17,"column":5,"nodeType":"193","messageId":"194","endLine":17,"endColumn":9},{"ruleId":"181","severity":1,"message":"218","line":37,"column":5,"nodeType":"183","endLine":37,"endColumn":18,"suggestions":"219"},{"ruleId":"181","severity":1,"message":"220","line":111,"column":5,"nodeType":"183","endLine":111,"endColumn":59,"suggestions":"221"},{"ruleId":"181","severity":1,"message":"222","line":117,"column":18,"nodeType":"193","endLine":117,"endColumn":29},{"ruleId":"181","severity":1,"message":"223","line":144,"column":5,"nodeType":"183","endLine":144,"endColumn":57,"suggestions":"224"},{"ruleId":"181","severity":1,"message":"225","line":165,"column":19,"nodeType":"193","endLine":165,"endColumn":26},{"ruleId":"181","severity":1,"message":"226","line":170,"column":6,"nodeType":"183","endLine":170,"endColumn":25,"suggestions":"227"},{"ruleId":"181","severity":1,"message":"228","line":42,"column":6,"nodeType":"183","endLine":42,"endColumn":8,"suggestions":"229"},{"ruleId":"181","severity":1,"message":"230","line":67,"column":6,"nodeType":"183","endLine":67,"endColumn":60,"suggestions":"231"},{"ruleId":"185","replacedBy":"195"},{"ruleId":"187","replacedBy":"196"},{"ruleId":"181","severity":1,"message":"232","line":107,"column":78,"nodeType":"183","endLine":109,"endColumn":4,"suggestions":"233"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'calculateBBox'. Either include it or remove the dependency array. Mutable values like 'canvasRef.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["234"],"no-native-reassign",["235"],"no-negated-in-lhs",["236"],["235"],["236"],"@typescript-eslint/no-unused-vars","'clear' is assigned a value but never used.","Identifier","unusedVar",["235"],["236"],"React Hook useEffect has missing dependencies: 'id', 'inputs', 'onNodeRemove', and 'outputs'. Either include them or remove the dependency array. If 'onNodeRemove' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["237"],"React Hook useCallback has missing dependencies: 'canvas', 'onPortRegister', and 'ports'. Either include them or remove the dependency array. If 'onPortRegister' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["238"],"React Hook useCallback has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","UnaryExpression","React Hook useEffect has missing dependencies: 'canvas', 'nodes', and 'ref'. Either include them or remove the dependency array. Mutable values like 'ref.current' aren't valid dependencies because mutating them doesn't re-render the component.",["239"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.",["235"],["236"],"'useMemo' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'Popover' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-unused-vars","'data' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'ref'. Either include it or remove the dependency array. Mutable values like 'ref.current' aren't valid dependencies because mutating them doesn't re-render the component.",["240"],"React Hook useCallback has a missing dependency: 'targetRef'. Either include it or remove the dependency array. Mutable values like 'targetRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["241"],"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useCallback has unnecessary dependencies: 'dragEndHandlerRef.current' and 'targetRef.current'. Either exclude them or remove the dependency array. Mutable values like 'targetRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["242"],"The ref value 'targetRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'targetRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'onDrag', 'onDragEnd', 'onDragStart', and 'targetRef'. Either include them or remove the dependency array. Mutable values like 'targetRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["243"],"React Hook useCallback has missing dependencies: 'nodeRefs' and 'portRefs'. Either include them or remove the dependency array.",["244"],"React Hook useEffect has an unnecessary dependency: 'pathRef.current'. Either exclude it or remove the dependency array. Mutable values like 'pathRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["245"],"React Hook useCallback has a missing dependency: 'initialPresent'. Either include it or remove the dependency array.",["246"],{"desc":"247","fix":"248"},"no-global-assign","no-unsafe-negation",{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},"Update the dependencies array to be: [calculateBBox]",{"range":"269","text":"270"},"Update the dependencies array to be: [id, inputs, onNodeRemove, outputs]",{"range":"271","text":"272"},"Update the dependencies array to be: [canvas, inputs, onPortRegister, outputs, ports]",{"range":"273","text":"274"},"Update the dependencies array to be: [onNodeRegister, id, ref, canvas, nodes]",{"range":"275","text":"276"},"Update the dependencies array to be: [ref]",{"range":"277","text":"278"},"Update the dependencies array to be: [info, targetRef]",{"range":"279","text":"280"},"Update the dependencies array to be: [info]",{"range":"281","text":"282"},"Update the dependencies array to be: [onDrag, onDragEnd, onDragStart, targetRef]",{"range":"283","text":"284"},"Update the dependencies array to be: [nodeRefs, portRefs]",{"range":"285","text":"286"},"Update the dependencies array to be: [link.label, inputPoint, outputPoint]",{"range":"287","text":"288"},"Update the dependencies array to be: [initialPresent]",{"range":"289","text":"290"},[1313,1332],"[calculateBBox]",[551,553],"[id, inputs, onNodeRemove, outputs]",[607,643],"[canvas, inputs, onPortRegister, outputs, ports]",[1058,1110],"[onNodeRegister, id, ref, canvas, nodes]",[838,851],"[ref]",[2830,2884],"[info, targetRef]",[3765,3817],"[info]",[4621,4640],"[onDrag, onDragEnd, onDragStart, targetRef]",[1478,1480],"[nodeRefs, portRefs]",[2422,2476],"[link.label, inputPoint, outputPoint]",[2172,2190],"[initialPresent]"]