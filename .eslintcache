[{"/Users/huangjin/Documents/work/person-project/react-mind-map/src/App.tsx":"1","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/DiagramNode.tsx":"2","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeTypes/helper.ts":"3","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeTypes/NodeTypeInput.tsx":"4","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeList.tsx":"5","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeListItem.tsx":"6","/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useHistory.ts":"7","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeTypes/NodeTypeSelect.tsx":"8","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/portGenerator.js":"9","/Users/huangjin/Documents/work/person-project/react-mind-map/src/reportWebVitals.ts":"10","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Toolbar/Toolbar.tsx":"11","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Segment.tsx":"12","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link.tsx":"13","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Port.tsx":"14","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/index.tsx":"15","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/NodesCanvas.tsx":"16","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramCanvas.tsx":"17","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Context/DiagramContext.ts":"18","/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useCanvas.js":"19","/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useDrag.js":"20","/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useNodeRefs.js":"21","/Users/huangjin/Documents/work/person-project/react-mind-map/src/utils/getNodePortsId.js":"22","/Users/huangjin/Documents/work/person-project/react-mind-map/src/index.tsx":"23","/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useNodeUnregistration.js":"24","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinkDelete.tsx":"25","/Users/huangjin/Documents/work/person-project/react-mind-map/src/utils/index.ts":"26"},{"size":2583,"mtime":1611533073939,"results":"27","hashOfConfig":"28"},{"size":3346,"mtime":1611618200694,"results":"29","hashOfConfig":"28"},{"size":961,"mtime":1611390449008,"results":"30","hashOfConfig":"28"},{"size":627,"mtime":1611416172786,"results":"31","hashOfConfig":"28"},{"size":466,"mtime":1611389215067,"results":"32","hashOfConfig":"28"},{"size":655,"mtime":1611389696771,"results":"33","hashOfConfig":"28"},{"size":2453,"mtime":1611101215414,"results":"34","hashOfConfig":"28"},{"size":821,"mtime":1611532569788,"results":"35","hashOfConfig":"28"},{"size":430,"mtime":1611417435554,"results":"36","hashOfConfig":"28"},{"size":425,"mtime":1610497175540,"results":"37","hashOfConfig":"28"},{"size":1460,"mtime":1611187515879,"results":"38","hashOfConfig":"28"},{"size":613,"mtime":1611417839504,"results":"39","hashOfConfig":"28"},{"size":2773,"mtime":1611418243092,"results":"40","hashOfConfig":"28"},{"size":1942,"mtime":1611617997440,"results":"41","hashOfConfig":"28"},{"size":3249,"mtime":1611452987589,"results":"42","hashOfConfig":"28"},{"size":2227,"mtime":1611454253503,"results":"43","hashOfConfig":"28"},{"size":1668,"mtime":1611417435561,"results":"44","hashOfConfig":"28"},{"size":312,"mtime":1611413644564,"results":"45","hashOfConfig":"28"},{"size":294,"mtime":1611418117195,"results":"46","hashOfConfig":"28"},{"size":4928,"mtime":1611532477668,"results":"47","hashOfConfig":"28"},{"size":292,"mtime":1611418117194,"results":"48","hashOfConfig":"28"},{"size":367,"mtime":1610497565581,"results":"49","hashOfConfig":"28"},{"size":500,"mtime":1610497175539,"results":"50","hashOfConfig":"28"},{"size":594,"mtime":1611418243094,"results":"51","hashOfConfig":"28"},{"size":394,"mtime":1611417435550,"results":"52","hashOfConfig":"28"},{"size":388,"mtime":1611534090944,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1la7djy",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"101"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/huangjin/Documents/work/person-project/react-mind-map/src/App.tsx",["117"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/DiagramNode.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeTypes/helper.ts",[],["118","119"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeTypes/NodeTypeInput.tsx",["120","121","122"],"import React, { ChangeEvent, useMemo, useState } from 'react'\nimport { Input } from 'antd'\n\nimport './style.scss'\nimport { INodeItemProps } from '../../types'\n\nexport interface NodeTypeInputProps extends INodeItemProps<any> {\n}\n\n\nexport const NodeTypeInput: React.FC<NodeTypeInputProps> = (props) => {\n\n  const {value, onChange} = props\n  const handleInputChange = (e: any) => {\n    onChange({\n      ...value,\n      inputValue: e.target.value\n    })\n  }\n\n  return (\n    <>\n      <Input value={value.inputValue} onChange={handleInputChange} placeholder=\"Basic usage\"/>\n    </>\n  )\n}\n\nNodeTypeInput.displayName = 'NodeTypeInput'\n",["123","124"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeList.tsx",[],["125","126"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeListItem.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useHistory.ts",["127"],"import {useReducer, useCallback} from 'react';\n\n\n// 初始化useReducer中的state\nconst initialState = {\n  // 当我们每次添加新state时，用来储存更新前状态的数组\n  past: [],\n  // 当前的state值\n  present: null,\n  // 让我们可以用使用重做功能的，future数组\n  future: []\n};\n\n// 根据action处理state的改变\nconst reducer = (state: any, action: any) => {\n  const {past, present, future} = state;\n  const {newPresent} = action;\n\n\n  switch (action.type) {\n    case 'UNDO':\n      const previous = past[past.length - 1];\n      const newPast = past.slice(0, past.length - 1);\n\n      return {\n        past: newPast,\n        present: previous,\n        future: [present, ...future]\n      };\n    case 'REDO':\n      const next = future[0];\n      const newFuture = future.slice(1);\n\n      return {\n        past: [...past, present],\n        present: next,\n        future: newFuture\n      };\n    case 'SET':\n      // if (newPresent === present) {\n      //   return state;\n      // }\n      return {\n        past: [...past],\n        present: newPresent,\n        future: []\n      };\n\n    case 'SET_HISTORY':\n      if (newPresent === present) {\n        return state;\n      }\n      return {\n        past: [...past, newPresent],\n        present: present,\n        future: []\n      };\n\n    case 'CLEAR':\n      const {initialPresent} = action;\n\n      return {\n        ...initialState,\n        present: initialPresent\n      };\n  }\n};\n\n// Hook\nexport const useHistory = (initialPresent: any) => {\n  const [state, dispatch] = useReducer(reducer, {\n    ...initialState,\n    present: initialPresent\n  });\n\n  const canUndo = state.past.length !== 0;\n  const canRedo = state.future.length !== 0;\n\n\n  const undo = useCallback(\n    () => {\n      if (canUndo) {\n        dispatch({type: 'UNDO'});\n      }\n    },\n    [canUndo, dispatch]\n  );\n\n  const redo = useCallback(\n    () => {\n      if (canRedo) {\n        dispatch({type: 'REDO'});\n      }\n    },\n    [canRedo, dispatch]\n  );\n\n  const set = useCallback(newPresent => dispatch({type: 'SET', newPresent}), [\n    dispatch\n  ]);\n\n  const setHistory = useCallback(newPresent => dispatch({type: 'SET_HISTORY', newPresent}), [\n    dispatch\n  ]);\n\n\n  const clear = useCallback(() => dispatch({type: 'CLEAR', initialPresent}), [\n    dispatch\n  ]);\n  // 如果需要，同样可以到处过去和未来的state\n  return {state: state.present, set, setHistory, undo, redo, clear, canUndo, canRedo};\n};\n",["128","129"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeTypes/NodeTypeSelect.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/portGenerator.js",[],["130","131"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/reportWebVitals.ts",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Toolbar/Toolbar.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Segment.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link.tsx",["132"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Port.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/index.tsx",["133"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/NodesCanvas.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramCanvas.tsx",["134"],"import React, { useEffect, useRef, useState } from 'react'\n// import { useWindowScroll, useWindowResize } from 'beautiful-react-hooks';\nimport { isEqual } from 'lodash-es'\nimport DiagramContext from '../Context/DiagramContext'\nimport { IPortRefs, INodeRefs } from \"../../types\"\n\ninterface DiagramCanvasProps {\n  portRefs: IPortRefs;\n  nodeRefs: INodeRefs;\n  scale: number\n}\n\nexport const DiagramCanvas: React.FC<DiagramCanvasProps> = React.memo((props) => {\n  const {children, portRefs, nodeRefs, scale} = props\n  const [bbox, setBoundingBox] = useState<any>(null)\n  const canvasRef = useRef<HTMLDivElement>(null)\n\n  // calculate the given element bounding box and save it into the bbox state\n  const calculateBBox = (el: HTMLDivElement | null) => {\n    if (el) {\n      const nextBBox: any = el.getBoundingClientRect()\n      nextBBox.el = el\n      if (!isEqual(nextBBox, bbox)) {\n        setBoundingBox(nextBBox)\n      }\n    }\n  }\n\n  // when the canvas is ready and placed within the DOM, save its bounding box to be provided down\n  // to children component as a context value for future calculations.\n  useEffect(() => calculateBBox(canvasRef.current), [canvasRef.current])\n  // same on window scroll and resize\n  // useWindowScroll(() => calculateBBox(canvasRef.current));\n  // useWindowResize(() => calculateBBox(canvasRef.current));\n\n  return (\n    <div id='diagram-canvas' className={'bi bi-diagram'} ref={canvasRef} style={{transform: `scale(${scale})`}}>\n      <DiagramContext.Provider value={{canvas: bbox, ports: portRefs, nodes: nodeRefs}}>\n        {children}\n      </DiagramContext.Provider>\n    </div>\n  )\n})\n\nDiagramCanvas.displayName = 'DiagramCanvas'\n\n\n",["135","136"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Context/DiagramContext.ts",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useCanvas.js",[],["137","138"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useDrag.js",["139","140","141","142","143"],"import { throttle } from 'lodash-es'\nimport { useRef, useCallback, useEffect } from 'react'\n\nconst DISABLED_DRAG_TAGS = ['INPUT', 'TEXTAREA']\n\nconst defaultOptions = {\n  /**\n   * A custom ref to be used in place of a new one\n   * @default undefined\n   */\n  ref: null,\n  /**\n   * Throttle the onDrag handler by the given ms\n   * @default 0ms\n   */\n  throttleBy: 0\n}\n\n/**\n * Returns the click coordinates of a MouseEvent\n * @param event\n * @returns {*[]}\n */\nconst getEventCoordinates = (event) => [event.clientX, event.clientY]\n\n/**\n * Create a persistent callback reference that will live trough a component lifecycle\n * @param ref\n * @returns {Function}\n */\nconst CreateCallbackRef = (ref) =>\n  useCallback(\n    (callback) => {\n      if (!ref.current || callback !== ref.current) {\n        // eslint-disable-next-line no-param-reassign\n        ref.current = callback\n      }\n    },\n    [ref]\n  )\n\n/**\n * A custom hook exposing handlers and ref for developing draggable React elements.\n *\n * ## Basic Usage:\n *\n * ```\n * const DraggableItem = () => {\n *    const { ref, isDragging, onDragStart, onDrag, onDragEnd } = useDrag();\n *\n *    onDragStart(dragStartHandler);\n *\n *    onDrag(dragHandler);\n *\n *    onDragEnd(dragEndHandler);\n *\n *    return (\n *      <div ref={ref}>\n *        Drag me!\n *      </div>\n *    );\n * }\n * ```\n *\n * ## Options:\n *\n * ```\n * const DraggingItem = () => {\n *    const ref = useRef();\n *    const options = { ref, throttleBy: 60 };\n *    const { isDragging, onDragStart, onDrag, onDragEnd } = useDrag(options);\n *\n *    onDragStart(dragStartHandler);\n *\n *    onDrag(dragHandler);\n *\n *    onDragEnd(dragEndHandler);\n *\n *    return (\n *      <div ref={ref}>\n *        Drag me!\n *      </div>\n *    );\n * }\n * ```\n */\nconst useDrag = (options = defaultOptions) => {\n  const targetRef = options.ref // the target draggable element\n  const dragStartHandlerRef = useRef() // a ref to user's onDragStart handler\n  const dragHandlerRef = useRef() // a ref to user's onDrag handler\n  const dragEndHandlerRef = useRef() // a ref to user's onDragEnd handler\n  // the dragging state is created from a useRef rather than a useState to avoid rendering during the dragging process\n  const { current: info } = useRef({ isDragging: false, start: null, end: null, offset: null })\n\n  /**\n   * When the dragging starts, updates the state then perform the user's onDragStart handler if exists\n   */\n  const onDragStart = useCallback(\n    (event) => {\n      const targetTagName = event.target.tagName\n      if (!info.isDragging && targetRef.current.contains(event.target) && !DISABLED_DRAG_TAGS.includes(targetTagName)) {\n        info.isDragging = true\n        info.end = null\n        info.offset = null\n        info.start = getEventCoordinates(event)\n\n        if (dragStartHandlerRef.current) {\n          dragStartHandlerRef.current(event, { ...info })\n        }\n      }\n    },\n    [targetRef.current, info, dragStartHandlerRef.current]\n  )\n\n  /**\n   * Whilst dragging the element, updates the state then perform the user's onDrag handler if exists\n   */\n  const onDrag = useCallback(\n    throttle((event) => {\n      if (info.isDragging) {\n        info.offset = [info.start[0] - event.clientX, info.start[1] - event.clientY]\n\n        if (dragHandlerRef.current) {\n          dragHandlerRef.current(event, { ...info })\n        }\n      }\n    }, options.throttleBy),\n    [targetRef.current, info, dragHandlerRef.current]\n  )\n\n  /**\n   * When the dragging ends, updates the state then perform the user's onDragEnd handler if exists\n   */\n  const onDragEnd = useCallback(\n    (event) => {\n      if (info.isDragging) {\n        info.isDragging = false\n        info.end = getEventCoordinates(event)\n\n        if (dragEndHandlerRef.current) {\n          dragEndHandlerRef.current(event, { ...info })\n        }\n      }\n    },\n    [targetRef.current, info, dragEndHandlerRef.current]\n  )\n\n  /**\n   * When the layout renders the target item, assign the dragging events\n   */\n  useEffect(() => {\n    /* eslint-disable no-underscore-dangle */\n    const _onDragStart = (e) => onDragStart(e)\n    const _onDrag = (e) => onDrag(e)\n    const _onDragEnd = (e) => onDragEnd(e)\n    /* eslint-enable no-underscore-dangle */\n\n    if (targetRef.current) {\n      targetRef.current.addEventListener('mousedown', _onDragStart)\n      document.addEventListener('mousemove', _onDrag)\n      document.addEventListener('mouseup', _onDragEnd)\n    }\n\n    return () => {\n      if (targetRef.current) {\n        targetRef.current.removeEventListener('mousedown', _onDragStart)\n        document.removeEventListener('mousemove', _onDrag)\n        document.removeEventListener('mouseup', _onDragEnd)\n      }\n    }\n  }, [targetRef.current])\n\n  return {\n    ref: targetRef,\n    onDragStart: CreateCallbackRef(dragStartHandlerRef),\n    onDrag: CreateCallbackRef(dragHandlerRef),\n    onDragEnd: CreateCallbackRef(dragEndHandlerRef)\n  }\n}\n\nexport default useDrag\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useNodeRefs.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/utils/getNodePortsId.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/index.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useNodeUnregistration.js",["144"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/LinkDelete.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/utils/index.ts",[],{"ruleId":"145","severity":1,"message":"146","line":43,"column":46,"nodeType":"147","messageId":"148","endLine":43,"endColumn":51},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"145","severity":1,"message":"153","line":1,"column":17,"nodeType":"147","messageId":"148","endLine":1,"endColumn":28},{"ruleId":"145","severity":1,"message":"154","line":1,"column":30,"nodeType":"147","messageId":"148","endLine":1,"endColumn":37},{"ruleId":"145","severity":1,"message":"155","line":1,"column":39,"nodeType":"147","messageId":"148","endLine":1,"endColumn":47},{"ruleId":"149","replacedBy":"156"},{"ruleId":"151","replacedBy":"157"},{"ruleId":"149","replacedBy":"158"},{"ruleId":"151","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":107,"column":78,"nodeType":"162","endLine":109,"endColumn":4,"suggestions":"163"},{"ruleId":"149","replacedBy":"164"},{"ruleId":"151","replacedBy":"165"},{"ruleId":"149","replacedBy":"156"},{"ruleId":"151","replacedBy":"157"},{"ruleId":"160","severity":1,"message":"166","line":64,"column":6,"nodeType":"162","endLine":64,"endColumn":60,"suggestions":"167"},{"ruleId":"160","severity":1,"message":"168","line":47,"column":6,"nodeType":"162","endLine":47,"endColumn":8,"suggestions":"169"},{"ruleId":"160","severity":1,"message":"170","line":31,"column":53,"nodeType":"162","endLine":31,"endColumn":72,"suggestions":"171"},{"ruleId":"149","replacedBy":"172"},{"ruleId":"151","replacedBy":"173"},{"ruleId":"149","replacedBy":"164"},{"ruleId":"151","replacedBy":"165"},{"ruleId":"160","severity":1,"message":"174","line":112,"column":5,"nodeType":"162","endLine":112,"endColumn":59,"suggestions":"175"},{"ruleId":"160","severity":1,"message":"176","line":118,"column":18,"nodeType":"147","endLine":118,"endColumn":29},{"ruleId":"160","severity":1,"message":"177","line":145,"column":5,"nodeType":"162","endLine":145,"endColumn":57,"suggestions":"178"},{"ruleId":"160","severity":1,"message":"179","line":166,"column":19,"nodeType":"147","endLine":166,"endColumn":26},{"ruleId":"160","severity":1,"message":"180","line":171,"column":6,"nodeType":"162","endLine":171,"endColumn":25,"suggestions":"181"},{"ruleId":"160","severity":1,"message":"182","line":15,"column":6,"nodeType":"162","endLine":15,"endColumn":8,"suggestions":"183"},"@typescript-eslint/no-unused-vars","'clear' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["184"],"no-negated-in-lhs",["185"],"'ChangeEvent' is defined but never used.","'useMemo' is defined but never used.","'useState' is defined but never used.",["184"],["185"],["184"],["185"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'initialPresent'. Either include it or remove the dependency array.","ArrayExpression",["186"],["184"],["185"],"React Hook useEffect has an unnecessary dependency: 'pathRef.current'. Either exclude it or remove the dependency array. Mutable values like 'pathRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["187"],"React Hook useCallback has missing dependencies: 'nodeRefs' and 'portRefs'. Either include them or remove the dependency array.",["188"],"React Hook useEffect has a missing dependency: 'calculateBBox'. Either include it or remove the dependency array. Mutable values like 'canvasRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["189"],["184"],["185"],"React Hook useCallback has a missing dependency: 'targetRef'. Either include it or remove the dependency array. Mutable values like 'targetRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["190"],"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useCallback has unnecessary dependencies: 'dragEndHandlerRef.current' and 'targetRef.current'. Either exclude them or remove the dependency array. Mutable values like 'targetRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["191"],"The ref value 'targetRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'targetRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'onDrag', 'onDragEnd', 'onDragStart', and 'targetRef'. Either include them or remove the dependency array. Mutable values like 'targetRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["192"],"React Hook useEffect has missing dependencies: 'id', 'inputs', 'onNodeRemove', and 'outputs'. Either include them or remove the dependency array. If 'onNodeRemove' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["193"],"no-global-assign","no-unsafe-negation",{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},"Update the dependencies array to be: [initialPresent]",{"range":"210","text":"211"},"Update the dependencies array to be: [link.label, inputPoint, outputPoint]",{"range":"212","text":"213"},"Update the dependencies array to be: [nodeRefs, portRefs]",{"range":"214","text":"215"},"Update the dependencies array to be: [calculateBBox]",{"range":"216","text":"217"},"Update the dependencies array to be: [info, targetRef]",{"range":"218","text":"219"},"Update the dependencies array to be: [info]",{"range":"220","text":"221"},"Update the dependencies array to be: [onDrag, onDragEnd, onDragStart, targetRef]",{"range":"222","text":"223"},"Update the dependencies array to be: [id, inputs, onNodeRemove, outputs]",{"range":"224","text":"225"},[2172,2190],"[initialPresent]",[2288,2342],"[link.label, inputPoint, outputPoint]",[1746,1748],"[nodeRefs, portRefs]",[1154,1173],"[calculateBBox]",[2898,2952],"[info, targetRef]",[3833,3885],"[info]",[4689,4708],"[onDrag, onDragEnd, onDragStart, targetRef]",[547,549],"[id, inputs, onNodeRemove, outputs]"]