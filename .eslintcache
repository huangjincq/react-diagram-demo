[{"/Users/huangjin/Documents/work/person-project/react-mind-map/src/App.tsx":"1","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/DiagramNode.tsx":"2","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeTypes/helper.ts":"3","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeTypes/NodeTypeInput.tsx":"4","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeList.tsx":"5","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeListItem.tsx":"6","/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useHistory.ts":"7","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeTypes/NodeTypeSelect.tsx":"8","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/portGenerator.js":"9","/Users/huangjin/Documents/work/person-project/react-mind-map/src/reportWebVitals.ts":"10","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Toolbar/Toolbar.tsx":"11","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Segment.tsx":"12","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link.tsx":"13","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Port.tsx":"14","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/index.tsx":"15","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/NodesCanvas.tsx":"16","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramCanvas.tsx":"17","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Context/DiagramContext.ts":"18","/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useCanvas.js":"19","/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useDrag.js":"20","/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useNodeRefs.js":"21"},{"size":2463,"mtime":1611417587602,"results":"22","hashOfConfig":"23"},{"size":3455,"mtime":1611416819986,"results":"24","hashOfConfig":"23"},{"size":961,"mtime":1611390449008,"results":"25","hashOfConfig":"23"},{"size":627,"mtime":1611416172786,"results":"26","hashOfConfig":"23"},{"size":466,"mtime":1611389215067,"results":"27","hashOfConfig":"23"},{"size":655,"mtime":1611389696771,"results":"28","hashOfConfig":"23"},{"size":2453,"mtime":1611101215414,"results":"29","hashOfConfig":"23"},{"size":797,"mtime":1611416639876,"results":"30","hashOfConfig":"23"},{"size":430,"mtime":1611417435554,"results":"31","hashOfConfig":"23"},{"size":425,"mtime":1610497175540,"results":"32","hashOfConfig":"23"},{"size":1460,"mtime":1611187515879,"results":"33","hashOfConfig":"23"},{"size":613,"mtime":1611417839504,"results":"34","hashOfConfig":"23"},{"size":2773,"mtime":1611418243092,"results":"35","hashOfConfig":"23"},{"size":1815,"mtime":1611418117192,"results":"36","hashOfConfig":"23"},{"size":3249,"mtime":1611450898274,"results":"37","hashOfConfig":"23"},{"size":2233,"mtime":1611417435557,"results":"38","hashOfConfig":"23"},{"size":1668,"mtime":1611417435561,"results":"39","hashOfConfig":"23"},{"size":312,"mtime":1611413644564,"results":"40","hashOfConfig":"23"},{"size":294,"mtime":1611418117195,"results":"41","hashOfConfig":"23"},{"size":4861,"mtime":1611369723616,"results":"42","hashOfConfig":"23"},{"size":292,"mtime":1611418117194,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"1la7djy",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"69"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/huangjin/Documents/work/person-project/react-mind-map/src/App.tsx",["99"],"import React, { useCallback, useState } from 'react'\nimport { Diagram } from './components/Diagram'\nimport { useHistory } from './hooks/useHistory'\nimport { Toolbar } from './components/Toolbar/Toolbar'\nimport { NodeList } from './components/NodeList/NodeList'\nimport { IDiagramType, ICoordinateType } from './types'\nimport { createNode } from './components/NodeTypes/helper'\n\nconst defaultValue: IDiagramType = {\n  nodes: [\n    {\n      id: 'node-1',\n      coordinates: [100, 150],\n      inputs: [],\n      outputs: [\n        {id: 'port-1', disabled: false}\n      ],\n      type: 'node-type-input',\n      data: {\n        inputValue: 'defaultValue'\n      }\n    },\n    {\n      id: 'node-2',\n      type: 'node-type-select',\n      coordinates: [400, 200],\n      inputs: [],\n      outputs: [\n        {id: 'port-5', disabled: false},\n        {id: 'port-6', disabled: false}\n      ],\n      data: {\n        bar: 'foo'\n      }\n    }\n  ],\n  links: [{input: 'port-1', output: 'node-2'}]\n}\n\nfunction App() {\n  const {state, set, setHistory, undo, redo, clear, canUndo, canRedo} = useHistory(defaultValue)\n  const [scale, setScale] = useState<number>(1)\n\n\n  // const [schema, setSchema] = useState(defaultValue)\n  const handleChange = useCallback(\n    (value: any) => {\n      const newValue = {...state, ...value}\n      set(newValue)\n    },\n    [set, state]\n  )\n\n  const handleAddHistory = (nodes: any) => {\n    const newValue = {...state, nodes}\n    setHistory(newValue)\n  }\n\n  const handleDrop = (event: any) => {\n    if (event) {\n      event = window.event\n    }\n    const nodeType = event.dataTransfer.getData('nodeType')\n    const x = event.clientX\n    const y = event.clientY\n\n    const diagramCanvasRect = document.getElementById('diagram-canvas')?.getBoundingClientRect() || {x: 0, y: 0}\n\n    const coordinates: ICoordinateType = [\n      (x - diagramCanvasRect.x) / scale,\n      (y - diagramCanvasRect.y) / scale\n    ]\n    const newNode = createNode(nodeType, coordinates)\n\n\n    handleChange({nodes: [...state.nodes, newNode]})\n  }\n  const handleDrag = (e: any) => {\n    e.preventDefault()\n  }\n\n\n  return (\n    <div className=\"App\" onDrop={handleDrop} onDragEnter={handleDrag} onDragOver={handleDrag}>\n      <Diagram value={state} scale={scale} onChange={handleChange} onAddHistory={handleAddHistory}/>\n      <NodeList/>\n\n      <Toolbar undo={undo} redo={redo} canUndo={canUndo} scale={scale} setScale={setScale} canRedo={canRedo}/>\n    </div>\n  )\n}\n\nexport default App\n",["100","101"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/DiagramNode.tsx",[],["102","103"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeTypes/helper.ts",[],["104","105"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeTypes/NodeTypeInput.tsx",["106","107","108"],"import React, { ChangeEvent, useMemo, useState } from 'react'\nimport { Input } from 'antd'\n\nimport './style.scss'\nimport { INodeItemProps } from '../../types'\n\nexport interface NodeTypeInputProps extends INodeItemProps<any> {\n}\n\n\nexport const NodeTypeInput: React.FC<NodeTypeInputProps> = (props) => {\n\n  const {value, onChange} = props\n  const handleInputChange = (e: any) => {\n    onChange({\n      ...value,\n      inputValue: e.target.value\n    })\n  }\n\n  return (\n    <>\n      <Input value={value.inputValue} onChange={handleInputChange} placeholder=\"Basic usage\"/>\n    </>\n  )\n}\n\nNodeTypeInput.displayName = 'NodeTypeInput'\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeList.tsx",[],["109","110"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeList/NodeListItem.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useHistory.ts",["111"],"import {useReducer, useCallback} from 'react';\n\n\n// 初始化useReducer中的state\nconst initialState = {\n  // 当我们每次添加新state时，用来储存更新前状态的数组\n  past: [],\n  // 当前的state值\n  present: null,\n  // 让我们可以用使用重做功能的，future数组\n  future: []\n};\n\n// 根据action处理state的改变\nconst reducer = (state: any, action: any) => {\n  const {past, present, future} = state;\n  const {newPresent} = action;\n\n\n  switch (action.type) {\n    case 'UNDO':\n      const previous = past[past.length - 1];\n      const newPast = past.slice(0, past.length - 1);\n\n      return {\n        past: newPast,\n        present: previous,\n        future: [present, ...future]\n      };\n    case 'REDO':\n      const next = future[0];\n      const newFuture = future.slice(1);\n\n      return {\n        past: [...past, present],\n        present: next,\n        future: newFuture\n      };\n    case 'SET':\n      // if (newPresent === present) {\n      //   return state;\n      // }\n      return {\n        past: [...past],\n        present: newPresent,\n        future: []\n      };\n\n    case 'SET_HISTORY':\n      if (newPresent === present) {\n        return state;\n      }\n      return {\n        past: [...past, newPresent],\n        present: present,\n        future: []\n      };\n\n    case 'CLEAR':\n      const {initialPresent} = action;\n\n      return {\n        ...initialState,\n        present: initialPresent\n      };\n  }\n};\n\n// Hook\nexport const useHistory = (initialPresent: any) => {\n  const [state, dispatch] = useReducer(reducer, {\n    ...initialState,\n    present: initialPresent\n  });\n\n  const canUndo = state.past.length !== 0;\n  const canRedo = state.future.length !== 0;\n\n\n  const undo = useCallback(\n    () => {\n      if (canUndo) {\n        dispatch({type: 'UNDO'});\n      }\n    },\n    [canUndo, dispatch]\n  );\n\n  const redo = useCallback(\n    () => {\n      if (canRedo) {\n        dispatch({type: 'REDO'});\n      }\n    },\n    [canRedo, dispatch]\n  );\n\n  const set = useCallback(newPresent => dispatch({type: 'SET', newPresent}), [\n    dispatch\n  ]);\n\n  const setHistory = useCallback(newPresent => dispatch({type: 'SET_HISTORY', newPresent}), [\n    dispatch\n  ]);\n\n\n  const clear = useCallback(() => dispatch({type: 'CLEAR', initialPresent}), [\n    dispatch\n  ]);\n  // 如果需要，同样可以到处过去和未来的state\n  return {state: state.present, set, setHistory, undo, redo, clear, canUndo, canRedo};\n};\n",["112","113"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/NodeTypes/NodeTypeSelect.tsx",["114"],"import React from 'react'\nimport { Select } from \"antd\"\n\nimport \"./style.scss\"\nimport { INodeItemProps } from '../../types'\n\nexport interface NodeTypeInputProps extends INodeItemProps<any> {\n\n}\n\n\nexport const NodeTypeSelect: React.FC<NodeTypeInputProps> = ({}) => {\n  function handleChange(value: string) {\n    console.log(`selected ${value}`)\n  }\n\n  return (\n    <>\n      <Select defaultValue=\"lucy\" style={{width: 120}} onChange={handleChange}>\n        <Select.Option value=\"jack\">Jack</Select.Option>\n        <Select.Option value=\"lucy\">Lucy</Select.Option>\n        <Select.Option value=\"disabled\" disabled>\n          Disabled\n        </Select.Option>\n        <Select.Option value=\"Yiminghe\">yiminghe</Select.Option>\n      </Select>\n    </>\n  )\n}\n\nNodeTypeSelect.displayName = 'NodeTypeSelect'\n",["115","116"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramNode/portGenerator.js",[],["117","118"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/reportWebVitals.ts",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Toolbar/Toolbar.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Segment.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Link.tsx",["119"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/Port.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/index.tsx",["120"],"import React, { useCallback, useState, useRef } from 'react'\nimport { DiagramCanvas } from './DiagramCanvas'\nimport { NodesCanvas } from './NodesCanvas'\nimport { LinksCanvas } from './LinksCanvas'\nimport { Segment } from './Segment'\n\nimport './style.scss'\nimport { IDiagramType, ILinkType, ISegmentType, IPortRefs, INodeRefs } from \"../../types\"\n\ninterface DiagramProps {\n  value: IDiagramType,\n  onChange: (value: IDiagramType) => void;\n  onAddHistory: any;\n  scale: number\n}\n\nexport const Diagram: React.FC<DiagramProps> = React.memo((props) => {\n  const {value, onChange, onAddHistory, scale,} = props\n  const [segment, setSegment] = useState<ISegmentType | undefined>()\n  const {current: portRefs} = useRef<IPortRefs>({}) // keeps the port elements references\n  const {current: nodeRefs} = useRef<INodeRefs>({}) // keeps the node elements references\n\n\n  // when nodes change, performs the onChange callback with the new incoming data\n  const onNodesChange = (nextNodes: any) => {\n    if (onChange) {\n      onChange({...value, nodes: nextNodes})\n    }\n  }\n\n  // when a port is registered, save it to the local reference\n  const onPortRegister = (portId: string, portEl: HTMLDivElement) => {\n    portRefs[portId] = portEl\n  }\n\n  // when a node is registered, save it to the local reference\n  const onNodeRegister = (nodeId: string, nodeEl: HTMLDivElement) => {\n    // const rect = nodeEl.getBoundingClientRect()\n    nodeRefs[nodeId] = nodeEl\n  }\n\n  // when a node is deleted, remove its references\n  const onNodeRemove = useCallback((nodeId, inputsPorts, outputsPorts) => {\n    delete nodeRefs[nodeId]\n    inputsPorts.forEach((input: string) => delete portRefs[input])\n    outputsPorts.forEach((output: string) => delete portRefs[output])\n  }, [])\n\n  // when a new segment is dragged, save it to the local state\n  const onDragNewSegment = useCallback((portId, from, to) => {\n    setSegment({id: `segment-${portId}`, from, to})\n  }, [])\n\n  // when a segment fails to connect, reset the segment state\n  const onSegmentFail = useCallback(() => {\n    setSegment(undefined)\n  }, [])\n\n  // when a segment connects, update the links schema, perform the onChange callback\n  // with the new data, then reset the segment state\n  const onSegmentConnect = (input: string, output: string) => {\n    const nextLinks = [...value.links, {input, output}]\n    onChange({...value, links: nextLinks})\n    setSegment(undefined)\n  }\n\n  // when links change, performs the onChange callback with the new incoming data\n  const onLinkDelete = (nextLinks: ILinkType[]) => {\n    onChange({...value, links: nextLinks})\n  }\n\n  return (\n    <DiagramCanvas portRefs={portRefs} nodeRefs={nodeRefs} scale={scale}>\n      <NodesCanvas\n        scale={scale}\n        nodes={value.nodes}\n        onChange={onNodesChange}\n        onNodeRegister={onNodeRegister}\n        onPortRegister={onPortRegister}\n        onNodeRemove={onNodeRemove}\n        onDragNewSegment={onDragNewSegment}\n        onSegmentFail={onSegmentFail}\n        onSegmentConnect={onSegmentConnect}\n        onAddHistory={onAddHistory}\n      />\n      <LinksCanvas nodes={value.nodes} links={value.links} onChange={onLinkDelete}/>\n      {segment && (\n        <Segment segment={segment}/>\n      )}\n    </DiagramCanvas>\n  )\n})\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/NodesCanvas.tsx",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Diagram/DiagramCanvas.tsx",["121"],"import React, { useEffect, useRef, useState } from 'react'\n// import { useWindowScroll, useWindowResize } from 'beautiful-react-hooks';\nimport { isEqual } from 'lodash-es'\nimport DiagramContext from '../Context/DiagramContext'\nimport { IPortRefs, INodeRefs } from \"../../types\"\n\ninterface DiagramCanvasProps {\n  portRefs: IPortRefs;\n  nodeRefs: INodeRefs;\n  scale: number\n}\n\nexport const DiagramCanvas: React.FC<DiagramCanvasProps> = React.memo((props) => {\n  const {children, portRefs, nodeRefs, scale} = props\n  const [bbox, setBoundingBox] = useState<any>(null)\n  const canvasRef = useRef<HTMLDivElement>(null)\n\n  // calculate the given element bounding box and save it into the bbox state\n  const calculateBBox = (el: HTMLDivElement | null) => {\n    if (el) {\n      const nextBBox: any = el.getBoundingClientRect()\n      nextBBox.el = el\n      if (!isEqual(nextBBox, bbox)) {\n        setBoundingBox(nextBBox)\n      }\n    }\n  }\n\n  // when the canvas is ready and placed within the DOM, save its bounding box to be provided down\n  // to children component as a context value for future calculations.\n  useEffect(() => calculateBBox(canvasRef.current), [canvasRef.current])\n  // same on window scroll and resize\n  // useWindowScroll(() => calculateBBox(canvasRef.current));\n  // useWindowResize(() => calculateBBox(canvasRef.current));\n\n  return (\n    <div id='diagram-canvas' className={'bi bi-diagram'} ref={canvasRef} style={{transform: `scale(${scale})`}}>\n      <DiagramContext.Provider value={{canvas: bbox, ports: portRefs, nodes: nodeRefs}}>\n        {children}\n      </DiagramContext.Provider>\n    </div>\n  )\n})\n\nDiagramCanvas.displayName = 'DiagramCanvas'\n\n\n","/Users/huangjin/Documents/work/person-project/react-mind-map/src/components/Context/DiagramContext.ts",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useCanvas.js",[],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useDrag.js",["122","123","124","125","126","127"],"/Users/huangjin/Documents/work/person-project/react-mind-map/src/hooks/useNodeRefs.js",[],{"ruleId":"128","severity":1,"message":"129","line":41,"column":46,"nodeType":"130","messageId":"131","endLine":41,"endColumn":51},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"132","replacedBy":"136"},{"ruleId":"134","replacedBy":"137"},{"ruleId":"132","replacedBy":"138"},{"ruleId":"134","replacedBy":"139"},{"ruleId":"128","severity":1,"message":"140","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":28},{"ruleId":"128","severity":1,"message":"141","line":1,"column":30,"nodeType":"130","messageId":"131","endLine":1,"endColumn":37},{"ruleId":"128","severity":1,"message":"142","line":1,"column":39,"nodeType":"130","messageId":"131","endLine":1,"endColumn":47},{"ruleId":"132","replacedBy":"143"},{"ruleId":"134","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":107,"column":78,"nodeType":"147","endLine":109,"endColumn":4,"suggestions":"148"},{"ruleId":"132","replacedBy":"149"},{"ruleId":"134","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":12,"column":62,"nodeType":"153","messageId":"154","endLine":12,"endColumn":64},{"ruleId":"132","replacedBy":"155"},{"ruleId":"134","replacedBy":"156"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"145","severity":1,"message":"157","line":64,"column":6,"nodeType":"147","endLine":64,"endColumn":60,"suggestions":"158"},{"ruleId":"145","severity":1,"message":"159","line":47,"column":6,"nodeType":"147","endLine":47,"endColumn":8,"suggestions":"160"},{"ruleId":"145","severity":1,"message":"161","line":31,"column":53,"nodeType":"147","endLine":31,"endColumn":72,"suggestions":"162"},{"ruleId":"145","severity":1,"message":"163","line":37,"column":5,"nodeType":"147","endLine":37,"endColumn":18,"suggestions":"164"},{"ruleId":"145","severity":1,"message":"165","line":111,"column":5,"nodeType":"147","endLine":111,"endColumn":59,"suggestions":"166"},{"ruleId":"145","severity":1,"message":"167","line":117,"column":18,"nodeType":"130","endLine":117,"endColumn":29},{"ruleId":"145","severity":1,"message":"168","line":144,"column":5,"nodeType":"147","endLine":144,"endColumn":57,"suggestions":"169"},{"ruleId":"145","severity":1,"message":"170","line":165,"column":19,"nodeType":"130","endLine":165,"endColumn":26},{"ruleId":"145","severity":1,"message":"171","line":170,"column":6,"nodeType":"147","endLine":170,"endColumn":25,"suggestions":"172"},"@typescript-eslint/no-unused-vars","'clear' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["173"],"no-negated-in-lhs",["174"],["173"],["174"],["173"],["174"],"'ChangeEvent' is defined but never used.","'useMemo' is defined but never used.","'useState' is defined but never used.",["173"],["174"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'initialPresent'. Either include it or remove the dependency array.","ArrayExpression",["175"],["173"],["174"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["173"],["174"],"React Hook useEffect has an unnecessary dependency: 'pathRef.current'. Either exclude it or remove the dependency array. Mutable values like 'pathRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["176"],"React Hook useCallback has missing dependencies: 'nodeRefs' and 'portRefs'. Either include them or remove the dependency array.",["177"],"React Hook useEffect has a missing dependency: 'calculateBBox'. Either include it or remove the dependency array. Mutable values like 'canvasRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["178"],"React Hook useCallback has a missing dependency: 'ref'. Either include it or remove the dependency array. Mutable values like 'ref.current' aren't valid dependencies because mutating them doesn't re-render the component.",["179"],"React Hook useCallback has a missing dependency: 'targetRef'. Either include it or remove the dependency array. Mutable values like 'targetRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["180"],"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useCallback has unnecessary dependencies: 'dragEndHandlerRef.current' and 'targetRef.current'. Either exclude them or remove the dependency array. Mutable values like 'targetRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["181"],"The ref value 'targetRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'targetRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'onDrag', 'onDragEnd', 'onDragStart', and 'targetRef'. Either include them or remove the dependency array. Mutable values like 'targetRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["182"],"no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},"Update the dependencies array to be: [initialPresent]",{"range":"199","text":"200"},"Update the dependencies array to be: [link.label, inputPoint, outputPoint]",{"range":"201","text":"202"},"Update the dependencies array to be: [nodeRefs, portRefs]",{"range":"203","text":"204"},"Update the dependencies array to be: [calculateBBox]",{"range":"205","text":"206"},"Update the dependencies array to be: [ref]",{"range":"207","text":"208"},"Update the dependencies array to be: [info, targetRef]",{"range":"209","text":"210"},"Update the dependencies array to be: [info]",{"range":"211","text":"212"},"Update the dependencies array to be: [onDrag, onDragEnd, onDragStart, targetRef]",{"range":"213","text":"214"},[2172,2190],"[initialPresent]",[2288,2342],"[link.label, inputPoint, outputPoint]",[1746,1748],"[nodeRefs, portRefs]",[1154,1173],"[calculateBBox]",[838,851],"[ref]",[2830,2884],"[info, targetRef]",[3765,3817],"[info]",[4621,4640],"[onDrag, onDragEnd, onDragStart, targetRef]"]